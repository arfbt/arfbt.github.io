<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue学习记录</title>
    <link href="/2022/07/18/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/07/18/Vue%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue内置指令"><a href="#Vue内置指令" class="headerlink" title="Vue内置指令"></a>Vue内置指令</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">v-text <span class="hljs-comment">//可以是表达式，可以是函数调用，如果是undefine或null就不显示</span><br>v-html <span class="hljs-comment">//HTML内容</span><br>ref   <span class="hljs-comment">//为特定的元素添加引用标识，实例的$refs内部可以获取到</span><br>v-on   <span class="hljs-comment">//绑定事件 简写@</span><br>v-bind <span class="hljs-comment">//单向数据绑定 简写:</span><br>v-<span class="hljs-keyword">for</span> <span class="hljs-comment">//列表渲染</span><br>v-<span class="hljs-keyword">if</span> <span class="hljs-comment">//条件渲染</span><br>v-<span class="hljs-keyword">else</span><br>v-show <span class="hljs-comment">//条件渲染</span><br>v-model<span class="hljs-comment">//双向数据绑定，MVVM模型</span><br></code></pre></div></td></tr></table></figure><h2 id="Vue组件的data函数式与对象式的区别"><a href="#Vue组件的data函数式与对象式的区别" class="headerlink" title="Vue组件的data函数式与对象式的区别"></a>Vue组件的data函数式与对象式的区别</h2><p>在组件复用的时候，<em><strong>函数式</strong></em>data会给每个实例化对象都拷贝一份<code>data</code>，而<em><strong>对象式</strong></em><code>data</code>会指向同一个<code>data</code></p><h2 id="事件绑定的回调的类型"><a href="#事件绑定的回调的类型" class="headerlink" title="事件绑定的回调的类型"></a>事件绑定的回调的类型</h2><ul><li><code>回调函数类型</code>，<code>this</code>指向正常，不可以自行添加参数，默认自带一个<code>event</code>参数</li><li><code>函数调用类型</code>，本质上是<code>Vue</code>在这个函数外层添加了一个<code>function($event)&#123;&#125;</code>，此时<code>this</code>指向<code>window</code>，<code>Vue</code>添加的外层参数会自带一个<code>$event</code>参数，并且不影响自行添加参数的顺序，想要使用事件对象需要向内层函数传入<code>$event</code></li></ul><h2 id="Vue中的this指向"><a href="#Vue中的this指向" class="headerlink" title="Vue中的this指向"></a>Vue中的this指向</h2><ul><li><code>data</code>中的<code>this</code>指向代理对象<code>Proxy</code></li><li><code>methods</code>中的<code>this</code>指向实例化对象<code>vm</code></li></ul><h2 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h2><ul><li><code>computed</code>一般用在需要使用暂时还不存在的数据且这个数据可以根据已有数据计算出的情况下，而且因为需要<code>return</code>结果，所以内部不能异步返回结果</li><li><code>watch</code>一般用于监视已有数据的变化，数据发生改变的时候，执行回调函数，且内部可以执行异步操作</li><li>能用<code>computed</code>实现的一定能使用<code>watch</code>实现，能用<code>watch</code>实现的不一定能用<code>computed</code>实现</li></ul><h2 id="computed和methods定义函数调用的区别"><a href="#computed和methods定义函数调用的区别" class="headerlink" title="computed和methods定义函数调用的区别"></a>computed和methods定义函数调用的区别</h2><p><code>computed</code>有<em><strong>缓存机制</strong></em>，值不变且多次使用的情况下只有初次会进行计算</p><p><code>methods</code>中定义函数绑定点击事件是在每次触发事件的时候都会执行，<strong>效率低下</strong></p><h2 id="Vue收集表单数据规则"><a href="#Vue收集表单数据规则" class="headerlink" title="Vue收集表单数据规则"></a>Vue收集表单数据规则</h2><ul><li><p><strong>文本输入</strong>、<strong>密码输入</strong>、<strong>多行输入</strong>等表单元素收集的是<code>value</code>值，也就是用户输入的数据</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">用户名: &lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; v-model=&quot;userInfo.username&quot;&gt;<br>密  码: &lt;input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;userInfo.password&quot;&gt;<br>个人简介: &lt;textarea  cols=&quot;30&quot; rows=&quot;10&quot; v-model=&quot;userInfo.desc&quot;&gt;&lt;/textarea&gt;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>单选输入</strong>收集的是<code>value</code>值，需要自行添加<code>value</code>属性</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;label&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.gender&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.gender&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>多选输入</strong></p><ul><li><p><strong>单独</strong>使用时收集的是<code>checked</code>值（Boolean）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;input type=<span class="hljs-string">&quot;checkbox&quot;</span>  v-model=<span class="hljs-string">&quot;userInfo.isChecked&quot;</span>&gt;同意协议<br></code></pre></div></td></tr></table></figure></li><li><p><strong>组合</strong>使用时收集的是<code>value</code>值，但是需要收集到一个数组中</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;label&gt;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;basketball&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;userInfo.favs&quot;</span>&gt;</span>🏀<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br>&lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;football&quot; v-model=&quot;userInfo.favs&quot;&gt;⚽&lt;/label&gt;<br>&lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;ping-pang&quot; v-model=&quot;userInfo.favs&quot;&gt;🏓&lt;/label&gt;<br></code></pre></div></td></tr></table></figure></li></ul></li><li><p><strong>下拉选择</strong>的<code>v-model</code>需要绑定在<code>select</code>元素身上，收集的是选中<code>option</code>元素的<code>value</code>值，需要自行添加</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;select v-model=<span class="hljs-string">&quot;userInfo.cityId&quot;</span>&gt;<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;city.id&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(city, index) in cities&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;city.id&quot;</span>&gt;</span></span><br><span class="xml">            &#123;&#123;city.name&#125;&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br>&lt;/select&gt;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="Vue处理响应式数据的规则"><a href="#Vue处理响应式数据的规则" class="headerlink" title="Vue处理响应式数据的规则"></a>Vue处理响应式数据的规则</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>实例化<code>vm</code>的时候，Vue会做数据劫持，给data里的所有对象属性（包括深层次）都添加<code>get()</code>和<code>set()</code>方法，使得每个数据都是响应式的，而对于已经创建的实例，Vue 不允许动态添加根级别的响应式属性</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol><li><p>vue将影响原数组的数组方法进行了包裹，使得它们也会触发视图更新</p><p><code>push()</code> <code>pop()</code> <code>shift()</code> <code>unshift()</code> <code>splice()</code> <code>sort()</code> <code>reverse()</code></p></li><li><p>对于不能影响原数组但可以返回一个新数组的方法，可以用新数组替换旧数组</p><p>例如 <code>filter()</code>、<code>concat()</code> 和 <code>slice()</code></p></li></ol><p>​        你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范    围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">example.items = example.items.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> item.message.match(<span class="hljs-regexp">/Foo/</span>)<br>&#125;)<br></code></pre></div></td></tr></table></figure><h2 id="v-if-和-v-for-可以一起使用吗"><a href="#v-if-和-v-for-可以一起使用吗" class="headerlink" title="v-if 和 v-for 可以一起使用吗"></a>v-if 和 v-for 可以一起使用吗</h2><p><strong>永远不要把 <code>v-if</code> 和 <code>v-for</code> 同时用在同一个元素上</strong></p><p><code>v-if</code> 和<code>v-for</code>可以同时使用，当 Vue 处理指令时，<code>v-for</code> 比 <code>v-if</code> 具有更高的优先级，因此哪怕我们只渲染出一小部分用户的元素，也得在每次重渲染的时候遍历整个列表，<code>v-if</code>指令是需要解析的，指令解析的过程非常消耗性能，效率低下</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;user.isActive&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    &#123;&#123; user.name &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.users.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (user.isActive) &#123;<br>    <span class="hljs-keyword">return</span> user.name<br>  &#125;<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>一般我们在两种常见的情况下会倾向于这样做：</p><ul><li><p>为了过滤一个列表中的项目 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code>)。在这种情形下，请将 <code>users</code> 替换为一个计算属性 (比如 <code>activeUsers</code>)，让其返回过滤后的列表。</p><p>我们将会获得如下好处：</p><ul><li><p>过滤后的列表<em>只</em>会在 <code>users</code> 数组发生相关变化时才被重新运算，过滤更高效。</p></li><li><p>使用 <code>v-for=&quot;user in activeUsers&quot;</code> 之后，我们在渲染的时候<em>只</em>遍历活跃用户，渲染更高效。</p></li><li><p>解耦渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">computed: &#123;<br>  <span class="hljs-attr">activeUsers</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.users.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">user</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> user.isActive<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in activeUsers&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    &#123;&#123; user.name &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure></li></ul></li><li><p>为了避免渲染本应该被隐藏的列表 (比如 <code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code>)。这种情形下，请将 <code>v-if</code> 移动至容器元素上 (比如 <code>ul</code>、<code>ol</code>)。</p><ul><li>通过将 <code>v-if</code> 移动到容器元素，我们不会再对列表中的<em>每个</em>用户检查 <code>shouldShowUsers</code>。取而代之的是，我们只检查它一次，且不会在 <code>shouldShowUsers</code> 为否的时候运算 <code>v-for</code>。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;shouldShowUsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span></span><br><span class="hljs-tag">    <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span></span><br><span class="hljs-tag">  &gt;</span><br>    &#123;&#123; user.name &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue生命周期"></p><ul><li><code>beforeCreate()&#123;&#125;</code> 刚开始初始化实例时执行，数据代理未完成，可以读取<code>Vue</code>实例对象，无法读取实例里的任何东西，比如<code>data</code>和<code>methods</code>和<code>事件监听</code>等</li><li><code>created()&#123;&#125;</code> 实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调，<em><strong>这是最早能读取实例里面的数据和方法的生命周期钩子，可以在此处进行异步数据的获取和对实例数据的初始化操作</strong></em></li><li><code>beforeMount()&#123;&#125;</code> 挂载开始前调用，未创建真实DOM元素，不能读取<code>this.$refs</code></li><li><code>mounted()&#123;&#125;</code> 初始化数据里的DOM元素，如果存在异步对DOM元素数据进行更改，就只能在<code>updated()&#123;&#125;</code>里获取，可以读取<code>this.$refs</code>，通常在此生命周期钩子中进行<em>发请求获取动态数据，修改初始化的数据，给真实DOM元素绑定自定义事件，开启定时器等操作，<code>$children</code>子组件的获取也需要在<code>mounted()&#123;&#125;</code>里</em></li><li><code>beforeUpdate()&#123;&#125;</code> <code>data</code>数据改变之后立即执行，但虚拟DOM还未重新渲染</li><li><code>updated()&#123;&#125;</code> 虚拟DOM重新渲染已完成，<strong>如果对数据更新做一些统一处理在<code>updated()&#123;&#125;</code>中处理即可</strong>，可以执行依赖于DOM的操作，但是<strong>不要在这里修改当前组件中的<code>data</code>，否则会继续触发<code>beforeUpdate()&#123;&#125;</code>、<code>updated()&#123;&#125;</code>，进入死循环！</strong></li><li><code>beforeDestroy()&#123;&#125;</code> 实例即将销毁时调用，<code>methods</code>，<code>watch</code>，<code>子组件</code>都还可以使用，通常在此生命周期钩子中进行<em>清除定时器，解绑事件等操作</em></li><li><code>destroyed()&#123;&#125;</code> 实例完成销毁立即调用，<code>Vue</code>实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</li></ul><blockquote><p><code>data</code>数据<strong>改变</strong>时才会进入<code>beforeUpdate()&#123;&#125;</code>和<code>updated()&#123;&#125;</code></p><p><strong><code>beforeDestroy()&#123;&#125;</code>和<code>destroyed()&#123;&#125;</code>只能通过手动触发<code>$destroy()</code>来调用</strong></p></blockquote><blockquote><p>不要在选项 property 或回调上使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a>，比如 <code>created: () =&gt; console.log(this.a)</code> 或 <code>vm.$watch(&#39;a&#39;, newValue =&gt; this.myMethod())</code>。因为箭头函数并没有 <code>this</code>，<code>this</code> 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 <code>Uncaught TypeError: Cannot read property of undefined</code> 或 <code>Uncaught TypeError: this.myMethod is not a function</code> 之类的错误。</p></blockquote><h2 id="updated-和watch和-nextTick-的区别"><a href="#updated-和watch和-nextTick-的区别" class="headerlink" title="updated(){}和watch和$nextTick()的区别"></a>updated(){}和watch和$nextTick()的区别</h2><ul><li><strong><code>updated()&#123;&#125;</code>对所有数据的变化进行统一处理</strong></li><li><strong><code>watch</code>对具体某个数据变化做统一处理</strong></li><li><strong><code>$nextTick()</code>是对某个数据的某一次变化进行处理</strong></li></ul><h2 id="Vue-use-的本质"><a href="#Vue-use-的本质" class="headerlink" title="Vue.use()的本质"></a>Vue.use()的本质</h2><ul><li><p>函数式插件，直接调用这个函数</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">w</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyPlugin</span>(<span class="hljs-params">Vue, options</span>) </span>&#123;<br>        <span class="hljs-comment">// 1. 添加全局方法或 property</span><br>        Vue.myGlobalMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;<br><br>        <span class="hljs-comment">// 2. 添加全局资源</span><br>        Vue.directive(<span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">node, bindings</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;)<br><br>        <span class="hljs-comment">// 4. 添加实例方法</span><br>        Vue.prototype.$myMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">methodOptions</span>) </span>&#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;<br>    &#125;<br>    w.MyPlugin = MyPlugin<br>&#125;)(<span class="hljs-built_in">window</span>)<br></code></pre></div></td></tr></table></figure></li><li><p>对象式插件，寻找这个对象上的<code>install</code>方法并执行</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">w</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> MyPlugin = &#123;&#125;<br>    MyPlugin.install = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">Vue, options</span>) </span>&#123;<br>        <span class="hljs-comment">// 1. 添加全局方法或 property</span><br>        Vue.myGlobalMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;<br><br>        <span class="hljs-comment">// 2. 添加全局资源</span><br>        Vue.directive(<span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">node, bindings</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;)<br><br>        <span class="hljs-comment">// 4. 添加实例方法</span><br>        Vue.prototype.$myMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">methodOptions</span>) </span>&#123;<br>          <span class="hljs-comment">// 内容</span><br>        &#125;<br>    &#125;<br>    w.MyPlugin = MyPlugin<br>&#125;)(<span class="hljs-built_in">window</span>)<br></code></pre></div></td></tr></table></figure><blockquote><p>对象式插件必须要有<code>install</code>方法</p><p>插件通过IIFE绑定在<code>window</code>对象上</p></blockquote></li></ul><h2 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend()"></a>Vue.extend()</h2><p><code>Vue.extend()</code>是一个继承自<code>Vue</code>的<code>Vue</code>构造器，参数是一个包含组件选项的对象，返回的是一个构造函数，可以通过实例化生成一个<code>Vue</code>实例</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React学习记录</title>
    <link href="/2022/07/03/React%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/07/03/React%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React Fragment"></a>React Fragment</h2><p>React.Fragment 组件能够在不额外创建 DOM 元素的情况下，让 render() 方法返回多个元素，可以简写成&lt;&gt;&lt;/&gt;，但是简写形式不能接收键值或属性（<strong>key是唯一可以传递给Fragment的属性</strong>），从React16开始，render()支持返回数组，已经可以减少产生不必要的节点</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NodeJS常见问题以及技巧</title>
    <link href="/2022/06/27/NodeJS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/06/27/NodeJS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//  这里创建10个成员,每个成员是 1 Byte(8bit),显示的时候是16进制,所以是00两位</span><br><span class="hljs-comment">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span><br><span class="hljs-keyword">let</span> buf1 = Buffer.alloc(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">// 把字符串存到了Buffer中</span><br><span class="hljs-keyword">let</span> buf2 = Buffer.from(<span class="hljs-string">&quot;iloveyou&quot;</span>);<br><span class="hljs-built_in">console</span>.log(buf2); <span class="hljs-comment">// &lt;Buffer 69 6c 6f 76 65 79 6f 75&gt;</span><br>buf2[<span class="hljs-number">0</span>] = <span class="hljs-number">97</span>; <span class="hljs-comment">// 设置值   97对相应的是ascii码里面对对应的字符</span><br><span class="hljs-built_in">console</span>.log(buf2); <span class="hljs-comment">// &lt;Buffer 61 6c 6f 76 65 79 6f 75&gt;</span><br><br><span class="hljs-keyword">let</span> buf3 = Buffer.from(<span class="hljs-string">&#x27;iloveyou&#x27;</span>); <span class="hljs-comment">// 把字符串存到了Buffer中</span><br><br><span class="hljs-keyword">let</span> buf = Buffer.from(<span class="hljs-string">&quot;我爱你&quot;</span>); <span class="hljs-comment">// &lt;Buffer e6 88 91 e7 88 b1 e4 bd a0&gt; 一个中文占3个字节（Unicode编码）</span><br></code></pre></div></td></tr></table></figure><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// fs.writeFile(参数一,参数二,参数三,参数四)</span><br><span class="hljs-comment">//      参数一: 文件名</span><br><span class="hljs-comment">//      参数二: 写入的内容</span><br><span class="hljs-comment">//参数三: w写入 a追加</span><br><span class="hljs-comment">//      参数四: 回调,当执行完写入的过程会执行这个回调</span><br><span class="hljs-comment">//          如果写入失败,形参err是有值的, 如果写入成功,形参err就是null</span><br> fs.writeFile(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;我去买几个橘子去,你站在此地不要走动&#x27;</span>, &#123; <span class="hljs-attr">flag</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (err) &#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;写入失败&quot;</span>, err);<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;写入成功&quot;</span>);<br>     &#125;<br> &#125;);<br><br><span class="hljs-comment">// fs.writeFileSync(path,data[, options])</span><br><span class="hljs-comment">// 参数一: path，被写入文件的路径（相对路径或绝对路径）</span><br><span class="hljs-comment">// 参数二: data，要写入的内容，字符串格式</span><br><span class="hljs-comment">// 参数三: options：写入文件的参数配置，默认是utf8编码</span><br><br><span class="hljs-comment">// fs.createWriteStream(path)</span><br><span class="hljs-comment">// 1.创建一个写入流,其实就是一个对象</span><br><span class="hljs-keyword">const</span> wr = fs.createWriteStream(<span class="hljs-string">&#x27;./index.html&#x27;</span>);<br><span class="hljs-comment">// 2.开始写入</span><br>wr.write(<span class="hljs-string">&#x27;我家门前有两棵树\n&#x27;</span>);<br>wr.write(<span class="hljs-string">&#x27;一颗是枣树\n&#x27;</span>);<br>wr.write(<span class="hljs-string">&#x27;另一颗也是枣树\n&#x27;</span>);<br><span class="hljs-comment">// 3.关闭流</span><br>wr.close();<br><br><span class="hljs-comment">// fs.readFile(参数一, 参数二)</span><br><span class="hljs-comment">//      参数一: &#x27;文件名&#x27; 或  &#x27;路径/文件名&#x27;</span><br><span class="hljs-comment">//      参数二: 写入完成的回调</span><br><span class="hljs-comment">//              回调参数一: 错误对象,有值证明读取错误,null代表读取成功</span><br><span class="hljs-comment">//              回调参数一：读取到的数据,读取的数据是 buffer 类型</span><br> fs.readFile(<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (err) &#123;<br>         <span class="hljs-keyword">throw</span> err; <span class="hljs-comment">// 抛出错误的意思</span><br>     &#125;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取成功&#x27;</span>);<br>     <span class="hljs-built_in">console</span>.log(data);<br>     <span class="hljs-built_in">console</span>.log(data.toString());<br> &#125;)<br><br><span class="hljs-comment">// fs.readFileSync(path)</span><br><span class="hljs-keyword">let</span> result = fs.readFileSync(<span class="hljs-string">&#x27;./1.txt&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(result.toString());<br><br><span class="hljs-comment">// fs.createReadStream(path)</span><br><span class="hljs-comment">// 1. 创建流对象(会自动去读取文件的内容)</span><br> <span class="hljs-keyword">let</span> rs = fs.createReadStream(<span class="hljs-string">&#x27;index.html&#x27;</span>);<br><br><span class="hljs-comment">// 2.监听读取数据,设置回调,拿到数据块</span><br><span class="hljs-comment">// chunk 是有数据块的意思chunk 块最大放 64KB --&gt; 65536 byte</span><br> rs.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;<br>     <span class="hljs-built_in">console</span>.log(chunk);<br>     <span class="hljs-built_in">console</span>.log(chunk.toString());<br> &#125;)<br><br><span class="hljs-comment">// fs.rename(参数一, 参数二, 参数三回调)</span><br><span class="hljs-comment">//      参数一: 操作的&quot;文件名&quot; &quot;路径/文件名&quot;</span><br><span class="hljs-comment">//      参数二: 目标的&quot;文件名&quot; &quot;路径/文件名&quot;</span><br><span class="hljs-comment">//      参数三: 回调函数</span><br><span class="hljs-comment">//           回调参数 err: 错误对象 -&gt; 成功为null,失败为错误对象</span><br><span class="hljs-comment">// 重命名文件</span><br> fs.rename(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;app.css&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>     <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;改名成功&#x27;</span>);<br> &#125;)<br><br><span class="hljs-comment">// 移动文件</span><br>fs.rename(<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-string">&#x27;./file/index.html&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;移动成功&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// fs.unlink(参数一, 参数二回调)删除不进入回收站,直接删除了</span><br><span class="hljs-comment">//      参数一: 删除的 &#x27;文件名&#x27;  &#x27;路径/文件名&#x27;</span><br><span class="hljs-comment">//      参数二: 回调函数</span><br><span class="hljs-comment">//           回调参数 err: 错误对象 -&gt; 成功为null,失败为错误对象</span><br>fs.unlink(<span class="hljs-string">&#x27;./app.css&#x27;</span>, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;)<br><br><span class="hljs-comment">// mkdir -&gt; make directory 缩写,创建文件夹</span><br><span class="hljs-comment">// 创建文件夹</span><br>fs.mkdir(<span class="hljs-string">&quot;shop&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 创建多级文件夹: A/B/C</span><br><span class="hljs-comment">// &#123; recursive: true &#125;, 是否递归调用去创建, 默认是 false</span><br>fs.mkdir(<span class="hljs-string">&quot;A/B/C&quot;</span>, &#123; <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 删除文件夹</span><br>fs.rmdir(<span class="hljs-string">&quot;./shop&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// &#123; recursive: true &#125;, 是否递归调用去删除, 默认是 false</span><br>fs.rmdir(<span class="hljs-string">&quot;./A&quot;</span>, &#123; <span class="hljs-attr">recursive</span>: <span class="hljs-literal">true</span> &#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 读取文件夹</span><br>fs.readdir(<span class="hljs-string">&quot;./file&quot;</span>, <span class="hljs-function">(<span class="hljs-params">err, file</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(file);<br>&#125;);<br><br><span class="hljs-comment">// fs.stat</span><br><span class="hljs-comment">// 查看文件的状态</span><br>fs.stat(<span class="hljs-string">&#x27;app.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, file</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-built_in">console</span>.log(file.isFile()); <span class="hljs-comment">// 判断当前文件的状态是不是一个文件</span><br>    <span class="hljs-comment">// console.log( file.isDirectory() ); // 判断是不是一个文件夹</span><br>&#125;)<br><br>fs.stat(<span class="hljs-string">&#x27;./file&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, file</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>    <span class="hljs-comment">// console.log(file.isFile()); // 判断当前文件的状态是不是一个文件</span><br>    <span class="hljs-built_in">console</span>.log( file.isDirectory() ); <span class="hljs-comment">// 判断是不是一个文件夹</span><br>&#125;)<br></code></pre></div></td></tr></table></figure><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><ul><li>请求方式       GET ,POST,PUT,DELETE</li><li>域名                服务器在公网中ip地址的别名</li><li>协议                HTTP协议 1.1 版本号</li></ul><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string"></span> https://www.baidu.com/ <span class="hljs-string"></span> <span class="hljs-meta">HTTP/1.1</span><br></code></pre></div></td></tr></table></figure><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><ul><li>Accept                             规定了浏览器接收的数据类型</li><li>Accept-Language           浏览器接收的语言  zh-cn 中文</li><li>User-Agent                     用户代理,一般情况下根据这个字段判断是否用的移动端访问的</li><li>Accept-Encoding            接收什么类型的编码格式</li><li>Host                                 主机名</li><li>Connection                     连接的意思<ul><li>Keep-Alive                保持连接(让服务器保持连接)</li><li>close                         关闭连接(让服务器关闭连接)</li></ul></li><li>Cache-Control                 缓存<ul><li>no-cache                    不缓存</li><li>max-age                     缓存的最大时间</li></ul></li><li>cookie                                键值对文本，储存在浏览器，用于验证用户</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Host</span>: www.baidu.com<br>  <span class="hljs-attribute">Connection</span>: keep-alive<br>  <span class="hljs-attribute">Pragma</span>: no-cache<br>  <span class="hljs-attribute">Cache</span>-Control: no-cache<br>  <span class="hljs-attribute">sec</span>-ch-ua: <span class="hljs-string">&quot; Not A;Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;102&quot;</span><br>  <span class="hljs-attribute">sec</span>-ch-ua-mobile: ?<span class="hljs-number">0</span><br>  <span class="hljs-attribute">sec</span>-ch-ua-platform: <span class="hljs-string">&quot;Windows&quot;</span><br>  <span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br>  <span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">102</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5005</span>.<span class="hljs-number">63</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br>  <span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b<span class="hljs-number">3</span>;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br>  <span class="hljs-attribute">Sec</span>-Fetch-Site: none<br>  <span class="hljs-attribute">Sec</span>-Fetch-Mode: navigate<br>  <span class="hljs-attribute">Sec</span>-Fetch-User: ?<span class="hljs-number">1</span><br>  <span class="hljs-attribute">Sec</span>-Fetch-Dest: document<br>  <span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate, br<br>  <span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br>  <span class="hljs-attribute">Cookie</span>: BIDUPSID=D<span class="hljs-number">323822077</span>D<span class="hljs-number">9</span>F<span class="hljs-number">478</span>C<span class="hljs-number">04260</span>EB<span class="hljs-number">19</span>A<span class="hljs-number">80</span>C<span class="hljs-number">80</span>; PSTM=<span class="hljs-number">1651999775</span>; BAIDUID=D<span class="hljs-number">323822077</span>D<span class="hljs-number">9</span>F<span class="hljs-number">4782</span>D<span class="hljs-number">1</span>CFBE<span class="hljs-number">659</span>CB<span class="hljs-number">9</span>B<span class="hljs-number">5</span>D:FG=<span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体内容格式非常灵活,且内容不限,可以有如下形式：html、xml、json、普通文本、图片等静态资源</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=zhangsan&amp;password=<span class="hljs-number">1111</span><br></code></pre></div></td></tr></table></figure><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><h4 id="相应行"><a href="#相应行" class="headerlink" title="相应行"></a>相应行</h4><ul><li>协议    HTTP/1.1</li><li>响应状态码    200  OK     404 Not Found       500 Server Error</li><li>响应信息        OK</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>   <span class="hljs-number">200</span>   OK<br></code></pre></div></td></tr></table></figure><h4 id="相应头"><a href="#相应头" class="headerlink" title="相应头"></a>相应头</h4><ul><li>Cache-Control                    private 私有的,只让客户端去缓存</li><li>Connection: keep-alive     服务器和客户端的连接状态</li><li><strong>Content-Type</strong>                     客户端接收的内容,告诉浏览器用什么方式解析返回的内容<ul><li>text/html;charset=utf-8    使用中文字符集解析返回的html内容</li></ul></li><li>Date: Mon, 06 Jun 2022 02:17:51 GMT            0时区的时间</li><li>Expires: Mon, 06 Jun 2022 02:17:51 GMT        到期时间</li><li>Server: BWS/1.1                  服务器的配置信息</li><li>Set-Cookie                            设置cookie</li><li>Strict-Transport-Security   通知浏览器该站点只能使用 HTTPS 访问</li><li>Traceid                                  可以理解为服务追踪id</li><li>X-Frame-Options                  新的规范,为了防止点击劫持</li><li>X-Ua-Compatible：  IE=Edge,chrome=1    告诉IE使用最新的Edge引擎解析页面,chrome=1告诉chrome使用最新的引擎解析页面</li><li>Content-Length                    内容长度(字节)  355053  -&gt; 35万字节</li></ul><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Bdpagetype</span>: <span class="hljs-number">1</span><br>        <span class="hljs-attribute">Bdqid</span>: <span class="hljs-number">0</span>xa<span class="hljs-number">8</span>dc<span class="hljs-number">8</span>da<span class="hljs-number">900058</span>d<span class="hljs-number">3</span>a<br>        <span class="hljs-attribute">Cache</span>-Control: private<br>        <span class="hljs-attribute">Connection</span>: keep-alive<br>        <span class="hljs-attribute">Content</span>-Type: text/html;charset=utf-<span class="hljs-number">8</span><br>        <span class="hljs-attribute">Date</span>: Mon, <span class="hljs-number">06</span> Jun <span class="hljs-number">2022</span> <span class="hljs-number">02</span>:<span class="hljs-number">13</span>:<span class="hljs-number">12</span> GMT<br>        <span class="hljs-attribute">Expires</span>: Mon, <span class="hljs-number">06</span> Jun <span class="hljs-number">2022</span> <span class="hljs-number">02</span>:<span class="hljs-number">12</span>:<span class="hljs-number">34</span> GMT<br>        <span class="hljs-attribute">Server</span>: BWS/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br>        <span class="hljs-attribute">Set</span>-Cookie: BDSVRTM=<span class="hljs-number">0</span>; path=/<br>        <span class="hljs-attribute">Set</span>-Cookie: BD_HOME=<span class="hljs-number">1</span>; path=/<br>        <span class="hljs-attribute">Set</span>-Cookie: H_PS_PSSID=<span class="hljs-number">36466</span>_<span class="hljs-number">36455</span>_<span class="hljs-number">31253</span>_<span class="hljs-number">36453</span>_<span class="hljs-number">35909</span>_<span class="hljs-number">36166</span>_<span class="hljs-number">36488</span>_<span class="hljs-number">36517</span>_<span class="hljs-number">36519</span>_<span class="hljs-number">26350</span>_<span class="hljs-number">36299</span>_<span class="hljs-number">36469</span>_<span class="hljs-number">36314</span>; path=/; domain=.baidu.com<br>        <span class="hljs-attribute">Strict</span>-Transport-Security: max-age=<span class="hljs-number">172800</span><br>        <span class="hljs-attribute">Traceid</span>: <span class="hljs-number">1654481592025457101812167756050237590842</span><br>        <span class="hljs-attribute">X</span>-Frame-Options: sameorigin<br>        <span class="hljs-attribute">X</span>-Ua-Compatible: IE=Edge,chrome=<span class="hljs-number">1</span><br>        <span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">355108</span><br></code></pre></div></td></tr></table></figure><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>服务器返回给前端的内容，如html文件</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">&lt;html&gt;&lt;head&gt;&lt;meta <span class="hljs-attribute">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;&lt;meta <span class="hljs-attribute">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>&gt;<br></code></pre></div></td></tr></table></figure><h3 id="从输入URL到页面展现内容之间发生了什么"><a href="#从输入URL到页面展现内容之间发生了什么" class="headerlink" title="从输入URL到页面展现内容之间发生了什么"></a>从输入URL到页面展现内容之间发生了什么</h3><ul><li>DNS 解析:将域名解析成 IP 地址</li><li>TCP 连接：TCP 三次握手</li><li>发送 HTTP 请求</li><li>服务器处理请求并返回 HTTP 报文</li><li>浏览器解析渲染页面</li><li>断开连接：TCP 四次挥手</li></ul><p>引自</p><ol><li><a href="https://juejin.cn/post/6844903784229896199">从URL输入到页面展现到底发生什么？</a></li><li><a href="https://juejin.cn/post/6935232082482298911">从输入URL开始建立前端知识体系</a></li></ol><h3 id="从HTTP到WEB缓存"><a href="#从HTTP到WEB缓存" class="headerlink" title="从HTTP到WEB缓存"></a>从HTTP到WEB缓存</h3><p><a href="https://juejin.cn/post/6844903791809003527">从HTTP到WEB缓存</a></p><h3 id="NodeJS模块查找规则"><a href="#NodeJS模块查找规则" class="headerlink" title="NodeJS模块查找规则"></a>NodeJS模块查找规则</h3><h4 id="模块有路径但没有后缀名"><a href="#模块有路径但没有后缀名" class="headerlink" title="模块有路径但没有后缀名"></a>模块有路径但没有后缀名</h4><ol><li>先找同名js文件</li><li>没找到则再找同名js文件夹，找到之后就寻找该文件夹下的index.js</li><li>如果文件夹中没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错：模块没有被找到</li></ol><h4 id="模块没有路径没有后缀名"><a href="#模块没有路径没有后缀名" class="headerlink" title="模块没有路径没有后缀名"></a>模块没有路径没有后缀名</h4><ol><li>Node.js 会假设它是系统模块</li><li>没找到则去node_modules 文件夹中寻找，首先看是否有该名字的js文件</li><li>没有则再看是否有该名字的文件夹，找到之后就寻找该文件夹下的index.js</li><li>如果没有则查看该文件夹中的package.json中的main选项确定模块入口文件</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错：模块没有被找到</li></ol><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3>]]></content>
    
    
    <categories>
      
      <category>NodeJS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构</title>
    <link href="/2022/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2022/05/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="顺序存储（顺序表）"><a href="#顺序存储（顺序表）" class="headerlink" title="顺序存储（顺序表）"></a>顺序存储（顺序表）</h3><h4 id="栈（先进后出）"><a href="#栈（先进后出）" class="headerlink" title="栈（先进后出）"></a>栈（先进后出）</h4><p><span style="color:rgb(255, 0, 0);"><em><strong>n个不同元素入栈，出栈元素一共有这么多不同的排列方式（Catalan数）：</strong></em></span><br>$$<br>\frac{1}{n+1} \times C^{n}_{2n}<br>$$</p><ul><li><p><strong>空栈</strong>：top == -1（最上面的索引为-1）</p></li><li><p><strong>满栈</strong>：top == MaxSize - 1（最上面的索引为栈长度-1）</p></li><li><p><strong>入栈</strong>：</p><ol><li>top = top + 1（最上面的索引+1）</li><li>stack[top] = new（新入栈的元素）</li></ol></li><li><p><strong>出栈</strong>：</p><ol><li>temp = stack[top]（temp存储出栈元素）</li><li>top = top - 1（索引-1）</li></ol></li><li><p><strong>“上溢”</strong>：栈满存入</p></li><li><p><strong>“下溢”</strong>：栈空出栈</p></li></ul><h4 id="共享栈（双栈）"><a href="#共享栈（双栈）" class="headerlink" title="共享栈（双栈）"></a>共享栈（双栈）</h4><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/%E5%85%B1%E4%BA%AB%E6%A0%88.exc1awyx7sw.webp" alt="共享栈"></p><ul><li><p><strong>空栈</strong>：top1 == -1   top2 == MaxSize</p></li><li><p><strong>满栈</strong>：top1 == top2 - 1</p></li><li><p><strong>栈1入栈</strong>：</p><ol><li>top1 = top1 + 1</li><li>stack[top1] = new</li></ol></li><li><p><strong>栈1出栈</strong>：</p><ol><li>temp = stack[top1]</li><li>Top1 = top1 - 1</li></ol></li><li><p><strong>栈2入栈</strong>：</p><ol><li>top2 = top2 - 1</li><li>stack[top2] = new</li></ol></li><li><p><strong>栈2出栈</strong>：</p><ol><li>temp = stack[top2]</li><li>Top2 = top2 + 1</li></ol></li></ul><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.78w3qhn57k40.webp" alt="循环队列"></p><ul><li><p><strong>空队</strong>：front == rear</p></li><li><p><strong>满队</strong>：(rear + 1) % MaxSize == front</p></li><li><p><strong>入队</strong>：</p><ol><li>queue[rear] = new</li><li>rear = (rear + 1) % MaxSize</li></ol></li><li><p><strong>出队</strong>：</p><ol><li>temp = queue[front]</li><li>front = (front + 1) % MaxSize</li></ol></li></ul><h3 id="链式存储（单链表、双链表、单循环链表、双循环链表、静态链表）"><a href="#链式存储（单链表、双链表、单循环链表、双循环链表、静态链表）" class="headerlink" title="链式存储（单链表、双链表、单循环链表、双循环链表、静态链表）"></a>链式存储（单链表、双链表、单循环链表、双循环链表、静态链表）</h3><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/%E9%93%BE%E6%A0%88.7dv7jw97b7w0.webp" alt="链栈"></p><ul><li><p><strong>空栈</strong>：top == null</p></li><li><p><strong>满栈</strong>：不存在</p></li><li><p><strong>入栈</strong>：</p><ol><li>new -&gt; next = top</li><li>top = p</li></ol></li><li><p><strong>出栈</strong>：</p><ol><li>temp = top -&gt; data</li><li>top = top -&gt; next</li></ol></li></ul><h4 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h4><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/%E9%93%BE%E9%98%9F.6ao7xx2bo2w0.webp" alt="链队"></p><ul><li><p><strong>空队</strong>：front == null , rear == null</p></li><li><p><strong>满队</strong>：不存在</p></li><li><p><strong>入队</strong>：</p><ol><li>rear -&gt; next = new</li><li>rear = rear -&gt; next</li></ol></li><li><p><strong>出队</strong>：</p><ol><li>temp = front -&gt; data</li><li>front = front -&gt; next</li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS常见问题以及技巧</title>
    <link href="/2022/05/04/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/04/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="执行上下文、执行上下文栈、预解析、作用域、作用域链"><a href="#执行上下文、执行上下文栈、预解析、作用域、作用域链" class="headerlink" title="执行上下文、执行上下文栈、预解析、作用域、作用域链"></a>执行上下文、执行上下文栈、预解析、作用域、作用域链</h2><ul><li><p><strong>执行上下文（执行上下文环境）</strong>：</p><ul><li>程序在解析和运行的时候所依赖和使用的环境；</li><li>全局执行上下文环境 和 函数执行上下文环境     （全局执行环境和函数执行环境）</li></ul></li><li><p><strong>执行上下文栈：</strong></p><ul><li>程序为了管理执行上下文（确保程序的执行顺序）所创建的一个栈数据结构，被称作执行上下文栈；</li></ul></li><li><p><strong>预解析（变量提升）</strong>：</p><ul><li><p>概念：</p><ul><li>预解析分为变量预解析（变量提升）和函数预解析（函数提升）</li></ul></li><li><p>说明：</p><ul><li>程序在开始执行之前会做全局代码预解析</li><li>函数在开始执行之前也会做局部代码预解析</li></ul></li><li><p>特点</p><ul><li><p>程序在代码执行之前会先进行预解析；</p></li><li><p>预解析会解析带var的变量和函数声明定义的函数function，解析函数优先级比解析变量要高：</p></li><li><p>可以认为解析的时候分为两步，先去解析所有的函数声明定义的函数，再去解析所有的带var变量；</p></li><li><p>解析过程当中，如果函数重名，会覆盖（后面的函数会把前面的覆盖掉）</p><p>​                           如果变量函数重名，会将变量忽略；</p></li><li><p>解析函数的时候，函数定义方式不同，解析过程也不大一样：</p><p>如果是函数声明定义，整个函数都要被提升</p><p>​                      function func(){};</p><p>如果是表达式定义，只会提升变量       </p><p>var func = function(){};</p></li></ul></li><li><p>先解析函数：函数重名覆盖</p></li><li><p>再解析变量：变量重名忽略</p></li></ul></li><li><p><strong>作用域</strong></p><ul><li>变量起作用的范围；</li><li>作用域;隔离变量，防止变量命名污染；</li></ul></li><li><p><strong>作用域链</strong></p><ul><li>真实存在的，作用域链是使用执行上下文当中变量对象所组成的链条结构（数组结构）,查找的时候其实真正是先去自身的变量对象当中查找，如果没有，去上级执行上下文的变量对象当中去查找，直到找到全局执行上下文的变量对象；  函数上一级的变量对象其实是在函数定义的时候都已经确定好的</li></ul></li><li><p><strong>全局执行上下文</strong>（分为创建阶段和执行阶段）代码开始执行之前和之后</p><ul><li><p>全局执行上下文压入执行上下文栈</p><ul><li>创建上下文阶段：<ul><li><p>收集变量形成变量对象 函数 var的变量会收集,预解析（其实在创建变量对象的时候已经做了预解析）</p></li><li><p>确定this指向（可以认为确定执行者）</p></li><li><p>创建自身执行上下文的作用域链</p><p>注意：同时确定函数在调用时候的上级作用域链。（根据ECMA词法去确定，看内部是否引用外部变量确定）</p></li></ul></li></ul></li><li><p>执行全局执行上下文</p><ul><li>执行全局上下文阶段<ul><li>为变量真正赋值</li><li>顺着作用域链查找要使用的变量或者函数执行</li></ul></li></ul></li></ul></li><li><p><strong>函数执行上下文</strong></p><ul><li><p>函数执行上下文压栈</p><ul><li><p>收集变量  var 形参  arguments  函数</p></li><li><p>确定this指向（可以认为确定执行者）</p></li><li><p>创建自身执行上下文的作用域链(它是拿自己的变量对象和上一级的作用域链组成自己的作用域链)</p><p>注意：同时确定函数在调用时候的上级作用域链。（根据ECMA词法去确定，看内部是否引用外部变量确定</p><ul><li>函数的作用域链：  自己定义的时候已经确定了函数在调用时候的上级作用域链，因此，在函数调用的时候，只需要将自己的变量对象添加到上级作用域链的顶端；就形成自己的作用域链</li></ul></li></ul></li><li><p>执行函数执行上下文</p><ul><li>为变量真正赋值</li><li>顺着作用域链查找要使用的变量或者函数执行</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a is not defined</span><br>a = <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a() &#123; console.log(&#x27;我是函数&#x27;) &#125;</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;我是变量&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是函数&#x27;</span>) &#125;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 我是变量</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// a() &#123;console.log(&#x27;我是函数&#x27;)&#125;</span><br>a++;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// NaN</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;我是变量&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我是函数&#x27;</span>)<br>&#125;<br><span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// 我是变量</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 0</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br>&#125;<br>fn()<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 0</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 0</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 0</span><br>    a = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br>&#125;<br>fn()<br><span class="hljs-built_in">console</span>.log(a); <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><h2 id="JS输出问题"><a href="#JS输出问题" class="headerlink" title="JS输出问题"></a>JS输出问题</h2><p>如果在文档加载完成后（即HTML输出已完成），再使用document.write()方法来要求浏览器来解析你的内容，则浏览器就会重写整个document，导致最后的这个document.write()方法输出的内容会覆盖之前所有的内容，如使用<code>button</code>标签：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.write(&#x27;&lt;h1&gt;点击渲染&lt;/h1&gt;&#x27;)&quot;</span>&gt;</span>试试就逝世<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="String-和-toString"><a href="#String-和-toString" class="headerlink" title="String() 和 toString()"></a>String() 和 toString()</h2><h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><ul><li>String() 是 JavaScript 的全局函数</li><li>String()只支持转为普通字符串，不支持转为相应进制的字符串</li><li>String() 可以将 <code>null</code> <code>undefined</code> 转化为字符串</li><li>如果String() 的参数有toString() 方法，就调用该方法，如果是<code>null</code>则返回<code>null</code>，如果是<code>undefined</code>就返回<code>undefined</code></li></ul><h3 id="toString-特殊问题"><a href="#toString-特殊问题" class="headerlink" title="toString()特殊问题"></a>toString()特殊问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>​        JavaScript引擎在解释代码时，对于<code>1.toString()</code>认为第一个.是浮点符号；第二个为属性访问的语法，所以 <code>1..toString()</code>正常；而 <code>(1).toString()</code> 排除了小数点的影响所以也为正常</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>toString()<br><span class="hljs-comment">// Uncaught SyntaxError: Invalid or unexpected token</span><br>(<span class="hljs-number">1</span>).toString()<br><span class="hljs-comment">// &quot;1&quot;</span><br><span class="hljs-number">1.</span>.toString()<br><span class="hljs-comment">// &quot;1&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出"><a href="#纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出" class="headerlink" title="纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出"></a>纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0.000006</span>; <span class="hljs-comment">//小数点后面有5个“0”</span><br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;0.000006&quot;</span><br><br>num = <span class="hljs-number">0.0000006</span> ;<span class="hljs-comment">//小数点后面有6个“0”</span><br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;6e-7&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="浮点数整数部分的位数大于21时，输出时采用科学计数法"><a href="#浮点数整数部分的位数大于21时，输出时采用科学计数法" class="headerlink" title="浮点数整数部分的位数大于21时，输出时采用科学计数法"></a>浮点数整数部分的位数大于21时，输出时采用科学计数法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1234567890123456789012</span>;<br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;1.2345678901234568e+21&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ul><li>toString() 是 Object 原型的一个方法</li><li>toString() 可以转换进制字符串，如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 将十进制转化为二进制</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>;<br>num.toString(num, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// &quot;10&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>toString() 不能将 <code>null</code> <code>undefined</code> 转化为字符串</li></ul><h2 id="特殊数值计算问题"><a href="#特殊数值计算问题" class="headerlink" title="特殊数值计算问题"></a>特殊数值计算问题</h2><h3 id="infinity"><a href="#infinity" class="headerlink" title="infinity"></a>infinity</h3><ul><li><p>计算超出范围会得到无穷大(infinity)或者无穷小(-infinity)</p></li><li><p>分母为0会构成无穷大Infinity 或负无穷大-Infinity</p></li><li><p>关于Infinity的运算，infinity加减乘除一个数字都是Infinity，Infinity和Infinity计算，加法乘法为Infinity，其他为NaN</p></li><li><p>Infinity和自身相等 其他比较正常</p></li></ul><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><ul><li>NaN特点：<strong>无论和谁比较都是fasle，无论和谁计算都是NaN（除了字符串加法）</strong></li></ul><h2 id="引用数据类型的计算"><a href="#引用数据类型的计算" class="headerlink" title="引用数据类型的计算"></a>引用数据类型的计算</h2><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 引用数据类型的运算</span><br>        <span class="hljs-comment">// Array</span><br>        <span class="hljs-comment">// Object</span><br>        <span class="hljs-comment">// Function</span><br><br>        <span class="hljs-comment">// 以 + 为例,说运算</span><br>        <span class="hljs-comment">// + 是一个双目运算符(二元运算符)</span><br>        <span class="hljs-comment">// 这个运算符操作了几个数</span><br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + []); <span class="hljs-comment">// 1</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]); <span class="hljs-comment">// 12,4,6</span><br><br>        <span class="hljs-built_in">console</span>.log([].valueOf()); <span class="hljs-comment">// []</span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>].valueOf()); <span class="hljs-comment">// [2,4,6]</span><br><br>        <span class="hljs-built_in">console</span>.log([].toString()); <span class="hljs-comment">// &#x27;&#x27;</span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>].toString()); <span class="hljs-comment">// 2,4,6</span><br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + &#123;&#125;); <span class="hljs-comment">// 1[object Object]</span><br>        <span class="hljs-built_in">console</span>.log(&#123;&#125;.toString()) <span class="hljs-comment">// [object Object]</span><br><br>        <span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + fn); <span class="hljs-comment">// 1function() &#123;console.log(111)&#125;</span><br>        <span class="hljs-built_in">console</span>.log(fn.toString()); <span class="hljs-comment">// function() &#123;console.log(111)&#125;</span><br><br>        <span class="hljs-comment">// 引用数据类型在运算的时候执行的过程如下:</span><br>        <span class="hljs-comment">// 1. 会调用valueOf这个方法,如果这个方法可以返回基本值,就使用基本值</span><br>        <span class="hljs-comment">// 2. 如果不返回基本值,调用toString()方法</span><br>        <span class="hljs-comment">// 3. 然后遵循基本数据类型的运算规则去运算</span><br><br>        <span class="hljs-comment">// 问:</span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>] + &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span><br>        &#125;); <span class="hljs-comment">// 2,3[object Object]</span><br><br><br>        <span class="hljs-comment">// ----------------------------------------</span><br>        <span class="hljs-built_in">console</span>.log(!![]); <span class="hljs-comment">// 坑</span><br>        <span class="hljs-comment">// ! 取反的,它后面一定跟的是一个布尔值</span><br>        <span class="hljs-comment">// !(![])</span><br><br>        <span class="hljs-comment">// ![] --&gt; </span><br>        <span class="hljs-comment">// 在if判断中,在js当中只有以下几种情况会是false</span><br>        <span class="hljs-comment">// 0  &quot;&quot;  undefined null false NaN</span><br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">NaN</span>) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>) <span class="hljs-comment">// true</span><br>        &#125;<br></code></pre></div></td></tr></table></figure><h2 id="转bool值为false的6种情况"><a href="#转bool值为false的6种情况" class="headerlink" title="转bool值为false的6种情况"></a>转bool值为false的6种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">              <span class="hljs-comment">// 1、null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 2.undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 3.number    非0为true  0为false NaN为false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>));<span class="hljs-comment">//false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 4.string    空为false  非空为true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 5.boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>));<span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><p>​        1995年<a href="https://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">JavaScript诞生</a>时，最初像Java一样，只设置了null作为表示”无”的值，根据C语言的传统，null被设计成可以自动转为0。但是，JavaScript的设计者Brendan Eich，觉得这样做还不够，有两个原因。首先，null像在Java里一样，被当成一个对象。但是，JavaScript的数据类型分成原始类型（primitive）和合成类型（complex）两大类，Brendan Eich觉得表示”无”的值最好不是对象。其次，JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich觉得，如果null自动转为0，很不容易发现错误。因此，Brendan Eich又设计了一个undefined。</p><p><em><strong>null表示”没有对象”，即该处不应该有值。</strong></em>典型用法是</p><ol><li>作为函数的参数，表示该函数的参数不是对象</li><li>作为对象原型链的终点</li></ol><p><em><strong>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</strong></em>典型用法是</p><ol><li>变量被声明了，但没有赋值时，就等于undefined</li><li>调用函数时，应该提供的参数没有提供，该参数等于undefined</li><li>对象没有赋值的属性，该属性的值为undefined</li><li>函数没有返回值时，默认返回undefined</li></ol><p><em><strong>特殊的</strong></em></p><ul><li>Undefined派生自Null，两者都是表示空缺值，转换成布尔值都是false，<code>null == undefined</code></li><li>Undefined和Null属于两种不同的类型</li><li>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测null时会返回<code>object</code>的原因</li><li>Undefined隐含着意外的空值，而Null隐含着意料之中的空值。因此设置一个变量、参数为空的时候，建议使用null而不是undefined</li></ul><h2 id="JS判断数据类型的方法"><a href="#JS判断数据类型的方法" class="headerlink" title="JS判断数据类型的方法"></a>JS判断数据类型的方法</h2><ul><li>typeof可以识别出基本类型String，、Number、Boolean、Undefined、Symbol，但是<em><strong>不能识别null</strong></em>。不能识别引用数据类型，会把null、array、object统一归为object类型,但是可以识别出function，所以typeof可以用来识别基本类型</li><li>instanceof不能识别出基本的数据类型 String、Number、Boolean、Undefined、Null、Symbol，但是可以检测出引用类型，如array、object、function，同时对于是使用new声明的类型，它还可以检测出多层继承关系。js的继承都是采用原型链来继承的，比如Dog  instanceof Animal ，其实就是看objA的原型链上是否有A的原型，而A的原型上保留A的constructor属性，所以instanceof一般用来检测对象类型，以及继承关系</li><li>null、undefined没有construstor方法，因此constructor不能判断undefined和null</li><li>Object.prototype.toString.call( ) 可以判断所有js数据类型</li></ul><h2 id="Number-为0的6种情况"><a href="#Number-为0的6种情况" class="headerlink" title="Number( )为0的6种情况"></a>Number( )为0的6种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">              <span class="hljs-comment">// 1、number</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 0</span><br><br><span class="hljs-comment">// 2、string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//0 空字符串--&gt;0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;   &quot;</span>));<span class="hljs-comment">//0 都是空格的字符串--&gt;0</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">// 0</span><br><br><span class="hljs-comment">// 3、boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>));<span class="hljs-comment">//0  false--&gt;0</span><br><br><span class="hljs-comment">// 4、null</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>));<span class="hljs-comment">// 0   null---&gt;0</span><br></code></pre></div></td></tr></table></figure><h2 id="Number-为NaN的3种情况"><a href="#Number-为NaN的3种情况" class="headerlink" title="Number( )为NaN的3种情况"></a>Number( )为NaN的3种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、number</span><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// NaN</span><br><br><span class="hljs-comment">// 2、string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;1a23&quot;</span>));<span class="hljs-comment">// 非纯数字的字符串--&gt;NaN</span><br><br><span class="hljs-comment">// 3、undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>));<span class="hljs-comment">//NaN  undefined--&gt;NaN</span><br></code></pre></div></td></tr></table></figure><h2 id="不同类型之间进行比较"><a href="#不同类型之间进行比较" class="headerlink" title="不同类型之间进行比较"></a>不同类型之间进行比较</h2><ul><li>两个操作数都是数值，则进行数值比较</li><li>两个操作数都是字符串，则比较两个字符串对应ASCⅡ码</li><li>两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较</li><li>两个操作数有一个是对象，则先调用valueOf()方法或toString()方法，再用结果比较</li></ul><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/%E4%B8%8D%E5%90%8C%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83.m3b5ss62ovk.webp" alt="不同类型之间进行比较"></p><h2 id="常用数组方法"><a href="#常用数组方法" class="headerlink" title="常用数组方法"></a>常用数组方法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>        <span class="hljs-comment">//数组增删改查</span><br><br>        <span class="hljs-comment">//从末尾增</span><br>        <span class="hljs-keyword">var</span> result = arr.push(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的末尾增加一个或者多个</span><br>        <span class="hljs-comment">//参数：增加的元素</span><br>        <span class="hljs-comment">//返回值：返回加入元素后数组的新长度</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//从末尾去删</span><br>        <span class="hljs-keyword">var</span> result = arr.pop();<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的末尾删除一个</span><br>        <span class="hljs-comment">//参数：无</span><br>        <span class="hljs-comment">//返回值：返回删除的那一个元素</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//从头部增</span><br>        <span class="hljs-keyword">var</span> result = arr.unshift(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的头部增加一个或者多个</span><br>        <span class="hljs-comment">//参数：增加的元素</span><br>        <span class="hljs-comment">//返回值：返回加入元素后数组的新长度</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//从头部去删</span><br>        <span class="hljs-keyword">var</span> result = arr.shift();<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的头部删除一个</span><br>        <span class="hljs-comment">//参数：无</span><br>        <span class="hljs-comment">//返回值：返回删除的那一个元素</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br><br>        <span class="hljs-comment">//增删改一体化</span><br>        <span class="hljs-comment">//这个方法根据参数的不同，有不同的功能</span><br>        <span class="hljs-comment">//这个方法我们大家先当作删除去理解</span><br><br>        <span class="hljs-comment">//保留</span><br>        <span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组0位开始保留原数组的任意个元素</span><br>        <span class="hljs-comment">//参数：一个   代表保留的元素个数</span><br>        <span class="hljs-comment">//返回值：返回原数组除去保留元素之后的数组</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//删除</span><br>        <span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的任意位置删除任意个元素</span><br>        <span class="hljs-comment">//参数：两个   第一个代表从哪开始，第二个代表删除几个</span><br>        <span class="hljs-comment">//返回值：返回删除的元素组成的新数组</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//增加</span><br>        <span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>,<span class="hljs-number">600</span>);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：从数组的任意位置添加任意多个元素</span><br>        <span class="hljs-comment">//参数：多个   第一个代表从哪开始，第二个代表删除0个，后面的代表新增的元素</span><br>        <span class="hljs-comment">//返回值：返回删除的元素组成的新数组，最终是空数组</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">2000</span>);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：修改数组当中任意的元素</span><br>        <span class="hljs-comment">//参数：多个   第一个代表从哪开始，第二个代表删除几个，后面的代表新增的元素</span><br>        <span class="hljs-comment">//返回值：返回删除的元素组成的新数组</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//翻转数组</span><br>        <span class="hljs-keyword">var</span> result = arr.reverse();<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-built_in">console</span>.log(result == arr);<br>        <span class="hljs-comment">//功能：翻转数组</span><br>        <span class="hljs-comment">//参数：无</span><br>        <span class="hljs-comment">//返回值：返回翻转后的原数组</span><br>        <span class="hljs-comment">//这个方法影响原数组</span><br><br><br>        <span class="hljs-comment">//把数组再转化为字符串  和字符串方法 split是一个逆运算</span><br>        <span class="hljs-keyword">var</span> result = arr.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>        <span class="hljs-comment">//功能：以指定的字符串为连接符，讲数组元素连接成一个字符串</span><br>        <span class="hljs-comment">//参数：如果不传，默认以逗号为连接符，将元素连接成字符串</span><br>        <span class="hljs-comment">//        如果传的是正常字符串，那么以这个字符串为连接符将元素连接成字符串</span><br>        <span class="hljs-comment">//     如果传的是空串，那么直接将字符串连接成字符串，中间没有任何连接</span><br>        <span class="hljs-comment">//返回值：返回连接好的字符串</span><br>        <span class="hljs-comment">//这个方法对原数组没有影响</span><br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br><br>        <span class="hljs-comment">//concat</span><br>        <span class="hljs-keyword">var</span> result = arr.concat([<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>]);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-built_in">console</span>.log(arr === result);<br>        <span class="hljs-comment">//功能：在数组的末尾拼接元素</span><br>        <span class="hljs-comment">//参数：可以不写，相当于复制一个数组</span><br>        <span class="hljs-comment">//     也可以写一个或者多个值，会把这些值拼接到数组末尾</span><br>        <span class="hljs-comment">//     也可以写数组，会先把数组拆开，把元素拼接到数组末尾</span><br>        <span class="hljs-comment">//返回值：返回拼接好的新数组</span><br>        <span class="hljs-comment">//这个方法对原数组没有影响</span><br><br><br>        <span class="hljs-comment">//slice</span><br>        <span class="hljs-keyword">var</span> result = arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：在数组当中截取部分元素形成新数组</span><br>        <span class="hljs-comment">//参数：和字符串方法slice一致；起始位置和结束位置，不包含结束位置的元素</span><br>        <span class="hljs-comment">//  如果只传一个代表起始位置，一直到结束。两个位置都可以使用负数</span><br>        <span class="hljs-comment">//返回值：返回截取的元素形成的新数组</span><br>        <span class="hljs-comment">//这个方法对原数组没有影响</span><br><br>        arr = [<span class="hljs-number">18</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">88</span>,<span class="hljs-number">66</span>,<span class="hljs-number">22</span>];<br><br>        <span class="hljs-keyword">var</span> result = arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> b - a;<br>        &#125;);<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-built_in">console</span>.log(result === arr);<br>        <span class="hljs-comment">//功能：对数组进行排序</span><br>        <span class="hljs-comment">//参数：如果不写，默认把每个元素转化为字符串进行排序（按照Unicode码）</span><br>        <span class="hljs-comment">//       如果要按照升序降序去排，需要传一个参数是函数</span><br>        <span class="hljs-comment">//     这个函数有两个形参</span><br><br>        <span class="hljs-comment">//返回值：排好序的原数组</span><br>        <span class="hljs-comment">//这个方法对原数组有影响</span><br><br>        <span class="hljs-comment">//valueOf 是Object的原型当中的</span><br>        <span class="hljs-comment">//返回数组实例对象。</span><br>        <span class="hljs-keyword">var</span> result = arr.valueOf()<br>        <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-built_in">console</span>.log(result === arr);<br><br>        <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;111&#x27;</span>);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> o);<br>        <span class="hljs-keyword">var</span> s = o.valueOf();<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> s);<br>        <span class="hljs-comment">//功能：获取数组对象的基本值，数组实例对象。</span><br>        <span class="hljs-comment">//参数：无</span><br>        <span class="hljs-comment">//返回值：返回原数组，因为数组是非包装对象，所以它是没有基本值</span><br><br>        <span class="hljs-comment">//toString</span><br>        <span class="hljs-keyword">var</span> result = arr.toString()<br>          <span class="hljs-built_in">console</span>.log(result);<br>        <span class="hljs-built_in">console</span>.log(arr);<br>        <span class="hljs-comment">//功能：将数组对象转化为字符串</span><br>        <span class="hljs-comment">//参数：无</span><br>        <span class="hljs-comment">//返回值：把数组的中括号去掉，其余加引号形成字符串返回</span><br></code></pre></div></td></tr></table></figure><p>对原数组有影响的方法：<code>push()</code> <code>pop()</code> <code>unshift()</code> <code>shift()</code> <code>splice()</code> <code>reverse()</code> <code>sort()</code></p><p>对原数组没有影响的方法：<code>join()</code> <code>concat()</code> <code>slice()</code> <code>valueOf()</code> <code>toString()</code></p><h3 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p><code>forEach()</code> 方法对数组的每个元素执行一次提供的函数。功能等同于<code>for</code>循环.</p><p>应用场景：为一些相同的元素，绑定事件处理器！强调的是数组中每一项都要遍历</p><p>作用：</p><ul><li>1.只能是用来遍历 </li><li>2.一旦开始了遍历就停不下来</li><li>3.返回值是undefine</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;赤&#x27;</span>,<span class="hljs-string">&#x27;橙&#x27;</span>,<span class="hljs-string">&#x27;黄&#x27;</span>,<span class="hljs-string">&#x27;绿&#x27;</span>,<span class="hljs-string">&#x27;青&#x27;</span>,<span class="hljs-string">&#x27;蓝&#x27;</span>,<span class="hljs-string">&#x27;紫&#x27;</span>];<br><span class="hljs-comment">//第一个参数：item，数组的每一项元素</span><br><span class="hljs-comment">//第二个参数：index，数组的下标</span><br><span class="hljs-comment">//第三个参数：array，正在遍历的数组</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(item, index, array);<br>&#125;);<br></code></pre></div></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><p><strong>需求：遍历数组，求每一项的平方存在于一个数组中</strong></p><p><strong>作用：</strong></p><ul><li>1.可以循环遍历数组中的每一项数据</li><li>2.可以对循环遍历到的每一项数据进行操作</li><li>3.<strong>重点应用场景: 对数组中的每一项数据进行操作,比如：给每数组中的每一项添加一个相同的样式</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];  <span class="hljs-comment">// 1 4 9 16 25</span><br><span class="hljs-comment">//第一个参数：item，数组的每一项元素</span><br><span class="hljs-comment">//第二个参数：index，数组的下标</span><br><span class="hljs-comment">//第三个参数：array，正在遍历的数组</span><br><span class="hljs-comment">//返回值：一个新数组，每个元素都是回调函数的结果。</span><br><span class="hljs-keyword">var</span> newArray = arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(item , <span class="hljs-number">2</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.log(newArray);<span class="hljs-comment">//[1,4,9,16,25]</span><br></code></pre></div></td></tr></table></figure><p>获取所有的名字</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> list = [<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;rose&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">21</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">22</span> &#125;,<br>      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jerry&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span> &#125;<br>    ]<br>    <span class="hljs-keyword">let</span> res = list.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index</span>)</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(item.name);<br>                &#125;)<br></code></pre></div></td></tr></table></figure><p>数字数组转化为字符串数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>];<br>arr.map(<span class="hljs-built_in">String</span>);  <span class="hljs-comment">//结果： [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;]</span><br></code></pre></div></td></tr></table></figure><p>字符串数组转化为数字数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>]<br>a.map(<span class="hljs-built_in">Number</span>);  <span class="hljs-comment">//结果：[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></code></pre></div></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>filter</code>用于过滤掉“不合格”的元素<br>返回一个新数组，如果在回调函数中返回true，那么就留下来，如果返回false，则舍弃</p><p><strong>作用:</strong></p><ul><li>1.可以循环遍历数组中的每一项</li><li>2.可以对循环遍历到的数据进行判断</li><li>3.当条件成立时,使用了return true后会将满足条件的那一项存到一个新的数组当中</li><li>4.<strong>重点应用场景:根据条件过滤数组中的数据</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> salary = [<span class="hljs-number">1000</span>, <span class="hljs-number">5000</span>, <span class="hljs-number">20000</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">10000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">1500</span>];<br><span class="hljs-comment">//第一个参数：element，数组的每一项元素</span><br><span class="hljs-comment">//第二个参数：index，数组的下标</span><br><span class="hljs-comment">//第三个参数：array，正在遍历的数组</span><br><span class="hljs-comment">//返回值：一个新数组，存储了所有返回true的元素</span><br><span class="hljs-keyword">var</span> result = salary.filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item, index, array</span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(item &gt;= <span class="hljs-number">5000</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<span class="hljs-comment">//[ 5000, 20000,10000]</span><br></code></pre></div></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p><code>some</code>用于遍历数组，如果有至少一个满足条件，就返回true，否则返回false。</p><p>作用:</p><ul><li>1.可以用来循环遍历数组中的每一项</li><li>2.在回调函数中进行条件判断，如果return true执行之后，会阻止后续代码的遍历执行</li><li>3.<strong>重点应用场景: 条件成立时不再执行后续的循环</strong>   比如，注册邮箱时如果有某个人名字注册了就不能再注册了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 查找数组有没有30 如果有，就不要再向下遍历了</span><br>   <span class="hljs-keyword">var</span> nums = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>]<br><br>   nums.some(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>     <span class="hljs-comment">// console.log(item,index,arr);</span><br>     <span class="hljs-keyword">if</span> (item == <span class="hljs-number">30</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>     &#125;<br>     <span class="hljs-built_in">console</span>.log(item);<br>   &#125;)<br></code></pre></div></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p><code>every</code>用于遍历数组，只有当所有的元素返回true，才返回true，否则返回false。</p><p>作用：</p><ul><li>1.可以对数组中的每一项进行遍历，但是只打印第一项</li><li>2.对数组中的每一项进行判断，都满足条件则返回true,如果有一项不满足条件则返回false</li><li>3.<strong>重点应用场景:判断整体是否都满足条件</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// every 比如说: 考试完成之后,判断一下成绩当中是否有不及格的 如果都满足条件则返回true,有一个不满足条件则返回false</span><br>    <span class="hljs-comment">// var score = [100,99,96,93,65,74,41,25,62,18];</span><br>    <span class="hljs-keyword">var</span> score = [<span class="hljs-number">100</span>,<span class="hljs-number">99</span>,<span class="hljs-number">62</span>,<span class="hljs-number">25</span>,<span class="hljs-number">88</span>];<br><br>   <span class="hljs-keyword">var</span> flag =  score.every(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,arr</span>)</span>&#123;<br>      <span class="hljs-comment">// console.log(item,index,arr);</span><br>      <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">60</span><br>    &#125;)<br>    <span class="hljs-built_in">console</span>.log(flag);<br></code></pre></div></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p><code>reduce()</code>方法对数组中的每个元素执行,一个由您提供的<strong>reducer</strong>函数，将其结果汇总为单个返回值 </p><p>语法：<code>reduce(callback, initValue)</code></p><p>callback: 每个元素都会执行一次的回调函数</p><p>initValue: 初始值</p><p>callback的4个参数</p><ul><li>prev： 上一次的值，第一次为初始值</li><li>item:  当前值</li><li>index: 下标</li><li>arr: 数组</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nums = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">60</span>]<br><span class="hljs-keyword">var</span> res = nums.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">prev, item</span>) </span>&#123;<br>      <span class="hljs-keyword">return</span> prev + item<br> &#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">console</span>.log(res);<br></code></pre></div></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h4><p><code>includes()</code>方法对数组中的元素进行查找，返回的是布尔值</p><p>语法：<code>includes(searchElement, fromIndex)</code></p><p>searchElement: 要查找的元素</p><p>fromIndex: 从哪个索引开始查找，默认为0</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> site = [<span class="hljs-string">&#x27;being&#x27;</span>, <span class="hljs-string">&#x27;google&#x27;</span>, <span class="hljs-string">&#x27;taobao&#x27;</span>];<br> <br>site.includes(<span class="hljs-string">&#x27;google&#x27;</span>); <br><span class="hljs-comment">// true </span><br> <br>site.includes(<span class="hljs-string">&#x27;baidu&#x27;</span>); <br><span class="hljs-comment">// false</span><br></code></pre></div></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p><code>find()</code>方法对数组中的每个元素执行callback函数，并返回true的第一个元素值，否则返回undefined</p><p>语法：<code>find(callback,thisvalue);</code></p><p>callback: 查找的每个元素都会执行一次的回调函数</p><p>initValue: 如果传的话，在callbck函数中this为该值，否则this为undefined</p><p>callback的3个参数</p><ul><li>item:  当前值</li><li>index: 下标</li><li>arr: 数组</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>]<br>       <span class="hljs-keyword">var</span> result = array.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 6, 6]</span><br>           <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">6</span>;<br>       &#125;, array)<br>       <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// undefined</span><br>       <span class="hljs-built_in">console</span>.log(array);  <span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 6, 6]</span><br><br>  <span class="hljs-keyword">var</span> result = array.find(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">item, index, arr</span>) </span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// [1, 2, 3, 4, 5, 6, 6, 6]</span><br>           <span class="hljs-keyword">return</span> item &gt; <span class="hljs-number">5</span>;<br>       &#125;, array)<br>       <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// 6</span><br>       <span class="hljs-built_in">console</span>.log(array);  <span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 6, 6]</span><br></code></pre></div></td></tr></table></figure><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h4><p><code>indexOf()</code>方法检索数组，看它是否含有对应的元素。开始检索的位置在数组 start 处或数组的开头（没有指定 start 参数时）。如果找到一个 item，则返回 item 的第一次出现的位置</p><p>语法：<code>indexOf(item,start)</code></p><p>Item：查找的元素</p><p>start：指定开始检索的位置（可选项）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;2016&#x27;</span>, <span class="hljs-string">&#x27;2016&#x27;</span>];<br>arr.indexOf(<span class="hljs-string">&#x27;orange&#x27;</span>); <span class="hljs-comment">//0</span><br>arr.indexOf(<span class="hljs-string">&#x27;o&#x27;</span>); <span class="hljs-comment">//-1</span><br>arr.indexOf(<span class="hljs-string">&#x27;2016&#x27;</span>); <span class="hljs-comment">//1</span><br>arr.indexOf(<span class="hljs-number">2016</span>); <span class="hljs-comment">//-1 // 不会做隐式类型转换</span><br></code></pre></div></td></tr></table></figure><h2 id="局部变量未声明的情况"><a href="#局部变量未声明的情况" class="headerlink" title="局部变量未声明的情况"></a>局部变量未声明的情况</h2><ul><li>如果函数内部出现未使用var声明的变量，那么首先找形参；如果形参有，当做是局部变量对待</li><li>如果函数内部出现未使用var声明的变量，形参也没有这个变量，那么就去全局变量中寻找是否有该变量，找到的话就会修改这个全局变量，未找到的话就将这个变量挂载到window对象下（window是JS在浏览器里的顶层对象，所以window的属性和方法也都是全局的）</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是一个引用关系，该引用关系存在于内部函数中，引用的是外部函数的变量的对象</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>        a++;<br>        <span class="hljs-built_in">console</span>.log(a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fn1;<br>&#125;<br><span class="hljs-keyword">var</span> f = fn();<br>f();<br>f();<br></code></pre></div></td></tr></table></figure><h3 id="产生闭包的条件"><a href="#产生闭包的条件" class="headerlink" title="产生闭包的条件"></a>产生闭包的条件</h3><ul><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li><li>外部函数返回内部函数的方法体</li><li>外部函数和内部函数都要调用或者引用（部分浏览器会对内部函数做优化，内部函数不使用或者不引用，相当于没有）</li></ul><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><ul><li>延长外部函数变量的生命周期</li><li>让函数外部可以操作(读写)到函数内部的数据(变量/函数)/函数外部可以引用函数内部的变量</li></ul><h3 id="闭包的缺点（将实例化对象赋值为null来解决）"><a href="#闭包的缺点（将实例化对象赋值为null来解决）" class="headerlink" title="闭包的缺点（将实例化对象赋值为null来解决）"></a>闭包的缺点（将实例化对象赋值为null来解决）</h3><ul><li>内存泄漏 ： 内存无法释放</li><li>内存溢出 ： 内存被撑爆</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span>(<span class="hljs-params"></span>) </span>&#123;<br>        a++;<br>        <span class="hljs-built_in">console</span>.log(a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> fn1;<br>&#125;<br><span class="hljs-keyword">var</span> f = fn();<br>f();<br>f();<br>f = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 释放闭包</span><br></code></pre></div></td></tr></table></figure><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>​        由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>​        虽然我们可以获取内部变量 但是不要轻易修改这个内部变量。</p><h2 id="IIFE（立即执行函数）的作用"><a href="#IIFE（立即执行函数）的作用" class="headerlink" title="IIFE（立即执行函数）的作用"></a>IIFE（立即执行函数）的作用</h2><ul><li>防止外部命名空间污染（因为一个页面中会有很多的重复变量名字  那么这样就会命名冲突  eg：都是name  所以使用匿名函数自调用可以隔离不同业务的同名的变量）</li><li>隐藏内部代码暴露接口（很多的js文件  只有引入的路径  引入之后就可以直接使用，代码的细节是看不到  这样保证了文件的安全）</li><li>对项目的初始化,只执行一次（因为立即执行函数只执行一次  所以对于项目加载文件来说是非常有好的，省略了很多加载的时间）</li></ul><h2 id="获取函数参数个数"><a href="#获取函数参数个数" class="headerlink" title="获取函数参数个数"></a>获取函数参数个数</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">a,b,c</span>) </span>&#123;<br>    alert(add.length) <span class="hljs-comment">// 获取形参的个数</span><br>    alert(<span class="hljs-built_in">arguments</span>.length) <span class="hljs-comment">// 获取实参的个数</span><br>    <span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h2><p>​        <code>arguments.callee</code>属性包含当前正在执行的函数，**<code>callee</code>** 是 <code>arguments</code> 对象的一个属性。它可以用于引用该函数的函数体内当前正在执行的函数。这在函数的名称是未知时很有用，例如在没有名称的函数表达式 (也称为“匿名函数”)内。</p><h2 id="window和Object"><a href="#window和Object" class="headerlink" title="window和Object"></a>window和Object</h2><p>​        浏览器对象层次结构的顶部就是 <code>window</code> 对象，代表一个浏览器窗口。一个用户可以在浏览器内部打开多个窗口，其中每个窗口都是一个独立的 <code>window</code> 对象，它们可能会加载不同的 <code>url</code>，即使同样的 <code>url</code> 地址，它们也是相互独立的。</p><p>​        <code>window</code>是<code>Object()</code>构造出的一个实例，是内置的全局对象，<code>Object</code>只是所有引用类型的“基类型”，各大引用类型都默认通过原型链的方式继承了 <code>Object</code> 的属性和方法，<code>window.__proto__ == Object.prototype</code></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.username = <span class="hljs-string">&#x27;yiifaa&#x27;</span>;<br><span class="hljs-comment">//  window继承于Object，所以有类似于以下的语句；</span><br><span class="hljs-built_in">window</span>.__proto__.username = <span class="hljs-string">&#x27;yiifaa&#x27;</span>;<br><span class="hljs-comment">//  最后的输出结果相当于</span><br>alert(<span class="hljs-built_in">window</span>.__proto__.username)<br></code></pre></div></td></tr></table></figure><p>例题：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;window&#x27;</span>; <span class="hljs-comment">// window.username</span><br><span class="hljs-built_in">this</span>.username = <span class="hljs-string">&#x27;yiifee&#x27;</span>; <span class="hljs-comment">// window.username</span><br><span class="hljs-built_in">Object</span>.prototype.username = <span class="hljs-string">&#x27;yiifaa&#x27;</span>; <span class="hljs-comment">// window.__proto__.username</span><br>alert(username);<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> username = <span class="hljs-string">&#x27;variable&#x27;</span>; <span class="hljs-comment">// 局部变量 username</span><br>            <span class="hljs-built_in">this</span>.username = <span class="hljs-string">&#x27;window&#x27;</span>; <span class="hljs-comment">// window.username</span><br>            <span class="hljs-built_in">Object</span>.prototype.username = <span class="hljs-string">&#x27;yiifaa&#x27;</span>; <span class="hljs-comment">// window.__proto__.username</span><br>            alert(username);<br>        &#125;<br>        show();<br></code></pre></div></td></tr></table></figure><h2 id="Math对象常用方法"><a href="#Math对象常用方法" class="headerlink" title="Math对象常用方法"></a>Math对象常用方法</h2><ol><li><p>round, floor,ceil</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1.4</span>;<br><span class="hljs-built_in">Math</span>.round(num); <span class="hljs-comment">// 四舍五入取整</span><br><span class="hljs-built_in">Math</span>.floor(num); <span class="hljs-comment">// 向下取整</span><br><span class="hljs-built_in">Math</span>.ceil(num); <span class="hljs-comment">// 向上取整</span><br></code></pre></div></td></tr></table></figure></li><li><p>max  min  PI  pow abs  sqrt </p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">Math</span>.max(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">67</span>, <span class="hljs-number">44</span>);<br><span class="hljs-built_in">Math</span>.min(<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">67</span>, <span class="hljs-number">44</span>);<br><span class="hljs-built_in">Math</span>.PI); <span class="hljs-comment">// 圆周率  是一个属性</span><br><span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>); <span class="hljs-comment">// ES5当中常用这个做幂运算</span><br><span class="hljs-built_in">Math</span>.abs(-<span class="hljs-number">5</span>); <span class="hljs-comment">// 求绝对值</span><br><span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">9</span>); <span class="hljs-comment">// 开方根</span><br></code></pre></div></td></tr></table></figure></li><li><p>random</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 拿的是0 - 1之间的一个随机数，包含0但是不包含1</span><br><span class="hljs-built_in">Math</span>.random();<br><br><span class="hljs-comment">// a-b间取随机数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomInt</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*(b - a + <span class="hljs-number">1</span>) + a);<br>            &#125;<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="构造函数返回值问题"><a href="#构造函数返回值问题" class="headerlink" title="构造函数返回值问题"></a>构造函数返回值问题</h2><p>如果在构造函数中<code>return</code>了一个基本数据类型和一个引用类型对象，那么构造方法返回的是什么？</p><p>​             如果<code>return</code>的是<em>基本数据类型</em>，构造方法返回的是<em>对象</em></p><p>​             如果<code>return</code>的是<em>引用数据类型</em>，构造方法返回的是<em>引用数据类型</em></p><h2 id="call和apply方法、bind方法"><a href="#call和apply方法、bind方法" class="headerlink" title="call和apply方法、bind方法"></a>call和apply方法、bind方法</h2><p>任何函数对象都有<code>apply</code>和<code>call</code>方法，<code>apply</code>和<code>call</code>可以使用第一个参数传对象，让函数或者方法的执行者（this）指向这个对象。</p><p>​        函数或者方法.apply(对象，[函数的参数 , 函数的参数2])；</p><p>​        函数或者方法.call(对象，函数的参数1 , 函数的参数2)；</p><p><code>bind()</code> 函数会创建一个新函数（称为绑定函数）</p><ul><li>传参和call类似</li><li>不会执行对应的函数，call或apply会自动执行对应的函数</li><li>返回对函数的引用</li><li>语法 <code>fun.bind(thisArg[, arg1[, arg2[, ...]]])</code></li><li>bind返回的新函数中的this已经改变，且不会再被改变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;测试代码&quot;</span>, <span class="hljs-built_in">this</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// test();</span><br>        <span class="hljs-comment">// test.call(obj)</span><br><br>        <span class="hljs-comment">// bind 这个方法返回了一个新的函数</span><br>        <span class="hljs-comment">// 当运行这个函数的时候,函数内部的this已经被改变了</span><br>        <span class="hljs-comment">// 且这个this不会被改变了</span><br>        <span class="hljs-keyword">var</span> fn = test.bind(obj);<br>        <span class="hljs-comment">// console.log(fn);</span><br><br>        <span class="hljs-comment">// fn()</span><br><br>        fn.call(&#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span><br>        &#125;);<br></code></pre></div></td></tr></table></figure><h2 id="this指代的对象"><a href="#this指代的对象" class="headerlink" title="this指代的对象"></a>this指代的对象</h2><ul><li>全局作用域/普通函数内部 -&gt; window</li><li>方法内部 -&gt; 执行这个方法的对象</li><li>构造函数内部 -&gt; 实例化出来的那个对象</li><li>事件回调函数内部 -&gt; 添加事件监听的事件源</li><li>call和apply调用的内部 -&gt; 传入的第一个参数（对象）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;The Window&quot;</span>;<br>        <span class="hljs-keyword">var</span> object = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;My Object&quot;</span>,<br>            <span class="hljs-attr">getNameFunc</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>                &#125;;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">console</span>.log(object.getNameFunc()()); <span class="hljs-comment">// The Window</span><br><br>        <span class="hljs-keyword">var</span> name2 = <span class="hljs-string">&quot;The Window&quot;</span>;<br>        <span class="hljs-keyword">var</span> object2 = &#123;<br>            <span class="hljs-attr">name2</span>: <span class="hljs-string">&quot;My Object&quot;</span>,<br>            <span class="hljs-attr">getNameFunc</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> that.name2;<br>                &#125;;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">console</span>.log(object2.getNameFunc()()); <span class="hljs-comment">// My Object</span><br></code></pre></div></td></tr></table></figure><h2 id="常用字符串方法"><a href="#常用字符串方法" class="headerlink" title="常用字符串方法"></a>常用字符串方法</h2><h3 id="ES5方法"><a href="#ES5方法" class="headerlink" title="ES5方法"></a>ES5方法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">      <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;1*234567890123A&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.log(str.charAt(<span class="hljs-number">1</span>));<br>      <span class="hljs-comment">//功能：找到对应索引位置的字符</span><br>      <span class="hljs-comment">//参数：一个索引值</span><br>      <span class="hljs-comment">//返回值：返回找到的对应字符</span><br><br>      <span class="hljs-built_in">console</span>.log(str.charCodeAt(<span class="hljs-number">0</span>));<br>      <span class="hljs-comment">//功能：找到对应索引位置的字符的Unicode码</span><br>      <span class="hljs-comment">//参数：一个索引值</span><br>      <span class="hljs-comment">//返回值：返回找到的对应字符的Unicode码</span><br><br>      <span class="hljs-built_in">console</span>.log(str.concat(<span class="hljs-string">&#x27;iii&#x27;</span>));<span class="hljs-comment">//拼接</span><br>      <span class="hljs-comment">//功能：把原串和指定的字符串拼接到一起</span><br>      <span class="hljs-comment">//参数：指定一个新的字符串</span><br>      <span class="hljs-comment">//返回值：返回拼接好的字符串</span><br><span class="hljs-comment">//console.log(str);//原串都不会发生改变</span><br><br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">49</span>));<span class="hljs-comment">//unicode编码</span><br>      <span class="hljs-comment">//功能：把unicode码转化为对应的字符</span><br>      <span class="hljs-comment">//参数：指定一个Unicode码</span><br>      <span class="hljs-comment">//返回值：返回对应的字符</span><br><br>      <span class="hljs-built_in">console</span>.log(str.indexOf(<span class="hljs-string">&#x27;236&#x27;</span>,<span class="hljs-number">3</span>));<span class="hljs-comment">//********</span><br>      <span class="hljs-comment">//功能：从原串当中找指定的子串，求出子串下标位置</span><br>      <span class="hljs-comment">//参数：1、指定的一个子串，2、起始位置从哪开始查找 默认是从左边第一个开始往右</span><br>      <span class="hljs-comment">//返回值：返回对应的子串下标，如果没有找到返回-1</span><br><br>      <span class="hljs-built_in">console</span>.log(str.lastIndexOf(<span class="hljs-string">&#x27;23&#x27;</span>,<span class="hljs-number">10</span>));<span class="hljs-comment">//这个和indexOf类似，只不过这个是从又往左查</span><br><br>      <span class="hljs-comment">//下面这三个依赖于正则表达式，后面学正则的时候，给大家加进来        </span><br><span class="hljs-comment">//console.log(str.replace(&#x27;1&#x27;,&#x27;**&#x27;));//替换字串</span><br><span class="hljs-comment">//console.log(str.match(/1/g));//找到匹配项返回数组</span><br><span class="hljs-comment">//console.log(str.search());</span><br><br>      str = <span class="hljs-string">&#x27;12345678&#x27;</span>;<br>      <span class="hljs-built_in">console</span>.log(str.localeCompare(<span class="hljs-string">&#x27;12345678&#x27;</span>));<span class="hljs-comment">//比较大小</span><br>      <span class="hljs-comment">//功能：比较原串和指定的字符串大小</span><br>      <span class="hljs-comment">//参数：指定一个字符串</span><br>      <span class="hljs-comment">//返回值：如果原串大返回1 如果原串小返回-1 如果相等返回0</span><br><br>      <span class="hljs-built_in">console</span>.log(str.slice(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>));<span class="hljs-comment">//**************</span><br>      <span class="hljs-comment">//功能：从原串当中截取指定位置（索引）的字符串，形成新串</span><br>      <span class="hljs-comment">//参数：指定起始位置和结束位置,位置可以是负数，包含起始位置的但是不包含结束位置的</span><br>      <span class="hljs-comment">//参数也可以只写一个，代表起始位置，结束位置不写代表一直到字符串结束</span><br>      <span class="hljs-comment">//返回值：返回截取的字符串</span><br><br>      <span class="hljs-built_in">console</span>.log(str.substr(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">//后面的参数是长度</span><br>      <span class="hljs-comment">//功能：从原串当中截取的字符串，形成新串</span><br>      <span class="hljs-comment">//参数：指定起始位置和长度，位置也可以是负数，如果只写一个起始位置，一直截取到末尾</span><br>      <span class="hljs-comment">//返回值：返回截取的字符串</span><br><br>      <span class="hljs-built_in">console</span>.log(str.substring(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>));<span class="hljs-comment">//后面的参数不允许是负数</span><br>      <span class="hljs-comment">//功能：从原串当中截取的字符串，形成新串</span><br>      <span class="hljs-comment">//参数：指定两个位置，两个位置不能是负数，方法会自动的根据位置大小决定起始和结束位置</span><br>      <span class="hljs-comment">//不包含结束位置的那个字符</span><br>      <span class="hljs-comment">//返回值：返回截取的字符串</span><br><br>      <span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-string">&#x27;&#x27;</span>));<br>      <span class="hljs-comment">//功能：以指定字符为间隔（切割点）将字符串转化为数组</span><br>      <span class="hljs-comment">//参数：可以不写，那么整个字符串作为数组的一个元素</span><br>      <span class="hljs-comment">//可以是空串，那么每个字符都会成为数组的一个元素</span><br>      <span class="hljs-comment">//可以是指定的字符串，会以这个字符串为切割点去切割，如果没有这个切割点，和不传一样</span><br>      <span class="hljs-comment">//返回值：返回生成的数组</span><br><br><br>      str = <span class="hljs-string">&#x27;asjkfhaksdADADKHfalskjfa13244&#x27;</span><br>      <span class="hljs-built_in">console</span>.log(str.toLowerCase());<span class="hljs-comment">//**********</span><br>      <span class="hljs-built_in">console</span>.log(str.toUpperCase());<br>      <span class="hljs-comment">//功能: 把字符串转化大小写</span><br>      <span class="hljs-comment">//参数:无</span><br>      <span class="hljs-comment">//返回值:返回转化后的字符串,也是新串</span><br><br>      <span class="hljs-built_in">console</span>.log(str.toString());<br>      <span class="hljs-comment">//功能:把一个对象转化为字符串</span><br>      <span class="hljs-comment">//参数：无</span><br>      <span class="hljs-comment">//返回值：就是自己，是个新串</span><br></code></pre></div></td></tr></table></figure><h3 id="ES6方法"><a href="#ES6方法" class="headerlink" title="ES6方法"></a>ES6方法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//            1.    includes(str) : 判断是否包含指定的字符串</span><br>            <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;ajshdhak123eiuf&#x27;</span>;<br>            <span class="hljs-built_in">console</span>.log(str.includes(<span class="hljs-string">&#x27;1235&#x27;</span>));<br><span class="hljs-comment">//            2.     startsWith(str) : 判断是否以指定字符串开头</span><br>            <span class="hljs-built_in">console</span>.log(str.startsWith(<span class="hljs-string">&#x27;aa&#x27;</span>));<br><span class="hljs-comment">//            3.     endsWith(str) : 判断是否以指定字符串结尾</span><br>            <span class="hljs-built_in">console</span>.log(str.endsWith(<span class="hljs-string">&#x27;ff&#x27;</span>));<br><span class="hljs-comment">//            4.     repeat(count) : 重复指定次数</span><br>            <span class="hljs-built_in">console</span>.log(str.repeat(<span class="hljs-number">2</span>))<br></code></pre></div></td></tr></table></figure><h3 id="正则相关方法"><a href="#正则相关方法" class="headerlink" title="正则相关方法"></a>正则相关方法</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2b3c4d5e6f7&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * split()</span><br><span class="hljs-comment"> *     - 可以将一个字符串拆分为一个数组</span><br><span class="hljs-comment"> *     - 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串</span><br><span class="hljs-comment"> *     - 这个方法即使不指定全局匹配，也会全都拆分</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 根据任意字母来将字符串拆分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = str.split(<span class="hljs-regexp">/[A-z]/</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * search()</span><br><span class="hljs-comment"> *     - 可以搜索字符串中是否含有指定内容</span><br><span class="hljs-comment"> *     - 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1</span><br><span class="hljs-comment"> *     - 它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串</span><br><span class="hljs-comment"> *     - serach()只会查找第一个，即使设置全局匹配也没用</span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;hello abc hello aec afc&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 搜索字符串中是否含有abc 或 aec 或 afc</span><br><span class="hljs-comment"> */</span><br>result = str.search(<span class="hljs-regexp">/a[bef]c/</span>);<br><br><span class="hljs-comment">//console.log(result);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * match()</span><br><span class="hljs-comment"> *     - 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来</span><br><span class="hljs-comment"> *     - 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索</span><br><span class="hljs-comment"> *         我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容</span><br><span class="hljs-comment"> *         可以为一个正则表达式设置多个匹配模式，且顺序无所谓</span><br><span class="hljs-comment"> *     - match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *     </span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><br>result = str.match(<span class="hljs-regexp">/[a-z]/ig</span>);<br><span class="hljs-built_in">console</span>.log(result[<span class="hljs-number">2</span>]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * replace()</span><br><span class="hljs-comment"> *     - 可以将字符串中指定内容替换为新的内容</span><br><span class="hljs-comment"> *  - 参数：</span><br><span class="hljs-comment"> *         1.被替换的内容，可以接受一个正则表达式作为参数</span><br><span class="hljs-comment"> *         2.新的内容</span><br><span class="hljs-comment"> *  - 默认只会替换第一个</span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><span class="hljs-comment">//result = str.replace(/[a-z]/gi , &quot;@_@&quot;);</span><br>result = str.replace(<span class="hljs-regexp">/[a-z]/gi</span> , <span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></div></td></tr></table></figure><h2 id="new关键字的作用"><a href="#new关键字的作用" class="headerlink" title="new关键字的作用"></a>new关键字的作用</h2><ol><li>在堆内存中开辟空间 var obj = {}</li><li>让函数内部的this指向该空间 确定原型链 obj.<strong>proto</strong> = Obj.prototype</li><li>执行函数代码</li><li>把空间的地址返回给对象实例（如果函数return的是基本类型值，实际会生成一个对象并返回，如果是函数return的是引用类型值，则实际返回的是该引用类型值）</li></ol><h2 id="日期和时间对象"><a href="#日期和时间对象" class="headerlink" title="日期和时间对象"></a>日期和时间对象</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date);<br><span class="hljs-built_in">console</span>.log(date.getFullYear());<span class="hljs-comment">//拿到年</span><br><span class="hljs-built_in">console</span>.log(date.getMonth());<span class="hljs-comment">//拿到月   月份是 0 - 11表示的  记得后面+1</span><br><span class="hljs-built_in">console</span>.log(date.getDate());<span class="hljs-comment">//拿到日</span><br><br><span class="hljs-built_in">console</span>.log(date.getHours());<span class="hljs-comment">//小时</span><br><span class="hljs-built_in">console</span>.log(date.getMinutes());<span class="hljs-comment">//分钟</span><br><span class="hljs-built_in">console</span>.log(date.getSeconds());<span class="hljs-comment">//秒</span><br><br><span class="hljs-built_in">console</span>.log(date.toLocaleTimeString());<span class="hljs-comment">//当前时间的本地格式化字符串</span><br><span class="hljs-built_in">console</span>.log(date.toLocaleDateString());<span class="hljs-comment">//当前日期的本地格式化字符串</span><br><br><span class="hljs-built_in">console</span>.log(date.getTime());<span class="hljs-comment">//1970 年 1 月 1 日到现在 之间的毫秒数</span><br><span class="hljs-built_in">console</span>.log(date.getDay());<span class="hljs-comment">//拿到星期</span><br></code></pre></div></td></tr></table></figure><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>​        实例化对象在找属性或者方法的时候，先从自身去找看有没有这个属性或者方法，如果有，直接使用这个属性的值，如果没有，会继续顺着这个对象的隐式原型对象（__proto__）找到这个对象的原型对象（和它的构造函数的显式原型对象是同一个），看看原型对象是否存在这个属性，如果有就使用原型对象当中的这个属性值，如果还没有，再去找原型对象的隐式原型对象（默认就是Object显式原型对象），找到以后去看看有没有这个属性，如果有就使用这个属性值，如果没有就返回undefined(代表已经找到顶了)。</p><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220511/prototype.46vza2cjw3u0.webp" alt="原型链"></p><h2 id="终极原型链"><a href="#终极原型链" class="headerlink" title="终极原型链"></a>终极原型链</h2><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220605/image.4rqjtezef7s.webp" alt="image"></p><h2 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h2><p>​        将js写在body之前，会出现代码中操作的对象未被加载的情况，那么我们该如何去解决呢？这时候window.onload就被有了存在的意义了。</p><p>​        window.onload是一个事件，在文档加载完成后能立即触发，并且能够为该事件注册事件处理函数。将要对对象或者模块进行操作的代码存放在处理函数中。即：window.onload =function (){这里写操作的代码};</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>使用window.onload()，操作对象 已被加载<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;s&quot;</span>).style.color = <span class="hljs-string">&quot;green&quot;</span>;</span><br><span class="javascript">            &#125;;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;s&quot;</span>&gt;</span>大哥，你要坚强，当然是选择原谅他啊！！！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="DOM事件三要素和处理三大步"><a href="#DOM事件三要素和处理三大步" class="headerlink" title="DOM事件三要素和处理三大步"></a>DOM事件三要素和处理三大步</h2><p><strong>事件三要素</strong>     </p><ul><li><p>​    事件源 （承受事件的对象）</p></li><li><p>​    事件类型onclick</p></li><li><p>​    事件处理回调函数</p></li></ul><p><strong>事件处理三大步</strong>      </p><ul><li><p>​    获取事件源DOM对象   </p></li><li><p>​    添加对应事件监听（onclick）   </p></li><li><p>​    书写处理回调</p></li></ul><h2 id="使用DOM修改和访问自定义属性"><a href="#使用DOM修改和访问自定义属性" class="headerlink" title="使用DOM修改和访问自定义属性"></a>使用DOM修改和访问自定义属性</h2><h3 id="setAttribute和getAttribute"><a href="#setAttribute和getAttribute" class="headerlink" title="setAttribute和getAttribute"></a>setAttribute和getAttribute</h3><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            <span class="hljs-selector-class">.p1</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-class">.p2</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: green;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pp&quot;</span> <span class="hljs-attr">aa</span>=<span class="hljs-string">&quot;bb&quot;</span>&gt;</span>我是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> pNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;pp&#x27;</span>);</span><br><span class="javascript">                pNode.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                    <span class="hljs-comment">//对于天生的属性无论是一般属性还是特殊属性 都可以使用点语法和[]去操作</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    this.id = &#x27;ppp&#x27;;</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    pNode.className = &#x27;p2&#x27;;</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">//自定义属性，没办法是用点语法和[]语法</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    this.aa = &#x27;cc&#x27;;</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    this[&#x27;aa&#x27;] = &#x27;cc&#x27;;</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">//对于自定义的属性，只能用下面两个方法去读写</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    console.log(this.getAttribute(&#x27;aa&#x27;));//读取属性的属性值</span></span><br><span class="javascript">                    <span class="hljs-comment">//                    this.setAttribute(&#x27;aa&#x27;,&#x27;cc&#x27;)//设置属性的属性值</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">//这两个方法是通用的，天生的属性也可以使用,并且类名直接使用class不用改为className</span></span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.setAttribute(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;ppp&#x27;</span>);</span><br><span class="javascript">                    <span class="hljs-built_in">this</span>.setAttribute(<span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;p2&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="鼠标事件和键盘事件"><a href="#鼠标事件和键盘事件" class="headerlink" title="鼠标事件和键盘事件"></a>鼠标事件和键盘事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li>onclick                                                   <!--点击--></li><li>ondblclick                                            <!--双击--></li><li>onmousemove                                  <!--鼠标移动--></li><li>oncontextmenu                                <!--右击--></li><li>onmouseover/onmouseout         <!--鼠标移入移出--></li><li>onmouseenter/onmouseleave   <!--鼠标移入移出--></li><li>onmousedown/onmouseup        <!--鼠标点击和抬起--></li></ul><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li>onkeyup           <!--按键抬起--></li><li>onkeydown    <!--按键落下（按下不放会重复触发）--></li><li>onfocus            <!--获取焦点--></li><li>onblur              <!--失去焦点--></li></ul><h3 id="onfocus和onblur"><a href="#onfocus和onblur" class="headerlink" title="onfocus和onblur"></a>onfocus和onblur</h3><ul><li>onfocus           <!--聚焦--></li><li>Onblur             <!--失焦--></li></ul><h2 id="innerText、innerHTML、textContent的区别"><a href="#innerText、innerHTML、textContent的区别" class="headerlink" title="innerText、innerHTML、textContent的区别"></a>innerText、innerHTML、textContent的区别</h2><ul><li>innerText和textContent都是用来操作元素的文本（不会包含标签），innerHTML会获取标签和文本（换行和空格也会）</li><li>textContent可以获取到隐藏的元素的内容，只有高级浏览器才能使用</li></ul><h2 id="获取Dom节点"><a href="#获取Dom节点" class="headerlink" title="获取Dom节点"></a>获取Dom节点</h2><h3 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h3><div class="hljs code-wrapper"><pre><code>                        nodeType    nodeName    nodeValue文本节点        3          #text      文本内容元素节点        1        元素名大写      null注释节点        8        #comment     注释内容</code></pre></div><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><ol><li><p>获取ul内部的所有子节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.childNodes <span class="hljs-comment">//拿到ul所有的子节点 （文本  元素 注释）</span><br></code></pre></div></td></tr></table></figure></li><li><p>获取所有子元素节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.children <span class="hljs-comment">//拿到ul所有的子元素节点，低级浏览器还包含注释</span><br></code></pre></div></td></tr></table></figure></li><li><p>获取第一个子节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.firstChild<br></code></pre></div></td></tr></table></figure></li><li><p>获取第一个子元素节点,但是只有高级浏览器认识</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.firstElementChild<br></code></pre></div></td></tr></table></figure></li><li><p>获取最后一个子节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.lastChild<br></code></pre></div></td></tr></table></figure></li><li><p>获取最后一个子元素节点,但是只有高级浏览器认识</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.lastElementChild<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="兄弟关系"><a href="#兄弟关系" class="headerlink" title="兄弟关系"></a>兄弟关系</h3><ol><li><p>获取li的上一个兄弟节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.previousSibling<br></code></pre></div></td></tr></table></figure></li><li><p>获取上一个兄弟元素节点,但是只有高级浏览器认识</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.previousElementSibling<br></code></pre></div></td></tr></table></figure></li><li><p>获取下一个兄弟节点</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.nextSibling<br></code></pre></div></td></tr></table></figure></li><li><p>获取下一个兄弟元素节点,但是只有高级浏览器认识</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.nextElementSibling<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><ol><li><p>从末尾追加(写在父元素上)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">ulNode.appendChild(liNode) <span class="hljs-comment">// appendChild</span><br>ulNode.append(liNode) <span class="hljs-comment">// append</span><br></code></pre></div></td></tr></table></figure></li><li><p>在任意位置添加(写在父元素上)</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">ulNode.insertBefore(liNode,liNodeOld) <span class="hljs-comment">// insertBefore（要插入的元素，插入的位置）</span><br></code></pre></div></td></tr></table></figure></li></ol><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><ol><li>删除(写在要删除的元素上)<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">Node.remove()<br></code></pre></div></td></tr></table></figure></li></ol><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><ol><li>修改子元素的内容(写在父元素上)<figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>)<br><span class="hljs-keyword">let</span> li = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;li&#x27;</span>)<br>ul.replaceChild(li,l4) <span class="hljs-comment">// replaceChild(要修改之后的内容，被修改的元素)</span><br>ul.replaceWith(li,l4) <span class="hljs-comment">// replaceWith(按顺序将所有子元素替换成传入的元素)</span><br></code></pre></div></td></tr></table></figure></li></ol><h2 id="DOM节点的特殊操作"><a href="#DOM节点的特殊操作" class="headerlink" title="DOM节点的特殊操作"></a>DOM节点的特殊操作</h2><blockquote><p><em><strong>当元素的<span style = 'color : red'>id</span>或者<span style = 'color : red'>name</span>与js内置属性或全局变量不重名的时候，自动成为window对象的属性，可通过document对象直接调用</strong></em></p></blockquote><h2 id="DOM0和DOM2事件对象"><a href="#DOM0和DOM2事件对象" class="headerlink" title="DOM0和DOM2事件对象"></a>DOM0和DOM2事件对象</h2><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220511/DOM0%E5%92%8CDOM2%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1.5fvbhfcgbw00.webp" alt="DOM0和DOM2事件对象"></p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220511/%E4%BA%8B%E4%BB%B6%E6%B5%81.3us2vh5h2wo0.webp" alt="事件流"></p><h2 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h2><p>​        事件委派是指将事件绑定给祖先元素，当后代元素触发事件的时候通过事件冒泡来冒泡到祖先元素上，这样既可以减少绑定事件的次数，提升代码性能，又可以使原本就存在的元素和通过dom新创建的元素都能够触发事件。</p><p>​        例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>            <span class="hljs-comment">// 如果使用事件委派 那么就必须使用onmouseover和onmouseout事件</span><br>            ul.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                <span class="hljs-comment">// event.target 当前正在操作的元素</span><br>                <span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.style.backgroundColor = <span class="hljs-string">&#x27;yellowgreen&#x27;</span>;<br>                &#125;<br>            &#125;<br>            ul.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>                &#125;<br>            &#125;<br></code></pre></div></td></tr></table></figure><p>​        <code>event.target.nodeName</code>、<code>event.target.className</code>、<code>event.target.id</code>、<code>event.target.innerHTML</code>等属性都可以用来找到后代元素。</p><p>​        <code>event.target</code>指的是真正触发事件的元素，<code>e.currentTarget</code>指的是绑定了事件监听的元素，在上面的例子中<code>e.currentTarget</code>指的就是<code>ul</code>。</p><p>​        目标元素有子标签的情况可以使用<code>event.target.parentElement.nodeName</code>来解决。</p><p>​        例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;ul&#x27;</span>);<br>            ul.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(event.target.nodeName);<br>                <span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.style.backgroundColor = <span class="hljs-string">&#x27;orange&#x27;</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.target.parentElement.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.parentElement.style.backgroundColor = <span class="hljs-string">&#x27;orange&#x27;</span>;<br>                &#125;<br>            &#125;<br>            ul.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.target.parentElement.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    event.target.parentElement.style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>                &#125;<br>            &#125;<br></code></pre></div></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>​        window对象是一个顶层对象，指的是浏览器的窗口，全局变量是window对象的属性，全局函数是window对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-comment">// 网页加载完毕之后立即执行</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.alert(<span class="hljs-string">&#x27;明天我想去城墙走走&#x27;</span>); <span class="hljs-comment">// 弹框显示</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> flag = <span class="hljs-built_in">window</span>.confirm(<span class="hljs-string">&#x27;你确定删除他吗？&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(flag); <span class="hljs-comment">// 用户可选择是否确定，返回值为布尔值</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>);<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// 默认情况下 是打开一个新的窗口  _blank</span><br><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span>);<br>  <span class="hljs-comment">// 可以指定_self  在当前窗口中打开</span><br><span class="hljs-built_in">window</span>.open(<span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span>,<span class="hljs-string">&#x27;_self&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onresize = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">// 浏览器窗口发生大小改变的时候这个事件函数就会自动执行</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.documentElement.clientWidth); <span class="hljs-comment">// 固定拿视口宽度的</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">document</span>.documentElement.clientHeight); <span class="hljs-comment">// 固定拿视口宽度的</span><br>&#125;;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onscroll = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; <span class="hljs-comment">// 系统滚动事件</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;111&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.location.href); <span class="hljs-comment">// 获取当前的路径</span><br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;button&#x27;</span>); <span class="hljs-comment">// 跳转到指定的地址</span><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&#x27;http://www.atguigu.com&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">location.hostname <span class="hljs-comment">// 返回 web 主机的域名</span><br><br>location.pathname <span class="hljs-comment">// 返回当前页面的路径和文件名</span><br><br>location.port <span class="hljs-comment">// 返回 web 主机的端口 （80 或 443）</span><br><br>location.portocol <span class="hljs-comment">// 返回页面使用的web协议。 http:或https:</span><br></code></pre></div></td></tr></table></figure><h3 id="history对象（用户访问历史记录）"><a href="#history对象（用户访问历史记录）" class="headerlink" title="history对象（用户访问历史记录）"></a>history对象（用户访问历史记录）</h3><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// appCodeName 属性返回浏览器的代码名</span><br><span class="hljs-built_in">console</span>.log(navigator.appCodeName);<br><br><span class="hljs-comment">// appName 属性返回浏览器的名称</span><br><span class="hljs-built_in">console</span>.log(navigator.appName);<br><br><span class="hljs-comment">// cookieEnabled 属性返回指明浏览器中是否启用cookie的布尔值</span><br><span class="hljs-built_in">console</span>.log(navigator.cookieEnabled);<br><br><span class="hljs-comment">// platform 属性返回运行浏览器的操作系统平台</span><br><span class="hljs-built_in">console</span>.log(navigator.platform);<br><br><span class="hljs-comment">// appVersion 属性返回浏览器的平台和版本信息</span><br><span class="hljs-built_in">console</span>.log(navigator.appVersion);<br><br><span class="hljs-comment">// userAgent 属性返回用户浏览器发送服务器的user-agent头部的值</span><br><span class="hljs-built_in">console</span>.log(navigator.userAgent);<br><br><span class="hljs-comment">// language 属性返回用户的语言设置</span><br><span class="hljs-built_in">console</span>.log(navigator.language);<br></code></pre></div></td></tr></table></figure><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(screen.width); <span class="hljs-comment">// width 属性返回显示器屏幕的宽度</span><br><span class="hljs-built_in">console</span>.log(screen.height); <span class="hljs-comment">// height 属性返回显示器屏幕的高度</span><br><span class="hljs-built_in">console</span>.log(screen.availWidth); <span class="hljs-comment">// availHeight 属性返回显示屏幕的宽度 (除 Windows 任务栏之外)</span><br><span class="hljs-built_in">console</span>.log(screen.availHeight); <span class="hljs-comment">// availWidth 属性返回显示屏幕的高度 (除 Windows 任务栏之外)</span><br></code></pre></div></td></tr></table></figure><h3 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h3><p>​        document对象包含整个 HTML 文档，可被用来访问文档内容及其所有页面元素，也是window对象的一个属性，因此可以将document对象作为一个全局对象来访问</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><h3 id="event和target的兼容性"><a href="#event和target的兼容性" class="headerlink" title="event和target的兼容性"></a>event和target的兼容性</h3><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ul = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;u1&#x27;</span>);<br>            ul.onmouseover = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                <span class="hljs-comment">// 无法获取未定义或 null 引用的属性“target”</span><br>                <span class="hljs-comment">// 原因是因为event对象没有 所有没有target属性</span><br>                event = event || <span class="hljs-built_in">window</span>.event;<br>                <span class="hljs-comment">// 无法获取未定义或 null 引用的属性“nodeName”</span><br>                <span class="hljs-comment">// 原因是target对象没有获取到 所以没有nodeName属性</span><br><br>                <span class="hljs-comment">// event.target是高级浏览器的target</span><br>                <span class="hljs-comment">// event.srcElement低级浏览器的target</span><br>                target = event.target || event.srcElement;<br><br>                <span class="hljs-keyword">if</span>(target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    target.style.backgroundColor = <span class="hljs-string">&#x27;yellow&#x27;</span>;<br>                &#125;<br>            &#125;<br><br>            ul.onmouseout = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;<br>                event = event || <span class="hljs-built_in">window</span>.event;<br>                target = event.target || event.srcElement;<br>                <span class="hljs-keyword">if</span>(target.nodeName == <span class="hljs-string">&#x27;LI&#x27;</span>)&#123;<br>                    target.style.backgroundColor = <span class="hljs-string">&#x27;&#x27;</span>;<br>                &#125;<br>            &#125;<br></code></pre></div></td></tr></table></figure><h3 id="取消浏览器默认行为、全局捕获"><a href="#取消浏览器默认行为、全局捕获" class="headerlink" title="取消浏览器默认行为、全局捕获"></a>取消浏览器默认行为、全局捕获</h3><ul><li><p>在盒子当中写上文字，拖拽先选中文字，在拖拽，文字跟着走，盒子不动，放手盒子会瞬间到放手的位置</p><p>因为浏览器有默认行为，拖拽文字就是一个默认行为。解决：取消浏览器的默认行为</p><p>取消浏览器默认行为根据事件添加方式不同而不同</p><ul><li>dom0事件，那么在事件回调当中写上return false；</li><li>dom2事件, 在事件回调当中添加e.preventDefault()；</li></ul></li><li><p>在低版本浏览器当中在盒子当中写上文字，拖拽先选中文字，在拖拽会出现禁止拖拽的现象</p><p>因为低版本浏览器专门有这样的行为，禁止拖拽是低版本浏览器专属，解决：使用全局捕获，把鼠标后续的事件，强制拉回作用在元素身上，以后鼠标就只能作用在元素身上了，全局捕获有捕获就有释放，否则后果自负</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">box.setCapture&amp;&amp;box.setCapture();<span class="hljs-comment">//只有低版本浏览器才会用到全局捕获</span><br>box.releaseCapture&amp;&amp;box.releaseCapture();<span class="hljs-comment">//低版本浏览器释放全局捕获</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="获取鼠标的位置和元素的宽高及偏移量"><a href="#获取鼠标的位置和元素的宽高及偏移量" class="headerlink" title="获取鼠标的位置和元素的宽高及偏移量"></a>获取鼠标的位置和元素的宽高及偏移量</h2><h3 id="鼠标的三种位置获取方式"><a href="#鼠标的三种位置获取方式" class="headerlink" title="鼠标的三种位置获取方式"></a>鼠标的三种位置获取方式</h3><ul><li><p><strong>offsetX（只读）</strong>   <strong>offsetY（只读）</strong></p><p>拿的是鼠标相对<strong>自身元素</strong>的水平距离和垂直距离   相对的是自身元素左上角（以自身元素左上角为原点）</p></li><li><p><strong>clientX（只读）</strong>   <strong>clientY（只读）</strong>    </p><p>拿的是鼠标相对<strong>视口</strong>的 水平距离和垂直距离  相对的是视口的左上角（以视口左上角为原点）</p></li><li><p><strong>pageX（只读）</strong>   <strong>pageY（只读）</strong>           </p><p>拿的是鼠标相对<strong>页面（第一屏）</strong>的水平距离和垂直距离   相对的是页面的左上角（以页面左上角为原点）</p></li></ul><h3 id="元素的宽高及偏移量获取方式"><a href="#元素的宽高及偏移量获取方式" class="headerlink" title="元素的宽高及偏移量获取方式"></a>元素的宽高及偏移量获取方式</h3><ul><li><p><strong>clientWidth（只读）</strong></p><p>拿的是盒子内容 + padding的宽</p></li><li><p><strong>clientHeight（只读）</strong></p><p>拿的是盒子内容 + padding的高</p></li><li><p><strong>clientLeft（只读）</strong></p><p>拿的是盒子左边框大小</p></li><li><p><strong>clientTop（只读）</strong></p><p>拿的是盒子上边框大小</p></li></ul><ul><li><p><strong>offsetWidth（只读）</strong></p><p>拿的是盒子内容 + padding + border的宽</p></li><li><p><strong>offsetHeight（只读）</strong></p><p>拿的是盒子内容 + padding + border的高</p></li><li><p><strong>offsetLeft（只读）</strong></p><p>拿的是元素的偏移量：可以认为就是拿的绝对定位left值</p><p>切记如果进行offsetLeft的值进行加法运算不允许添加px</p></li><li><p><strong>offsetTop（只读）</strong></p><p>拿的是元素的偏移量：可以认为就是拿的绝对定位top值</p></li></ul><ul><li><p><strong>scrollWidth（只读）</strong></p><p>当内容比盒子小的时候，拿的是盒子的clientWidth</p><p>当内容比盒子大的时候，拿的是内容的offsetWidth + 盒子的一侧内边距</p></li><li><p><strong>scrollHeight（只读）</strong></p><p>当内容比盒子小的时候，拿的是盒子的clientHeight</p><p>当内容比盒子大的时候，拿的是内容的offsetHeight + 盒子的一侧内边距</p></li><li><p><strong>scrollTop（可读可写）</strong></p><p>拿的是盒子内容向上滚动的距离</p></li><li><p><strong>scrollLeft（可读可写）</strong></p><p>拿的是盒子内容向左滚动的距离</p></li></ul><h2 id="系统滚动条的禁用"><a href="#系统滚动条的禁用" class="headerlink" title="系统滚动条的禁用"></a>系统滚动条的禁用</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">html,body&#123;<br>                     <span class="hljs-attr">height</span>:<span class="hljs-number">100</span>%;    <br>                    overflow:hidden;             <br>             &#125;<br></code></pre></div></td></tr></table></figure><h2 id="鼠标拖拽的效果实现"><a href="#鼠标拖拽的效果实现" class="headerlink" title="鼠标拖拽的效果实现"></a>鼠标拖拽的效果实现</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: auto;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>老马<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="javascript">                <span class="hljs-keyword">var</span> imgNode = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="javascript">                box.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                    e = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                    <span class="hljs-comment">//按下的时候获取元素的初始位置和鼠标的初始位置</span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> eleX = box.offsetLeft;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> eleY = box.offsetTop;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> startX = e.clientX;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> startY = e.clientY;</span><br><span class="javascript">                    <span class="hljs-comment">//全局捕获</span></span><br><span class="javascript">                    box.setCapture&amp;&amp;box.setCapture();<span class="hljs-comment">//只有低版本浏览器才会用到全局捕获</span></span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                        e = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                        <span class="hljs-comment">//可以获取鼠标的结束位置</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> endX = e.clientX;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> endY = e.clientY;</span><br><span class="javascript">                        <span class="hljs-comment">//求出鼠标的距离差</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> disX = endX - startX;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> disY = endY - startY;</span><br><span class="javascript">                        <span class="hljs-comment">//求出元素移动的最终位置  =  元素的初始位置  + 鼠标的距离差</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> lastX = eleX + disX;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> lastY = eleY + disY;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">//添加临界值</span></span><br><span class="javascript">                        <span class="hljs-keyword">if</span>(lastX &gt; <span class="hljs-built_in">document</span>.documentElement.clientWidth - box.offsetWidth - <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                            lastX = <span class="hljs-built_in">document</span>.documentElement.clientWidth - box.offsetWidth</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastX &lt; <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                            lastX = <span class="hljs-number">0</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-keyword">if</span>(lastY &gt; <span class="hljs-built_in">document</span>.documentElement.clientHeight - box.offsetHeight - <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                            lastY = <span class="hljs-built_in">document</span>.documentElement.clientHeight - box.offsetHeight</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastY &lt; <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                            lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">//把求出来的最终位置设置给元素</span></span><br><span class="javascript">                        box.style.left = lastX + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                        box.style.top = lastY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-comment">//设置元素位置之后，然后判断是否发生碰撞</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> boxL = lastX + box.offsetWidth;<span class="hljs-comment">//求盒子在图片左侧的位置+自身宽度</span></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> imgL = imgNode.getBoundingClientRect().left;<span class="hljs-comment">//专门求元素相对视口的位置</span></span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> boxT = lastY + box.offsetHeight;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> imgT = imgNode.getBoundingClientRect().top;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> boxR = lastX;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> imgR = imgNode.getBoundingClientRect().left + imgNode.offsetWidth;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-keyword">var</span> boxB = lastY;</span><br><span class="javascript">                        <span class="hljs-keyword">var</span> imgB = imgNode.getBoundingClientRect().top + imgNode.offsetHeight;</span><br><span class="javascript"></span><br><span class="javascript">                        <span class="hljs-keyword">if</span>(boxL &lt; imgL || boxT &lt; imgT || boxR &gt; imgR  || boxB &gt; imgB)&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//碰不到</span></span><br><span class="javascript">                            imgNode.src = <span class="hljs-string">&#x27;img/1.jpg&#x27;</span>;</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//碰到了</span></span><br><span class="javascript">                            imgNode.src = <span class="hljs-string">&#x27;img/2.jpg&#x27;</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript"></span><br><span class="javascript">                    &#125;;</span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                        <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                        box.releaseCapture&amp;&amp;box.releaseCapture();<span class="hljs-comment">//低版本浏览器释放全局捕获</span></span><br><span class="javascript"></span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="滚轮事件"><a href="#滚轮事件" class="headerlink" title="滚轮事件"></a>滚轮事件</h2><p>区分上下</p><ul><li>ie/chrome : mousewheel(dom2的标准模式)</li></ul><p>​                 event.wheelDelta</p><p>​                      上：120</p><p>​                      下：-120</p><p>​              上和下指的是滚轮的方向</p><ul><li>firefox: DOMMouseScroll(dom2的标准模式)</li></ul><p>​                 event.detail</p><p>​                      上：-3</p><p>​                      下：3</p><p>​                      上和下指的是滚轮的方向</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css">            <span class="hljs-selector-id">#box</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;box&#x27;</span>);</span><br><span class="javascript">                <span class="hljs-comment">//IE/CHROME</span></span><br><span class="javascript">                box.addEventListener(<span class="hljs-string">&#x27;mousewheel&#x27;</span>,scrollMove);</span><br><span class="javascript">                <span class="hljs-comment">//fireFox</span></span><br><span class="javascript">                box.addEventListener(<span class="hljs-string">&#x27;DOMMouseScroll&#x27;</span>,scrollMove);</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">//与其讲滚轮事件不如说在讲怎么区分滚轮是往下还是往上</span></span><br><span class="javascript">                <span class="hljs-comment">//兼容性去处理回调函数</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">scrollMove</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                    e = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(e.wheelDelta)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//ie或者chrome</span></span><br><span class="javascript">                        <span class="hljs-keyword">if</span>(e.wheelDelta &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//往上</span></span><br><span class="javascript">                            flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//往下</span></span><br><span class="javascript">                            flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript"></span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e.detail)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//火狐</span></span><br><span class="javascript">                        <span class="hljs-keyword">if</span>(e.detail &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//往下</span></span><br><span class="javascript">                            flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                        &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            <span class="hljs-comment">//往上</span></span><br><span class="javascript">                            flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                        &#125;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//不管什么浏览器，一定是往上滚的</span></span><br><span class="javascript">                        box.style.height = box.offsetHeight - <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        <span class="hljs-comment">//不管什么浏览器，一定是往下滚的</span></span><br><span class="javascript">                        box.style.height = box.offsetHeight + <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="轮播图逻辑（涉及定时器叠加问题）"><a href="#轮播图逻辑（涉及定时器叠加问题）" class="headerlink" title="轮播图逻辑（涉及定时器叠加问题）"></a>轮播图逻辑（涉及定时器叠加问题）</h2><p><em><strong>定时器叠加时，要先清除定时器再设置新的定时器</strong></em></p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>轮播图<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        * &#123;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">ul</span>,</span><br><span class="css">        <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="css">            <span class="hljs-comment">/*vertical-align: middle;*/</span></span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-class">.clearFix</span>:after &#123;</span><br><span class="css">            content: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="css">            <span class="hljs-attribute">display</span>: table;</span><br><span class="css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.list</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">4200px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">            <span class="hljs-attribute">left</span>: -<span class="hljs-number">600px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>, .<span class="hljs-number">7</span>);</span><br><span class="css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="css">            <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">2s</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.iconList</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);</span><br><span class="css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.iconList</span> <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="css">        &#125;</span><br><span class="css"></span><br><span class="css">        <span class="hljs-selector-id">#box</span> <span class="hljs-selector-class">.iconList</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.current</span> &#123;</span><br><span class="css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/5.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/1.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/2.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/3.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/4.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/5.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/1.jpg&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><br>            &lt; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span> &gt; <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconList&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;current&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> box = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#box&#x27;</span>);</span><br><span class="javascript">        <span class="hljs-keyword">var</span> list = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#box .list&#x27;</span>); <span class="hljs-comment">// 图片</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> span_list = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;#box span&#x27;</span>); <span class="hljs-comment">// 左右箭头</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript">        <span class="hljs-comment">// 小圆点数组</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> icon_list = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;#box .iconList li&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">var</span> is_move = <span class="hljs-literal">false</span>;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 自动播放的定时器</span></span><br><span class="javascript">        <span class="hljs-keyword">var</span> auto_play_timer = <span class="hljs-literal">null</span>;</span><br><span class="javascript"></span><br><span class="javascript">        box.onmouseenter = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            span_list[<span class="hljs-number">0</span>].style.opacity = <span class="hljs-string">&#x27;.5&#x27;</span>;</span><br><span class="javascript">            span_list[<span class="hljs-number">1</span>].style.opacity = <span class="hljs-string">&#x27;.5&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-built_in">clearInterval</span>(auto_play_timer);</span><br><span class="javascript"></span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        box.onmouseleave = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            span_list[<span class="hljs-number">0</span>].style.opacity = <span class="hljs-number">0</span>;</span><br><span class="javascript">            span_list[<span class="hljs-number">1</span>].style.opacity = <span class="hljs-number">0</span>;</span><br><span class="javascript">            auto_play();</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        span_list[<span class="hljs-number">1</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            move(<span class="hljs-literal">true</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        span_list[<span class="hljs-number">0</span>].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            move(<span class="hljs-literal">false</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// 自动轮播</span></span><br><span class="javascript">        <span class="hljs-comment">// 刚进入到页面之后  就相当于点击右边按钮 右边按钮 就调用了move方法</span></span><br><span class="javascript">        <span class="hljs-comment">// 然后传递了一个true参数</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">auto_play</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            auto_play_timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                move(<span class="hljs-literal">true</span>);</span><br><span class="javascript">            &#125;, <span class="hljs-number">2000</span>);</span><br><span class="javascript">        &#125;</span><br><span class="javascript">        auto_play();</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// *******move方法中的img_width 点一下 移动的距离 给多少动多少</span></span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; icon_list.length; i++) &#123;</span><br><span class="javascript"></span><br><span class="javascript">            icon_list[i].index = i;</span><br><span class="javascript"></span><br><span class="javascript">            icon_list[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; icon_list.length; j++) &#123;</span><br><span class="javascript">                    icon_list[j].className = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-comment">// 求出移动距离 然后传递给move方法 修改img_width</span></span><br><span class="javascript">                <span class="hljs-built_in">this</span>.className = <span class="hljs-string">&#x27;current&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">// 当前小圆点对应图片的偏移量</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> endX = (<span class="hljs-built_in">this</span>.index + <span class="hljs-number">1</span>) * -<span class="hljs-number">600</span>;</span><br><span class="javascript">                <span class="hljs-comment">// 当前小圆点对应图片的偏移量 减去  原来小圆点对应图片的偏移量</span></span><br><span class="javascript">                <span class="hljs-keyword">var</span> move_dis = endX - list.offsetLeft;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(move_dis);</span><br><span class="javascript">                move(move_dis);</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-comment">// move方法含义  移动你给定的距离 给多少移动多少</span></span><br><span class="javascript">        <span class="hljs-comment">// 应用在于可以移动一张图片  点一下左右就移动一张</span></span><br><span class="javascript">        <span class="hljs-comment">//     在于小圆点不一定点谁</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">move</span>(<span class="hljs-params">flag</span>) </span>&#123;</span><br><span class="javascript">            <span class="hljs-comment">// 定义了一个全局变量 is_move = false；</span></span><br><span class="javascript">            <span class="hljs-comment">// 每点击一下按钮  就执行一次move方法</span></span><br><span class="javascript">            <span class="hljs-comment">// 当第一次点击的时候 is_move为false</span></span><br><span class="javascript">            <span class="hljs-comment">// 如果在没有移动完毕之前 又一次点击了  则is_move =true</span></span><br><span class="javascript">            <span class="hljs-comment">// 如果is_move为true  那么第二次的点击就不能执行</span></span><br><span class="javascript">            <span class="hljs-comment">// 因为return 只有当一张图片全部移动完毕(is_move=false)才会第二次</span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (is_move) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">return</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            is_move = <span class="hljs-literal">true</span>;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// (1) 要停止的位置</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> now_left = list.offsetLeft;</span><br><span class="javascript">            <span class="hljs-comment">// 一次移动多少</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> img_width = <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 首先move的方法给定移动的距离 然后进行渐变执行</span></span><br><span class="javascript">            <span class="hljs-comment">// 如果传递的是布尔类型的数据 则就是整张图片的移动</span></span><br><span class="javascript">            <span class="hljs-comment">// 如果传递的是其他数据类型   则就是移动传递的参数的距离 </span></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> flag == <span class="hljs-string">&#x27;boolean&#x27;</span>) &#123;</span><br><span class="javascript">                <span class="hljs-keyword">if</span> (flag) &#123;</span><br><span class="javascript">                    img_width = -<span class="hljs-number">600</span>;</span><br><span class="javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                    img_width = <span class="hljs-number">600</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">                img_width = flag;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> lastX = now_left + img_width;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> allTime = <span class="hljs-number">600</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> stepTime = <span class="hljs-number">30</span>;</span><br><span class="javascript">            <span class="hljs-keyword">var</span> stepNum = allTime / stepTime;</span><br><span class="javascript">            <span class="hljs-comment">// (2) 移动的距离</span></span><br><span class="javascript">            timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> startX = list.offsetLeft;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> step = img_width / stepNum;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> endX = startX + step;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">if</span> (lastX == endX) &#123;</span><br><span class="javascript">                    <span class="hljs-built_in">clearInterval</span>(timer);</span><br><span class="javascript">                    <span class="hljs-keyword">if</span> (endX == -<span class="hljs-number">3600</span>) &#123;</span><br><span class="javascript">                        endX = -<span class="hljs-number">600</span>;</span><br><span class="javascript">                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (endX == <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                        endX = -<span class="hljs-number">3000</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    is_move = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                list.style.left = endX + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">            &#125;, stepTime);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 图片联动小圆点</span></span><br><span class="javascript">            <span class="hljs-comment">// 排他思想</span></span><br><span class="javascript">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; icon_list.length; i++) &#123;</span><br><span class="javascript">                icon_list[i].className = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 小圆点的索引</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> index = lastX / -<span class="hljs-number">600</span> - <span class="hljs-number">1</span>;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">4</span>) &#123;</span><br><span class="javascript">                index = <span class="hljs-number">0</span>;</span><br><span class="javascript">            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;</span><br><span class="javascript">                index = <span class="hljs-number">4</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            icon_list[index].className = <span class="hljs-string">&#x27;current&#x27;</span>;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- (1)移入显示样式</span><br><span class="hljs-comment">         (2)渐变 - 向右</span><br><span class="hljs-comment">         (3)渐变 - 向左</span><br><span class="hljs-comment">         (4)图片变换联动小圆点</span><br><span class="hljs-comment">         (5)小圆点联动图片</span><br><span class="hljs-comment">         (6)定时器叠加问题</span><br><span class="hljs-comment">         (7)自动轮播</span><br><span class="hljs-comment">         (8)移入移出悬停 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="鼠标拖拽逻辑"><a href="#鼠标拖拽逻辑" class="headerlink" title="鼠标拖拽逻辑"></a>鼠标拖拽逻辑</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>鼠标拖拽<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>: aquamarine;</span><br><span class="css">            &#125;</span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d1&quot;</span>&gt;</span>拖拽模板<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;d1&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            div.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">                event = event || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> eleX = div.offsetLeft;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> eleY = div.offsetTop;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">var</span> startX = event.clientX;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> startY = event.clientY;</span><br><span class="javascript"></span><br><span class="javascript">                div.setCapture &amp;&amp; div.setCapture();</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">                    event = event || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> endX = event.clientX;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> endY = event.clientY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> disX = endX - startX;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> disY = endY - startY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> lastX = eleX + disX;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> lastY = eleY + disY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 临界值 --左右</span></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastX &gt;= <span class="hljs-built_in">document</span>.documentElement.clientWidth - div.clientWidth)&#123;</span><br><span class="javascript">                        lastX = <span class="hljs-built_in">document</span>.documentElement.clientWidth - div.clientWidth;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastX &lt;= <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        lastX = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    <span class="hljs-comment">// 临界值 --上下</span></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastY &gt;= <span class="hljs-built_in">document</span>.documentElement.clientHeight - div.offsetHeight)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-built_in">document</span>.documentElement.clientHeight - div.offsetHeight;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastY &lt;= <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 吸附效果</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastX &gt;= <span class="hljs-built_in">document</span>.documentElement.clientWidth - div.clientWidth - <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                        lastX = <span class="hljs-built_in">document</span>.documentElement.clientWidth - div.clientWidth;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastX &lt;= <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                        lastX = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastY &gt;= <span class="hljs-built_in">document</span>.documentElement.clientHeight - div.offsetHeight - <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-built_in">document</span>.documentElement.clientHeight - div.offsetHeight;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastY &lt;= <span class="hljs-number">50</span>)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">                    div.style.left = lastX + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                    div.style.top = lastY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    div.releaseCapture &amp;&amp; div.releaseCapture();</span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="自定义滚动条逻辑"><a href="#自定义滚动条逻辑" class="headerlink" title="自定义滚动条逻辑"></a>自定义滚动条逻辑</h2><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>自定义滚动条<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">            *&#123;</span><br><span class="css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">                <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#wrapper</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: relative;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#wrapper</span> <span class="hljs-selector-id">#scrollBar</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="css">                <span class="hljs-attribute">border-left</span>: <span class="hljs-number">1px</span> solid gray;</span><br><span class="css">                <span class="hljs-attribute">border-right</span>: <span class="hljs-number">1px</span> solid gray;</span><br><span class="css">                <span class="hljs-attribute">background-color</span>:coral;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#wrapper</span> <span class="hljs-selector-id">#scrollBar</span> <span class="hljs-selector-id">#scrollBarIn</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="css">                <span class="hljs-comment">/* height: 100px; */</span></span><br><span class="css">                <span class="hljs-attribute">background-color</span>: aqua;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">            <span class="hljs-selector-id">#wrapper</span> <span class="hljs-selector-id">#content</span>&#123;</span><br><span class="css">                <span class="hljs-attribute">position</span>: absolute;</span><br><span class="css">            &#125;</span><br><span class="css"></span><br><span class="css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scrollBar&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scrollBarIn&quot;</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> scrollBarIn = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#scrollBarIn&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">var</span> content = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#content&#x27;</span>);</span><br><span class="javascript">            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++)&#123;</span><br><span class="javascript">                content.innerHTML += i + <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript">            <span class="hljs-comment">// 滑槽的高度 / 内容的高度</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> scale = <span class="hljs-built_in">document</span>.documentElement.clientHeight / content.clientHeight;</span><br><span class="javascript">            <span class="hljs-comment">// 滑块的高度</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> scrollBarIn_H = scale * <span class="hljs-built_in">document</span>.documentElement.clientHeight;</span><br><span class="javascript">            scrollBarIn.style.height = scrollBarIn_H + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">            <span class="hljs-comment">// 拖拽 按下滑块之后的操作</span></span><br><span class="javascript">            scrollBarIn.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">                event = event || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                <span class="hljs-keyword">var</span> eleY = scrollBarIn.offsetTop;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-keyword">var</span> startY = event.clientY;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">                    event = event || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> endY = event.clientY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> disY = endY - startY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> lastY = eleY + disY;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastY &gt;= <span class="hljs-built_in">document</span>.documentElement.clientHeight - scrollBarIn.offsetHeight)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-built_in">document</span>.documentElement.clientHeight - scrollBarIn.offsetHeight;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(lastY &lt;= <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    scrollBarIn.style.top = lastY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 滑槽的高度 / 内容的高度 = 滑块滚动距离 / 内容的滚动距离 </span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 滑槽的高度       滑块滚动距离</span></span><br><span class="javascript">                    <span class="hljs-comment">// --------     =  -----------</span></span><br><span class="javascript">                    <span class="hljs-comment">// 内容的高度       内容的滚动距离</span></span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// 内容的滚动距离 = 滑块滚动距离 / scale</span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> content_dis = lastY / scale;</span><br><span class="javascript">                    content.style.top = -content_dis + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-literal">null</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">// 滚轮操作</span></span><br><span class="javascript">            <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">// 判断浏览器</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(event.wheelDelta)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(event.wheelDelta &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript"></span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(event.detail)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(event.detail &gt; <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        flag = <span class="hljs-literal">false</span>;</span><br><span class="javascript">                    &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                        flag = <span class="hljs-literal">true</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">                <span class="hljs-comment">// 向上 滑块的偏移量减小  </span></span><br><span class="javascript">                <span class="hljs-comment">// 向下 滑块的偏移量增大</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> lastY = scrollBarIn.offsetTop - <span class="hljs-number">10</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastY &lt;= <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-number">0</span>;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    scrollBarIn.style.top = lastY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// lastY滑块的滚动距离 </span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> content_dis = lastY / scale;</span><br><span class="javascript"></span><br><span class="javascript">                    content.style.top = -content_dis + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                    <span class="hljs-keyword">var</span> lastY = scrollBarIn.offsetTop + <span class="hljs-number">10</span>;</span><br><span class="javascript">                    <span class="hljs-keyword">if</span>(lastY &gt;= <span class="hljs-built_in">document</span>.documentElement.clientHeight - scrollBarIn.clientHeight)&#123;</span><br><span class="javascript">                        lastY = <span class="hljs-built_in">document</span>.documentElement.clientHeight - scrollBarIn.clientHeight;</span><br><span class="javascript">                    &#125;</span><br><span class="javascript">                    scrollBarIn.style.top = lastY + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">                    <span class="hljs-comment">// </span></span><br><span class="javascript">                    <span class="hljs-keyword">var</span> content_dis = lastY / scale;</span><br><span class="javascript">                    content.style.top = -content_dis + <span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="javascript">                &#125;</span><br><span class="javascript"></span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;mousewheel&#x27;</span>,f1)</span><br><span class="javascript">            <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;DOMMouseScroll&#x27;</span>,f1)</span><br><span class="javascript">       </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 滑槽的高度 / 内容的高度 = 滑块滚动距离 / 内容的滚动距离  --&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h2><p><em><strong>属性的赋值优先级比变量高（连等的情况下）</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 属性的赋值优先级比变量高（连等的情况下）</span><br>        <span class="hljs-keyword">var</span> a = &#123;<br>            <span class="hljs-attr">n</span>: <span class="hljs-number">1</span><br>        &#125;;<br>        <span class="hljs-keyword">var</span> b = a;<br>        a.x = a = &#123;<br>            <span class="hljs-attr">n</span>: <span class="hljs-number">2</span><br>        &#125;;<br>        <span class="hljs-built_in">console</span>.log(a.x); <span class="hljs-comment">// undefined</span><br>        <span class="hljs-built_in">console</span>.log(b.x); <span class="hljs-comment">// &#123;n:2&#125;</span><br><br>        <span class="hljs-keyword">var</span> b1 = &#123;<br>            <span class="hljs-attr">b2</span>: [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>, <span class="hljs-built_in">console</span>.log],<br>            <span class="hljs-attr">b3</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                alert(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(b1, b1.b2, b1.b3) <span class="hljs-comment">// &#123;b2: Array(3), b3: ƒ&#125; [2, &#x27;baidu&#x27;, ƒ] ƒ () &#123; alert(&#x27;hello&#x27;)&#125;</span><br>        <span class="hljs-built_in">console</span>.log(b1 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>, <span class="hljs-keyword">typeof</span> b1) <span class="hljs-comment">// true &#x27;object&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(b1.b2 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>, <span class="hljs-keyword">typeof</span> b1.b2) <span class="hljs-comment">// true &#x27;object&#x27; // true &#x27;function&#x27;</span><br>        <span class="hljs-built_in">console</span>.log(b1.b3 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>, <span class="hljs-keyword">typeof</span> b1.b3) <span class="hljs-comment">// function</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b1.b2[<span class="hljs-number">2</span>]) <span class="hljs-comment">// baidu</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> b1.b2[<span class="hljs-number">2</span>](<span class="hljs-string">&#x27;baidu&#x27;</span>)) <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p><em><strong>当把对象作为属性添加给对象的时候，系统会认为所有的被当做属性的对象都叫object，所以会覆盖</strong></em></p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>        <span class="hljs-keyword">var</span> obj1 = &#123;<br>            <span class="hljs-attr">m</span>: <span class="hljs-number">2</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> obj2 = &#123;<br>            <span class="hljs-attr">n</span>: <span class="hljs-number">2</span><br>        &#125;<br>        <span class="hljs-keyword">var</span> obj3 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;;<br><br>        a[obj1] = <span class="hljs-number">4</span><br>        a[obj2] = <span class="hljs-number">5</span><br>        a.name = <span class="hljs-string">&#x27;kobe&#x27;</span><br>        a[obj3] = <span class="hljs-number">6</span>;<br><br>        <span class="hljs-built_in">console</span>.log(a[obj1]) <span class="hljs-comment">// 5</span><br>        <span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">// &#123;[object Object]: 5, name: &#x27;kobe&#x27;, function() &#123;&#125;: 6&#125;</span><br><br>        <span class="hljs-keyword">var</span> a = &#123;&#125;;<br>        a.b = <span class="hljs-number">1</span>;<br>        a.b = <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">console</span>.log(a.b); <span class="hljs-comment">// 2</span><br></code></pre></div></td></tr></table></figure><h3 id="面向对象（原型继承、构造函数继承、组合继承）"><a href="#面向对象（原型继承、构造函数继承、组合继承）" class="headerlink" title="面向对象（原型继承、构造函数继承、组合继承）"></a>面向对象（原型继承、构造函数继承、组合继承）</h3><p>面向对象三大特性：封装继承多态</p><ul><li>原型继承<ul><li>让父类的实例作为子类的原型，将子类的原型构造器补充完整 （为了让子类继承方法）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>            <span class="hljs-comment">//父类</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>            &#125;<br><br>            <span class="hljs-comment">//子类</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teddy</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>            &#125;<br><br>            Dog.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑的很快~&#x27;</span>);<br>            &#125;<br>            <span class="hljs-comment">//为了让子类去继承父类原型当中的方法</span><br>            <span class="hljs-comment">//我们需要用到原型继承，原型继承主要就是为了让子类继承方法使用的</span><br>            <span class="hljs-comment">//让子类的原型变成父类的一个实例</span><br>            Teddy.prototype = <span class="hljs-keyword">new</span> Dog();<br>            <span class="hljs-comment">// 手动给原型对象添加一个构造器，因为原型对象里面都是有构造器的，指向和自己匹配的构造函数</span><br>            Teddy.prototype.constructor = Teddy;<br><br>            <span class="hljs-keyword">var</span> d1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>,<span class="hljs-number">3</span>);<br>            d1.run();<br><br>            <span class="hljs-keyword">var</span> t1 = <span class="hljs-keyword">new</span> Teddy(<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-number">2</span>);<br>            t1.run(<span class="hljs-number">10</span>);<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><ul><li>借用构造函数继承<ul><li>在子类当中去调用父类的构造函数（为了让子类继承属性）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>            <span class="hljs-comment">//父类</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>            &#125;<br><br>            <span class="hljs-comment">//子类</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teddy</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br><span class="hljs-comment">//                this.name = name;</span><br><span class="hljs-comment">//                this.age = age;</span><br>                <span class="hljs-comment">//借助父类的构造函数实现属性的继承</span><br>                Dog.call(<span class="hljs-built_in">this</span>,name,age);<br>            &#125;<br><br>            Dog.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑的很快~&#x27;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//为了让子类去继承父类原型当中的方法</span><br>            <span class="hljs-comment">//我们需要用到原型继承，原型继承主要就是为了让子类继承方法使用的</span><br>            <span class="hljs-comment">//让子类的原型变成父类的一个实例</span><br>            Teddy.prototype = <span class="hljs-keyword">new</span> Dog();<br>            <span class="hljs-comment">//手动给原型对象添加一个构造器，因为原型对象里面都是有构造器的，指向和自己匹配的构造函数</span><br>            Teddy.prototype.constructor = Teddy;<br><br><br>            <span class="hljs-keyword">var</span> d1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>,<span class="hljs-number">3</span>);<br>            d1.run();<br><br>            <span class="hljs-keyword">var</span> t1 = <span class="hljs-keyword">new</span> Teddy(<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-number">2</span>);<br>            t1.run(<span class="hljs-number">10</span>);<br><br>            <span class="hljs-built_in">console</span>.log(t1);    <br>        &lt;/script&gt;<br></code></pre></div></td></tr></table></figure><ul><li><p>组合继承</p><ul><li>原型继承方法，借用构造函数继承属性一起使用</li></ul></li><li><p>方法重写和方法重载（多态的表现形式）</p></li></ul><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//父类</span></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Dog</span>(<span class="hljs-params">name,age</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.name = name;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//子类</span></span><br><span class="javascript">            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teddy</span>(<span class="hljs-params">name,age</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//                this.name = name;</span></span><br><span class="javascript"><span class="hljs-comment">//                this.age = age;</span></span><br><span class="javascript">                <span class="hljs-comment">//借助父类的构造函数实现属性的继承</span></span><br><span class="javascript">                Dog.call(<span class="hljs-built_in">this</span>,name,age);</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            Dog.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑的很快~&#x27;</span>);</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//为了让子类去继承父类原型当中的方法</span></span><br><span class="javascript">            <span class="hljs-comment">//我们需要用到原型继承，原型继承主要就是为了让子类继承方法使用的</span></span><br><span class="javascript">            <span class="hljs-comment">//让子类的原型变成父类的一个实例</span></span><br><span class="javascript">            <span class="hljs-comment">//手动给原型对象添加一个构造器，因为原型对象里面都是有构造器的，指向和自己匹配的构造函数</span></span><br><span class="javascript">            Teddy.prototype = <span class="hljs-keyword">new</span> Dog();</span><br><span class="javascript">            Teddy.prototype.constructor = Teddy;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//方法重写和方法重载   是多态的两个表现形式</span></span><br><span class="javascript">            <span class="hljs-comment">//方法重写；和父类同名方法功能不同，被称作方法重写</span></span><br><span class="javascript">            Teddy.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">flag</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-comment">//方法重载</span></span><br><span class="javascript">                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> flag === <span class="hljs-string">&#x27;number&#x27;</span>)&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑的很慢~&#x27;</span>);</span><br><span class="javascript">                &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;跑的很快~&#x27;</span>);</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> d1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>,<span class="hljs-number">3</span>);</span><br><span class="javascript">            d1.run();</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> t1 = <span class="hljs-keyword">new</span> Teddy(<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-number">2</span>);</span><br><span class="javascript">            t1.run(<span class="hljs-number">10</span>);</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(t1);</span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="web-Workers"><a href="#web-Workers" class="headerlink" title="web Workers"></a>web Workers</h3><ul><li><p>H5规范提供了js分线程的实现, 取名为: Web Workers</p></li><li><p>相关API</p><ul><li><p>Worker: 构造函数, 加载分线程执行的js文件</p></li><li><p>Worker.prototype.onmessage: 用于接收另一个线程的回调函数</p></li><li><p>Worker.prototype.postMessage: 向另一个线程发送消息</p></li><li><p>每个线程可以向不同线程发送消息  也可以接收不同线程传来的消息</p></li><li><p>主线程操作</p><ul><li><p>发送消息：   worker.postMessage(消息可以是任何数据)</p></li><li><p>接受消息：   worker.onmessage = function(e){</p><p>​                console.log(e.data)//接收到的消息或者数据在事件对象的data属性当中</p><p>​            }</p></li></ul></li><li><p>子线程操作</p><ul><li><p>发送消息：   worker.postMessage(消息可以是任何数据)</p></li><li><p>接受消息：   worker.onmessage = function(e){</p><p>​                console.log(e.data)//接收到的消息或者数据在事件对象的data属性当中</p><p>​            }</p></li></ul></li></ul></li><li><p>不足</p><ul><li>worker内代码不能操作DOM</li><li>不能跨域加载JS</li><li>不是每个浏览器都支持这个新特性</li></ul></li><li><p>计算得到fibonacci数列中第n个数的值</p><ul><li>在主线程计算: 当位数较大时, 会阻塞主线程, 导致界面卡死</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fib(n- <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>在分线程计算: 不会阻塞主线程</li></ul><p>js代码-myThread.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fib</span>(<span class="hljs-params">n</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fib(n- <span class="hljs-number">1</span>) + fib(n - <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>self.onmessage = function(e){</p><div class="hljs code-wrapper"><pre><code>e = e || window.event;</code></pre></div><p>//    console.log(e.data);//就 可以拿到主线程给我 发过来的消息内容</p><div class="hljs code-wrapper"><pre><code>var result = fib(e.data);self.postMessage(result);//分线程接受到主线程的消息，然后开始计算，把计算后的记过发消息再给主线程</code></pre></div><p>}</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">html代码<br><br>```js<br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">            <span class="hljs-comment">//第一步：实例化一个对象，初始化主线程和分线程关联对象</span></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&#x27;./myThread.js&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">            worker.postMessage(<span class="hljs-number">100</span>);<span class="hljs-comment">//主线程发送消息给分线程,消息内容可以是任意类型</span></span><br><span class="javascript"></span><br><span class="javascript">            worker.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">                e = e || <span class="hljs-built_in">window</span>.event;</span><br><span class="javascript">                <span class="hljs-comment">//等待接受分线程计算完的结果</span></span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(e.data);</span><br><span class="javascript">            &#125;</span><br><span class="javascript"></span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大哥 js Ending~&#x27;</span>);</span><br><span class="javascript"></span><br><span class="javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="Object-扩展方法"><a href="#Object-扩展方法" class="headerlink" title="Object 扩展方法"></a>Object 扩展方法</h2><h3 id="Object-create-prototype-descriptors"><a href="#Object-create-prototype-descriptors" class="headerlink" title="Object.create(prototype, [descriptors])"></a>Object.create(prototype, [descriptors])</h3><p>Object.create 方法可以以指定对象为原型创建新的对象，同时可以为新的对象设置属性, 并对属性进行描述</p><ul><li>value : 指定值</li><li>writable : 标识当前属性值是否是可修改的, 默认为 false</li><li>configurable：标识当前属性是否可以被删除 默认为 false</li><li>enumerable：标识当前属性是否能用for in 枚举 默认为 false</li><li>get:   当获取当前属性时的回调函数</li><li>set:   当设置当前属性时</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//创建一个汽车的对象</span><br><span class="hljs-keyword">var</span> car = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&#x27;汽车&#x27;</span>,<br>    <span class="hljs-attr">run</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我可以行驶！！&#x27;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//以 car 为原型对象创建新对象</span><br><span class="hljs-keyword">var</span> aodi = <span class="hljs-built_in">Object</span>.create(car, &#123;<br>    <span class="hljs-attr">brand</span>: &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;奥迪&#x27;</span>,<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,         <span class="hljs-comment">//是否可修改</span><br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,     <span class="hljs-comment">//是否可以删除</span><br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>         <span class="hljs-comment">//是否可以使用 for...in 遍历</span><br>    &#125;,<br>    <span class="hljs-attr">color</span>: &#123;<br>        <span class="hljs-attr">value</span> : <span class="hljs-string">&#x27;黑色&#x27;</span>,<br>        <span class="hljs-attr">wriable</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;);<br></code></pre></div></td></tr></table></figure><h3 id="Object-defineProperties-object-descriptors"><a href="#Object-defineProperties-object-descriptors" class="headerlink" title="Object.defineProperties(object, descriptors)"></a>Object.defineProperties(object, descriptors)</h3><p>直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p><ul><li>object     要操作的对象</li><li>descriptors     属性描述<ul><li>get  作为该属性的 getter 函数，如果没有 getter 则为undefined。函数返回值将被用作属性的值。</li><li>set  作为属性的 setter 函数，如果没有 setter 则为undefined。函数将仅接受参数赋值给该属性的新值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 定义对象</span><br><span class="hljs-keyword">var</span> star = &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;刘&#x27;</span>,<br>    <span class="hljs-attr">lastName</span> : <span class="hljs-string">&#x27;德华&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// 为 star 定义额外的属性</span><br><span class="hljs-built_in">Object</span>.defineProperties(star, &#123;<br>    <span class="hljs-attr">fullName</span>: &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-built_in">this</span>.lastName;<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>&#123;<br>            <span class="hljs-keyword">var</span> res = name.split(<span class="hljs-string">&#x27;-&#x27;</span>);<br>            <span class="hljs-built_in">this</span>.firstName = res[<span class="hljs-number">0</span>];<br>            <span class="hljs-built_in">this</span>.lastName = res[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">// 修改 fullName 属性值</span><br>star.fullName = <span class="hljs-string">&#x27;张-学友&#x27;</span>;<br><br><span class="hljs-comment">// 打印属性</span><br><span class="hljs-built_in">console</span>.log(star.fullName);<br></code></pre></div></td></tr></table></figure><h2 id="引用数据类型的计算-1"><a href="#引用数据类型的计算-1" class="headerlink" title="引用数据类型的计算"></a>引用数据类型的计算</h2><p><strong>第一步：调用valueOf这个方法,如果这个方法可以返回基本值,就使用基本值参与运算</strong></p><p><strong>第二步：如果不返回基本值,调用toString()方法，然后遵循基本数据类型的运算规则去运算</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + []); <span class="hljs-comment">// 1</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>]); <span class="hljs-comment">// 12,4,6</span><br><br>        <span class="hljs-built_in">console</span>.log([].valueOf()); <span class="hljs-comment">// </span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>].valueOf()); <span class="hljs-comment">// 2,4,6</span><br><br>        <span class="hljs-built_in">console</span>.log([].toString()); <span class="hljs-comment">// &#x27;&#x27;</span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>].toString()); <span class="hljs-comment">// 2,4,6</span><br><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + &#123;&#125;); <span class="hljs-comment">// 1[object Object]</span><br>        <span class="hljs-built_in">console</span>.log(&#123;&#125;.toString()) <span class="hljs-comment">// [object Object]</span><br><br>        <span class="hljs-keyword">var</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-number">111</span>)<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> + fn); <span class="hljs-comment">// 1function() &#123;console.log(111)&#125;</span><br>        <span class="hljs-built_in">console</span>.log(fn.toString()); <span class="hljs-comment">// function() &#123;console.log(111)&#125;</span><br>        <span class="hljs-built_in">console</span>.log([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>] + &#123;<br>                    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span><br>                &#125;); <span class="hljs-comment">// 2,3[object Object]</span><br></code></pre></div></td></tr></table></figure><blockquote><p><em><strong>注意：!![] 的结果是true</strong></em></p></blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(!![]); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="let声明的特点"><a href="#let声明的特点" class="headerlink" title="let声明的特点"></a>let声明的特点</h3><ul><li><p>不允许重复声明</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> a = <span class="hljs-number">20</span>; <span class="hljs-comment">// 报错</span><br></code></pre></div></td></tr></table></figure></li><li><p>块儿级作用域（以大括号分割）</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> items = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;.item&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) &#123;<br>             items[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                 items[i].style.backgroundColor = <span class="hljs-string">&quot;pink&quot;</span>;<br>             &#125;<br>            items[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">this</span>.style.backgroundColor = <span class="hljs-string">&quot;pink&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-comment">// 如果使用var声明的话则不会形成几个块级作用域，故点击不会变色</span><br></code></pre></div></td></tr></table></figure></li><li><p>使用let声明时不会变量提升</p></li></ul><h3 id="const声明的特点"><a href="#const声明的特点" class="headerlink" title="const声明的特点"></a>const声明的特点</h3><ul><li>const用来声明常量（值不可变）</li><li>const声明的常量名一般全大写</li><li>const声明时必须赋初始值</li><li>不允许重复声明</li><li>块儿级作用域（以大括号分割）</li><li>const声明的引用数据类型不影响其属性或方法的修改，故<em><strong>一般使用let声明基础数据类型，使用const声明引用数据类型</strong></em></li></ul><h3 id="箭头函数的特点"><a href="#箭头函数的特点" class="headerlink" title="箭头函数的特点"></a>箭头函数的特点</h3><ul><li><p>箭头函数里没有this，指的是外层的this</p></li><li><p>不能作为构造函数使用</p></li><li><p>不能使用arguments（使用rest参数代替），因为没有prototype</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> add = <span class="hljs-function">(<span class="hljs-params">...arr</span>) =&gt;</span> arr[<span class="hljs-number">0</span>] + arr[<span class="hljs-number">1</span>];<br><span class="hljs-built_in">console</span>.log(  add(<span class="hljs-number">4</span>, <span class="hljs-number">7</span>)  );<br></code></pre></div></td></tr></table></figure></li><li><p>定时器 setTimeout setInterval, 数组方法回调等与this无关的回调就适合使用箭头函数</p></li><li><p>dom元素的事件绑定, 对象中的方法等与this相关的回调就不适合使用箭头函数（需要使用外层this时除外）</p></li></ul><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call-apply-bind"></a>call-apply-bind</h3><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol唯一且合理的使用场景,给对象设置属性，Symbol给对象设置属性,让这个属性变成对象中唯一的存在</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> sym = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;up&#x27;</span>);<br><span class="hljs-keyword">let</span> game = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;坦克大战&quot;</span>,<br>  [sym]: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;up 方法&quot;</span>)<br>  &#125;<br>&#125;<br><span class="hljs-built_in">console</span>.log(game);<br><br>game[sym]();<br></code></pre></div></td></tr></table></figure><p>Symbol内置属性</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>            <span class="hljs-comment">// 提供的11个内置值,我们可以自己设置方法</span><br>            <span class="hljs-comment">// 这些方法有一个统一的名字,叫 魔术方法</span><br>            <span class="hljs-comment">// 在特定的环境下会自动执行</span><br>            [<span class="hljs-built_in">Symbol</span>.match]: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;执行了该对象的 Symbol.match 方法&quot;</span>);<br>            &#125;<br>        &#125;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;13656568989&quot;</span>;<br><span class="hljs-built_in">console</span>.log( str.match(<span class="hljs-regexp">/8989/</span>) );<br>str.match(obj);<br></code></pre></div></td></tr></table></figure><h3 id="自定义iterator迭代器遍历对象"><a href="#自定义iterator迭代器遍历对象" class="headerlink" title="自定义iterator迭代器遍历对象"></a>自定义iterator迭代器遍历对象</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> team = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;德云社&#x27;</span>,<br>            <span class="hljs-attr">members</span>: [<br>                <span class="hljs-string">&#x27;郭麒麟&#x27;</span>,<br>                <span class="hljs-string">&#x27;岳云鹏&#x27;</span>,<br>                <span class="hljs-string">&#x27;孙越&#x27;</span>,<br>                <span class="hljs-string">&#x27;阎鹤祥&#x27;</span><br>            ],<br>            [<span class="hljs-built_in">Symbol</span>.iterator]: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                        <span class="hljs-keyword">let</span> result = &#123; <span class="hljs-attr">value</span>: <span class="hljs-built_in">this</span>.members[index++] &#125;;<br>                        <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-built_in">this</span>.members.length) &#123;<br>                            result.done = <span class="hljs-literal">true</span>;<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            result.done = <span class="hljs-literal">false</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span> result<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="hljs-built_in">console</span>.log(team);<br><span class="hljs-built_in">console</span>.log(team[<span class="hljs-built_in">Symbol</span>.iterator]);<br></code></pre></div></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 声明集合</span><br><span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><span class="hljs-built_in">console</span>.log(s1)<br><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>]);<br><span class="hljs-built_in">console</span>.log(s2)<br><br><span class="hljs-comment">//1. 元素个数</span><br><span class="hljs-built_in">console</span>.log(s2.size)<br><span class="hljs-comment">//2. 添加</span><br>s2.add(<span class="hljs-number">8</span>);<br><span class="hljs-built_in">console</span>.log(s2);<br><span class="hljs-comment">//3. 删除</span><br>s2.delete(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(s2);<br><br><span class="hljs-comment">//4. 检测集合中是否包含某个元素</span><br><span class="hljs-built_in">console</span>.log( s2.has(<span class="hljs-number">7</span>) )<br><span class="hljs-built_in">console</span>.log( s2.has(<span class="hljs-number">6</span>) )<br><br><span class="hljs-comment">//5. 清空</span><br><span class="hljs-comment">// s2.clear();</span><br><span class="hljs-comment">// console.log(s2);</span><br><br><span class="hljs-comment">//6. for...of 遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> s2) &#123;<br><span class="hljs-built_in">console</span>.log(v);<br>&#125;<br><br><span class="hljs-comment">//7. 扩展运算符  ... 可以展开实现了 iterator 接口的数据</span><br><span class="hljs-keyword">let</span> arr = [...s2];<br><span class="hljs-built_in">console</span>.log(arr);<br><br><span class="hljs-comment">// keys()遍历键名，values()遍历键值，entries()遍历键值对</span><br><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.keys()) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br><br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.values()) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br><br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.entries()) &#123;<br>  <span class="hljs-built_in">console</span>.log(item);<br>&#125;<br><br><span class="hljs-comment">// Array [ &quot;red&quot;, &quot;red&quot; ]</span><br><span class="hljs-comment">// Array [ &quot;green&quot;, &quot;green&quot; ]</span><br><span class="hljs-comment">// Array [ &quot;blue&quot;, &quot;blue&quot; ]</span><br></code></pre></div></td></tr></table></figure><h3 id="Set和Array结合使用"><a href="#Set和Array结合使用" class="headerlink" title="Set和Array结合使用"></a>Set和Array结合使用</h3><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;大事儿&#x27;</span>,<span class="hljs-string">&#x27;小事儿&#x27;</span>,<span class="hljs-string">&#x27;好事儿&#x27;</span>,<span class="hljs-string">&#x27;坏事儿&#x27;</span>,<span class="hljs-string">&#x27;小事儿&#x27;</span>];<br><span class="hljs-keyword">let</span> s = [...new <span class="hljs-built_in">Set</span>(arr)];<br><span class="hljs-built_in">console</span>.log(s);<br></code></pre></div></td></tr></table></figure><p>字符串去重</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">[...new <span class="hljs-built_in">Set</span>(<span class="hljs-string">&#x27;ababbc&#x27;</span>)].join(<span class="hljs-string">&#x27;&#x27;</span>);   <span class="hljs-comment">// &quot;abc&quot;</span><br></code></pre></div></td></tr></table></figure><p>求交集</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> result = [...new <span class="hljs-built_in">Set</span>(arr)].filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> [...new <span class="hljs-built_in">Set</span>(arr2)].includes(item));<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></div></td></tr></table></figure><p>求并集</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> result = [ ...new <span class="hljs-built_in">Set</span>([...arr, ...arr2]) ];<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></div></td></tr></table></figure><p>求差集</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> result = [...new <span class="hljs-built_in">Set</span>(arr)].filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> ![...new <span class="hljs-built_in">Set</span>(arr2)].includes(item));<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></div></td></tr></table></figure><h3 id="Set和Array的区别"><a href="#Set和Array的区别" class="headerlink" title="Set和Array的区别"></a>Set和Array的区别</h3><ol><li>Set是无序的，速度快，Array是有序的，速度慢</li><li>Set不可重复，Array可重复</li></ol><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 声明 Map</span><br><span class="hljs-keyword">let</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><span class="hljs-built_in">console</span>.log(m1); <span class="hljs-comment">// &#123;size: 0&#125;</span><br><br><span class="hljs-keyword">let</span> m2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([<br>[<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>],<br>[<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>]<br>]);<br><span class="hljs-built_in">console</span>.log(m2); <span class="hljs-comment">// &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;, &#x27;age&#x27; =&gt; 18&#125;</span><br><br><span class="hljs-comment">// 获取元素</span><br><span class="hljs-built_in">console</span>.log(m2.get(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// 张三</span><br><br><span class="hljs-comment">// 设置</span><br>m2.set(<span class="hljs-string">&#x27;sex&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>m2.set(arr, <span class="hljs-string">&quot;未知&quot;</span>)<br><span class="hljs-built_in">console</span>.log(m2) <span class="hljs-comment">// &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;, &#x27;age&#x27; =&gt; 18, &#x27;sex&#x27; =&gt; &#x27;男&#x27;, Array(3) =&gt; &#x27;未知&#x27;&#125;</span><br><br><span class="hljs-built_in">console</span>.log(m2.get(arr)) <span class="hljs-comment">// 未知</span><br><br><span class="hljs-comment">// 删除元素</span><br>m2.delete(<span class="hljs-string">&#x27;sex&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(m2); <span class="hljs-comment">// &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;, &#x27;age&#x27; =&gt; 18, Array(3) =&gt; &#x27;未知&#x27;&#125;</span><br><br><span class="hljs-comment">// 检测</span><br><span class="hljs-built_in">console</span>.log(m2.has(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 元素个数</span><br><span class="hljs-built_in">console</span>.log(m2.size); <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 清空</span><br><span class="hljs-comment">// m2.clear()</span><br><span class="hljs-comment">// console.log(m2);</span><br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> v <span class="hljs-keyword">of</span> m2) &#123;<br><span class="hljs-built_in">console</span>.log(v, <span class="hljs-keyword">typeof</span> v, v <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>)<br>&#125;<br><span class="hljs-comment">// [&#x27;name&#x27;, &#x27;张三&#x27;] &#x27;object&#x27; true</span><br><span class="hljs-comment">// [&#x27;age&#x27;, 18] &#x27;object&#x27; true</span><br><span class="hljs-comment">// [Array(3), &#x27;未知&#x27;] &#x27;object&#x27; true</span><br></code></pre></div></td></tr></table></figure><h3 id="Map和Object的区别"><a href="#Map和Object的区别" class="headerlink" title="Map和Object的区别"></a>Map和Object的区别</h3><ol><li>Map本质上为二维数组构造，所以Map中的键值是有序的（FIFO），而Object中的键是无序的</li><li>Map的键可以是任意的数据类型，包括基本的数据类型，对象以及函数，而Object只允许使用symbol以及string</li><li>Map中的键值个数可以从size属性中获取，而Object中的键值需要手动计算(Object.keys(obj).length)</li><li>map是干净的，只含有显示插入的键，而Object上会有原型上的属性以及方法，es5之后可以说使用Object.create(null)来创建一个干净的对象(vuex源码中大量使用)</li><li>Map是可迭代的，Object没有实现迭代协议，所以无法被for…of直接迭代（但可以自行实现迭代协议，或者使用<code>Object.keys()</code>或<code>Object.entries()</code>来迭代对象的键值和实体，for…in也可以迭代Object的可枚举属性）</li><li>Map频繁增减键值对时表现会更好，Object频繁增减键值对时表现较差。</li></ol><h3 id="对象继承"><a href="#对象继承" class="headerlink" title="对象继承"></a>对象继承</h3><h4 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Phone</span>(<span class="hljs-params">brand, price</span>) </span>&#123;<br>        <span class="hljs-built_in">this</span>.brand = brand;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    Phone.prototype.call = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Phone 打电话&#x27;</span>)<br>    &#125;<br>    Phone.prototype.sendMessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Phone 发短信&#x27;</span>)<br>    &#125;<br><br>    <span class="hljs-comment">// 继承 - 属性继承 方法继承</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SmartPhone</span>(<span class="hljs-params">brand, price, screen, pixel</span>) </span>&#123;<br>        <span class="hljs-comment">// 继承父类的属性</span><br>        Phone.call(<span class="hljs-built_in">this</span>, brand, price);<br>        <span class="hljs-comment">// 子类自己的的属性</span><br>        <span class="hljs-built_in">this</span>.screen = screen;<br>        <span class="hljs-built_in">this</span>.pixel = pixel;<br>    &#125;<br>    <span class="hljs-comment">// 继承方法</span><br>    SmartPhone.prototype = <span class="hljs-keyword">new</span> Phone();<br>    <span class="hljs-comment">// 修正 constructor</span><br>    SmartPhone.prototype.constructor = SmartPhone;<br>    <span class="hljs-comment">// 书写子类自己的方法</span><br>    SmartPhone.prototype.watchVideo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;看视频&quot;</span>)<br>    &#125;<br>    SmartPhone.prototype.playGame = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;玩游戏&quot;</span>)<br>    &#125;<br></code></pre></div></td></tr></table></figure><h4 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand, price</span>)</span> &#123;<br>            <span class="hljs-built_in">this</span>.brand = brand;<br>            <span class="hljs-built_in">this</span>.price = price;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;打电话&#x27;</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;发短信&#x27;</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 继承</span><br>    <span class="hljs-comment">// extends Phone 继承完成了第一步,把原型对象上的方法继承下来</span><br>    <span class="hljs-comment">// super(brand, price) 继承第二步,把属性继承下来</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span>  </span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand, price, screen, pixel</span>)</span> &#123;<br>            <span class="hljs-comment">// 继承属性</span><br>            <span class="hljs-comment">// super 调用父类的构造器</span><br>            <span class="hljs-built_in">super</span>(brand, price); <span class="hljs-comment">// 继承父类的属性</span><br>            <span class="hljs-comment">// 子类自己的属性</span><br>            <span class="hljs-built_in">this</span>.screen = screen;<br>            <span class="hljs-built_in">this</span>.pixel = pixel;<br>        &#125;<br>        <span class="hljs-comment">// 子类自己原型对象上的方法</span><br>        <span class="hljs-function"><span class="hljs-title">watchVideo</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;看视频&#x27;</span>)<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">playGame</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;玩游戏&#x27;</span>)<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><h4 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">//1. 二进制和八进制和十六进制</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">0b010101</span>; <span class="hljs-comment">// 0b 二进制的标识</span><br>    <span class="hljs-built_in">console</span>.log(a);<br>    <span class="hljs-keyword">let</span> b = <span class="hljs-number">0o13</span>; <span class="hljs-comment">// 0o 八进制的标识</span><br>    <span class="hljs-built_in">console</span>.log(b);<br>    <span class="hljs-keyword">let</span> c = <span class="hljs-number">0x12</span>; <span class="hljs-comment">// 0x 十六进制的标识</span><br>    <span class="hljs-built_in">console</span>.log(c);<br><br>    <span class="hljs-comment">//2. Number.isFinite  检测一个数值是否为有限数</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-number">123</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-literal">Infinity</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isFinite(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">// 遇到字符串直接返回false</span><br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isFinite</span>(<span class="hljs-number">123</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isFinite</span>(<span class="hljs-literal">Infinity</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isFinite</span>(<span class="hljs-string">&#x27;123&#x27;</span>)); <span class="hljs-comment">// window下的isFinite,会发生隐式转换</span><br><br>    <span class="hljs-comment">//3. Number.isNaN 检测一个数值是否为NaN</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-literal">NaN</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-number">123</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.isNaN(<span class="hljs-string">&#x27;123&#x27;</span>));<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">NaN</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">123</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;123&#x27;</span>));<br><br>    <span class="hljs-comment">//4. Number.parseInt 字符串转整数</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt(<span class="hljs-number">12.5</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt(<span class="hljs-string">&#x27;12.5&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt(<span class="hljs-string">&#x27;12.5abc&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>.parseInt(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-number">12.5</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;12.5&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;12.5abc&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;abc&#x27;</span>));<br><br><br>    <span class="hljs-comment">//5. Math.trunc 将数字的小数部分抹掉</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-number">3.9</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-string">&#x27;3.9&#x27;</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.trunc(<span class="hljs-string">&#x27;3.9abc&#x27;</span>)); <span class="hljs-comment">// NaN</span><br><br><br>    <span class="hljs-comment">//7. 幂运算 ** (ES7)</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">6</span>));<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> ** <span class="hljs-number">6</span>);<br></code></pre></div></td></tr></table></figure><h4 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 1. 判断两个值是否完全相等 ===</span><br>    <span class="hljs-comment">// Object.is(v1, v2) 不会强制转换两边的值</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span> === <span class="hljs-number">1</span>); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-literal">NaN</span> === <span class="hljs-literal">NaN</span>); <span class="hljs-comment">// false</span><br>    <span class="hljs-built_in">console</span>.log([] === []); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// console.log(&#x27;----------------------------&#x27;)</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.is(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.is(<span class="hljs-literal">NaN</span>, <span class="hljs-literal">NaN</span>)); <span class="hljs-comment">//true 唯独NaN不一样,为什么呢?</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.is([], [])); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// console.log(&#x27;----------------------------&#x27;)</span><br>    <span class="hljs-built_in">console</span>.log(+<span class="hljs-number">0</span> === -<span class="hljs-number">0</span>); <span class="hljs-comment">// true</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Object</span>.is(+<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>)); <span class="hljs-comment">// false</span><br><br>    <span class="hljs-comment">// Object.is()的判断规则</span><br>    <span class="hljs-comment">// 1.都是 undefined</span><br>    <span class="hljs-comment">// 2.都是 null</span><br>    <span class="hljs-comment">// 3.都是 true 或 false</span><br>    <span class="hljs-comment">// 4.都是相同长度的字符串且相同字符按相同顺序排列</span><br>    <span class="hljs-comment">// 5.都是相同对象（意味着每个对象有同一个引用）</span><br>    <span class="hljs-comment">// 6.都是 +0</span><br>    <span class="hljs-comment">// 7.都是 -0</span><br>    <span class="hljs-comment">// 8.都是 NaN</span><br>    <span class="hljs-comment">// 9.都是非零而且非 NaN 且为同一个数值</span><br><br>    <span class="hljs-comment">// 2. Object.assign  -&gt; 注意: 并没有产生一个新的对象</span><br>    <span class="hljs-comment">// 功能:用于合并对象,从参数二开始的对象都往参数一对象上合并</span><br>    <span class="hljs-comment">//      如果有相同属性的话,后面参数会覆盖前面的对象的属性</span><br>    <span class="hljs-comment">// 参数: 至少一个</span><br>    <span class="hljs-comment">//      参数一: 对象</span><br>    <span class="hljs-comment">//      参数二: 对象</span><br>    <span class="hljs-comment">//      ....</span><br>    <span class="hljs-comment">// 返回值: 参数一的对象</span><br>    <span class="hljs-keyword">let</span> obj1 = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> obj2 = &#123;<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李四&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Object</span>.assign(obj1, obj2, &#123;<br>        <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;王五&quot;</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">170</span><br>    &#125;);<br>    <span class="hljs-built_in">console</span>.log(result); <span class="hljs-comment">// &#123;name: &#x27;王五&#x27;, age: 18, sex: &#x27;男&#x27;, height: 170&#125;</span><br>    <span class="hljs-built_in">console</span>.log(obj1) <span class="hljs-comment">// &#123;name: &#x27;王五&#x27;, age: 18, sex: &#x27;男&#x27;, height: 170&#125;</span><br>    <span class="hljs-built_in">console</span>.log(result === obj1); <span class="hljs-comment">// true</span><br></code></pre></div></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>原有的全局方法在比较时会做隐式类型转换，如isNaN()、isFinite()等</p><p>ES6新增的方法挂载在原型对象上，不会做类型转换，因此更加准确，如Number.isNaN()、Number.isFinite()等</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝数组</span><br><span class="hljs-comment">// 1&gt; concat([]) 方法 拷贝数组</span><br><span class="hljs-keyword">let</span> arr2 = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span> &#125;, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>];<br>    <span class="hljs-keyword">let</span> result = arr2.concat([]);<br>    <span class="hljs-built_in">console</span>.log(result);<br>    <span class="hljs-built_in">console</span>.log(arr2 === result);<br>    <span class="hljs-built_in">console</span>.log(arr2[<span class="hljs-number">0</span>] === result[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 这里只拷贝了数组,数组中的元素如果是引用数据类型则没有拷贝</span><br><br>    <span class="hljs-comment">// 2&gt; slice(0) 从下标为0的位置开始裁剪,返回一个新数组  ---&gt;  完成拷贝</span><br>    <span class="hljs-keyword">let</span> result1 = arr2.slice(<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">console</span>.log(result1);<br>    <span class="hljs-built_in">console</span>.log(result1 === arr2);<br>    <span class="hljs-built_in">console</span>.log(result1[<span class="hljs-number">0</span>] === arr2[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 这里只拷贝了数组,数组中的元素如果是引用数据类型则没有拷贝</span><br><br>    <span class="hljs-comment">// // 3&gt; 扩展运算符</span><br>    <span class="hljs-keyword">let</span> result2 = [ ...arr2 ];<br>    <span class="hljs-built_in">console</span>.log(result2);<br>    <span class="hljs-built_in">console</span>.log(result2 === arr2);<br>    <span class="hljs-built_in">console</span>.log(result2[<span class="hljs-number">0</span>] === arr2[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 这里只拷贝了数组,数组中的元素如果是引用数据类型则没有拷贝</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 浅拷贝对象</span><br>    <span class="hljs-keyword">let</span> obj = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;高圆圆&quot;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>        <span class="hljs-attr">movies</span>: [<span class="hljs-string">&quot;倚天屠龙记&quot;</span>, <span class="hljs-string">&quot;我们结婚吧&quot;</span>, <span class="hljs-string">&quot;盲探&quot;</span>]<br>    &#125;<br><br>    <span class="hljs-comment">// 1&gt; 扩展运算符</span><br>    <span class="hljs-keyword">let</span> result1 = &#123;...obj<br>    &#125;;<br>    <span class="hljs-built_in">console</span>.log(result1)<br>    <span class="hljs-built_in">console</span>.log(result1 === obj);<br>    <span class="hljs-built_in">console</span>.log(obj.movies === result1.movies); <span class="hljs-comment">// 只拷贝了第一层</span><br><br>    <span class="hljs-comment">// 2&gt; Object.assign()</span><br>    <span class="hljs-keyword">let</span> result2 = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, obj)<br>    <span class="hljs-built_in">console</span>.log(result2);<br>    <span class="hljs-built_in">console</span>.log(result2 === obj);<br>    <span class="hljs-built_in">console</span>.log(obj.movies === result2.movies); <span class="hljs-comment">// 只拷贝了第一层</span><br></code></pre></div></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="json深拷贝（不会拷贝函数、Symbol和undefined）"><a href="#json深拷贝（不会拷贝函数、Symbol和undefined）" class="headerlink" title="json深拷贝（不会拷贝函数、Symbol和undefined）"></a>json深拷贝（不会拷贝函数、Symbol和undefined）</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> at = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span>,<br>            <span class="hljs-attr">pos</span>: [<span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-string">&#x27;五&#x27;</span>],<br>            <span class="hljs-function"><span class="hljs-title">improve</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;提升&quot;</span>)<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">console</span>.log(at);<br><br>        <span class="hljs-comment">// 把 js对象 转成一个 json格式 的字符串</span><br>        <span class="hljs-keyword">let</span> atJson = <span class="hljs-built_in">JSON</span>.stringify(at);<br>        <span class="hljs-built_in">console</span>.log(atJson);<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> atJson);<br><br>        <span class="hljs-comment">// 将 json字符串 转成一个 js对象</span><br>        <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">JSON</span>.parse(atJson);<br>        <span class="hljs-built_in">console</span>.log(result);<br></code></pre></div></td></tr></table></figure><h4 id="递归实现深拷贝"><a href="#递归实现深拷贝" class="headerlink" title="递归实现深拷贝"></a>递归实现深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 深拷贝思路总结:</span><br><span class="hljs-comment">// 把对象中所有的属性一个一个的去拷贝</span><br><span class="hljs-comment">// 如果是基本数据类型,直接赋值进行拷贝</span><br><span class="hljs-comment">// 如果不是基本数据类型,区分细化</span><br><span class="hljs-comment">// 如果是数组,新建一个数组</span><br><span class="hljs-comment">//  数组中成员是基本数据类型,直接拷贝</span><br><span class="hljs-comment">//      如果不是,继续区分</span><br><span class="hljs-comment">//              ...</span><br><span class="hljs-comment">//      如果是对象,新建一个对象</span><br><span class="hljs-comment">//      如果是函数,新建一个函数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deepClone</span>(<span class="hljs-params">data</span>) </span>&#123;<br>            <span class="hljs-comment">// 1.先判断数据类型,如果基本数据类型直接返回,如果是引用数据类型需要进一步处理</span><br>            <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isObj</span>(<span class="hljs-params">obj</span>) </span>&#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> || <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;function&#x27;</span>) &amp;&amp; obj != <span class="hljs-literal">null</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (!isObj(data)) &#123; <span class="hljs-comment">// isObj(data) -&gt; true 是引用数据类型</span><br>                <span class="hljs-keyword">return</span> data<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">&#x27;return &#x27;</span> + data.toString())()<br>            &#125;<br><br>            <span class="hljs-keyword">let</span> newObj = <span class="hljs-built_in">Array</span>.isArray(data) ? [] : &#123;&#125;;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> data) &#123;<br>                newObj[key] = deepClone(data[key]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> newObj;<br>        &#125;<br><br><span class="hljs-keyword">let</span> result = deepClone(at);<br><span class="hljs-built_in">console</span>.log(result);<br></code></pre></div></td></tr></table></figure><h3 id="可选链操作符（-）"><a href="#可选链操作符（-）" class="headerlink" title="可选链操作符（?.）"></a>可选链操作符（?.）</h3><p>在引用为空（<code>null</code>或<code>undefined</code>）的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> adventurer = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>  <span class="hljs-attr">cat</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Dinah&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> dogName = adventurer.dog?.name;<br><span class="hljs-built_in">console</span>.log(dogName);<br><span class="hljs-comment">// expected output: undefined</span><br><br><span class="hljs-built_in">console</span>.log(adventurer.someNonExistentMethod?.());<br><span class="hljs-comment">// expected output: undefined</span><br></code></pre></div></td></tr></table></figure><h3 id="空位合并运算符（-）"><a href="#空位合并运算符（-）" class="headerlink" title="空位合并运算符（??）"></a>空位合并运算符（??）</h3><p>空值合并运算符（??）是一个逻辑运算符，当左侧操作数为 null 或 undefined 时，返回右侧的操作数，否则返回左侧操作数，如果没有明确添加括号，禁止将 ?? 运算符与 &amp;&amp; 和 || 运算符一起使用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(value !== <span class="hljs-literal">null</span> &amp;&amp; value !== <span class="hljs-literal">undefined</span> &amp;&amp; value !== <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br>=====&gt;<br><span class="hljs-keyword">if</span>((value??<span class="hljs-string">&#x27;&#x27;</span>) !== <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>  <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Object-values-obj-和-数组的flat-方法"><a href="#Object-values-obj-和-数组的flat-方法" class="headerlink" title="Object.values(obj) 和 数组的flat()方法"></a>Object.values(obj) 和 数组的flat()方法</h3><p><code>Object.values()</code>方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a>循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )</p><p>flat() 方法会按照一个可指定的<strong>深度</strong>递归遍历数组（默认是1），并将所有元素与遍历到的子数组中的元素合并为一个新数组返回，用于数据扁平化，<code>arr.flat(Infinity)</code>扁平化最深层次的数组</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> deps = &#123;<br>    <span class="hljs-string">&#x27;采购部&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>    <span class="hljs-string">&#x27;人事部&#x27;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>],<br>    <span class="hljs-string">&#x27;行政部&#x27;</span>:[<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">79</span>],<br>    <span class="hljs-string">&#x27;运输部&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">64</span>,<span class="hljs-number">105</span>],<br>&#125;<br><span class="hljs-keyword">let</span> member = <span class="hljs-built_in">Object</span>.values(deps).flat(<span class="hljs-literal">Infinity</span>);<br></code></pre></div></td></tr></table></figure><h2 id="toLocaleString-NaN"><a href="#toLocaleString-NaN" class="headerlink" title="toLocaleString"></a>toLocaleString</h2><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">Javascript诞生记</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html">undefined与null的区别</a></p><p><a href="https://blog.csdn.net/q617610589/article/details/52468173">js字符串与数字比较大小</a></p><p><a href="https://www.jianshu.com/p/ef898304ebdf">String 和 toString 的区别</a></p><p><a href="https://segmentfault.com/q/1010000016894736">javascript中window对象和Object对象的关系是什么？</a></p><p><a href="https://juejin.cn/post/7016520448204603423">你会用ES6，那倒是用啊！</a></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组串联</title>
    <link href="/2022/04/07/%E6%95%B0%E7%BB%84%E4%B8%B2%E8%81%94/"/>
    <url>/2022/04/07/%E6%95%B0%E7%BB%84%E4%B8%B2%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h2 id="1929-数组串联"><a href="#1929-数组串联" class="headerlink" title="1929. 数组串联"></a><a href="https://leetcode-cn.com/problems/concatenation-of-array/">1929. 数组串联</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给你一个长度为 n 的整数数组 nums 。请你构建一个长度为 2n 的答案数组 ans ，数组下标 从 0 开始计数 ，对于所有 0 <= i < n 的 i ，满足下述所有要求：<br>❉&nbsp;&nbsp;&nbsp;ans[i] == nums[i]<br>❉&nbsp;&nbsp;&nbsp;ans[i + n] == nums[i]<br>具体而言，ans 由两个 nums 数组 <strong>串联</strong> 形成。<br>返回数组 ans 。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [1,2,1]<br>输出：[1,2,1,1,2,1]<br>解释：数组 ans 按下述方式形成：<br>- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]<br>- ans = [1,2,1,1,2,1]<p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [1,3,2,1]<br>输出：[1,3,2,1,1,3,2,1]<br>解释：数组 ans 按下述方式形成：<br>- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]<br>- ans = [1,3,2,1,1,3,2,1]<p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;n == nums.length<br>❉&nbsp;&nbsp;&nbsp;1 <= n <= 1000<br>❉&nbsp;&nbsp;&nbsp;1 <= num[i] <= 1000</p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">和昨天一样，多一次遍历而已，不再赘述</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">getConcatenation</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++ i)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = length; j &lt; length * <span class="hljs-number">2</span>; ++ j)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[j-length]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于排列构建数组</title>
    <link href="/2022/04/06/%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/"/>
    <url>/2022/04/06/%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1920-基于排列构建数组"><a href="#1920-基于排列构建数组" class="headerlink" title="1920. 基于排列构建数组"></a><a href="https://leetcode-cn.com/problems/build-array-from-permutation/">1920. 基于排列构建数组</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给你一个 从 0 开始的排列 nums（下标也从 0 开始）。请你构建一个 同样长度 的数组 ans ，其中，对于每个 i（0 <= i < nums.length），都满足 ans[i] = nums[nums[i]] 。返回构建好的数组 ans 。<br>从 0 开始的排列 nums 是一个由 0 到 nums.length - 1（0 和 nums.length - 1 也包含在内）的不同整数组成的数组。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [0,2,1,5,3,4]<br>输出：[0,1,2,4,5,3]<br>解释：数组 ans 构建如下：<br>ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]<br>    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]<br>    = [0,1,2,4,5,3]</strong></p><p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [5,0,1,2,3,4]<br>输出：[4,5,0,1,2,3]<br>解释：数组 ans 构建如下：<br>ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]<br>    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]<br>    = [4,5,0,1,2,3]</strong></p><p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;1 <= nums.length <= 1000<br>❉&nbsp;&nbsp;&nbsp;0 <= nums[i] <= nums.length<br>❉&nbsp;&nbsp;&nbsp;nums中的元素<strong>互不相同</strong></p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">最简单粗暴的方法，遍历初始数组，求得运算后的数组，返回这个新的数组，时间复杂度为O(n)，老师看了想打人（😅）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">buildArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i)<br>        &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[nums[i]]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML常见问题以及技巧</title>
    <link href="/2022/04/05/HTML+CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/04/05/HTML+CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="width属性的“继承”问题"><a href="#width属性的“继承”问题" class="headerlink" title="width属性的“继承”问题"></a>width属性的“继承”问题</h2><p>常见的拥有继承性的属性以<span class="label label-primary">text-</span>、<span class="label label-primary">font-</span>、<span class="label label-primary">line-</span>开头的属性较为常用。其中也有例外如<span class="label label-primary">a</span>标签的字体颜色是不继承的，它有它自己的默认颜色-<span style="color:rgb(82, 164, 225);">蓝色</span>，下划线等自带样式，<span class="label label-primary">h1~h6</span>的字体大小是不继承的，跟<span class="label label-primary">a</span>标签一样都是有自带默认值，除非单独为其设置样式才可以改变。</p><ol><li><strong>子元素是块级元素且无定位或浮动时，是不需要写width属性，就可以默认“继承”的。否则就要特殊声明一下width属性。</strong></li><li><strong>当使用width:100%的时候 也要注意其基准点到底是谁</strong><ul><li>对于使用position:relative的子元素或浮动的子元素,其基准点始终是基于其直接父元素而言的，跟其父元素是否有定位无关。</li><li>对于绝对定位position:absolute的子元素，其基准点是相对于离其最近的一层定位父元素而言。如果其所有父级元素均无定位，则是相对于<em><strong>初始包含块</strong></em>而言。</li><li>对于使用position:fixed的子元素，其基准点就是<em><strong>视口（Viewport）</strong></em>。跟父元素无关。</li></ul></li></ol><h2 id="为什么块状元素浮动后就不会独占一行了？"><a href="#为什么块状元素浮动后就不会独占一行了？" class="headerlink" title="为什么块状元素浮动后就不会独占一行了？"></a>为什么块状元素浮动后就不会独占一行了？</h2><p>因为浮动的包裹性，浮动后元素只会占据该占据的空间<strong>（包裹性指的是，浮动元素的宽度会收缩到与内容一致，由于包裹性的特点，浮动元素一般需要手动设置width）</strong>。</p><h2 id="float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？"><a href="#float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？" class="headerlink" title="float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？"></a>float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？</h2><p>float和relative没有任何冲突，但是float不能和absolute同时使用，float之后元素就不在标准文档流中了，relative对这个没有任何影响。</p><h2 id="CSS-min-height属性"><a href="#CSS-min-height属性" class="headerlink" title="CSS min-height属性"></a>CSS min-height属性</h2><p>该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮，不允许指定负值，没有继承性。<strong>一般用在解决二级菜单内容超出规定区域的问题上</strong>。</p><h2 id="sticky-粘性布局特性"><a href="#sticky-粘性布局特性" class="headerlink" title="sticky-粘性布局特性"></a>sticky-粘性布局特性</h2><p>position:sticky有个非常重要的特性，那就是sticky元素效果完全受制于父级元素们。<br>这和position:fixed定位有着根本性的不同，fixed元素直抵页面根元素，其他父元素对其left/top定位无法限制。</p><p>sticky元素以下一些特性表现：</p><ol><li>父级元素不能有任何overflow:visible以外的overflow设置，否则没有粘滞效果，因为改变了滚动容器（即使没有出现滚动条），因此，如果你的position:sticky无效，看看是不是某一个祖先元素设置了overflow:hidden，移除即可。</li><li>父级元素也不能设置固定的height高度值，否则也没有粘滞效果。</li><li>同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。</li><li>sticky定位，不仅可以设置top，基于滚动容器上边缘定位，还可以设置bottom，也就是相对底部粘滞。如果是水平滚动，也可以设置left和right值。</li></ol><h2 id="包含块、初始包含块"><a href="#包含块、初始包含块" class="headerlink" title="包含块、初始包含块"></a>包含块、初始包含块</h2><p>根元素的包含块（也称为初始包含块）由用户代理建立，在HTML中，根元素就是html元素，不过有些浏览器会使用body作为根元素。在大多数浏览器中，<strong>初始包含块是一个视窗大小的矩形，不等于视窗</strong>。</p><p>对于一个非根元素，如果其position值是relative或static，包含块则由<strong>最近的块级框</strong>构成。</p><p>对于一个非根元素，如果其position值是fixed，包含块是<strong>视口</strong>。</p><p>对于一个非根元素，如果其position值是absolute，包含块设置为<strong>最近的position值不是static的祖先元素（可以是任何类型）</strong>。这个过程如下：</p><ul><li>如果这个祖先是块级元素，包含块则设置为该元素的内边距边界，也就是内容区域。</li><li>如果没有祖先，元素的包含块定义为初始包含块。</li></ul><p><strong>浮动元素的包含块为其最近的块级祖先元素</strong>。</p><p>应用：使用绝对定位来模拟固定定位（ie6下，fixed失效）</p><p>解决思路：系统的滚动条是在文档上，而不是在html,body上。body下的元素当position为absolute时，包含块为初始包含块，当拉动系统滚动条时，包含块随之移动。把系统滚动条禁止掉，给body加上滚动条，body成为元素的初始包含块。拉动滚动条，达到fixed的效果。</p><h2 id="置换元素（替换元素）"><a href="#置换元素（替换元素）" class="headerlink" title="置换元素（替换元素）"></a>置换元素（替换元素）</h2><p><strong>置换元素</strong>又叫<strong>替换元素</strong>，一个<strong>内容</strong>不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。它们所具有的特征为：在不使用css修饰时，元素的标签和属性也会影响元素的显示。</p><p>如在<span class="label label-primary">img</span>中，浏览器会根据src属性读取图片并显示，且图片大小会影响<span class="label label-primary">img</span>标签大小；<span class="label label-primary">input</span>标签的type属性会影响<span class="label label-primary">input</span>的显示是输入还是选择。</p><p>常见的置换元素有<span class="label label-primary">img</span>、<span class="label label-primary">input</span>、<span class="label label-primary">textarea</span>、<span class="label label-primary">select</span>、<span class="label label-primary">object</span>、<span class="label label-primary">iframe</span>、<span class="label label-primary">canvas</span>等。</p><p class="note note-danger">总结</p><ul><li>若<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 且元素有固有宽度，则 width 的使用值为该固有宽度（拥有默认宽高的 input 当宽度的值为auto时，则宽度使用值为其默认的固有宽度）。</li><li>若<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 且高度有 非auto 的计算值，并且元素有固有宽高比，则 width 的使用值为 高度使用值 * 固有宽高比（img 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置）。</li><li>当<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 时，则宽度的使用值为 300px（iframe, canvas等标签）。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且元素有固有高度，则 height 的使用值为该固有高度（img标签内图片有固有高度）。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且宽度有非 auto 的值，并且元素有固有宽高比，则 height 值为：宽度使用值 / 固有宽高比。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且上述条件完全不符，则 height 值不能大于150px，且宽度不能大于长方形高度的2倍。</li></ul><h2 id="行内元素（内联元素）、行内块元素、块元素"><a href="#行内元素（内联元素）、行内块元素、块元素" class="headerlink" title="行内元素（内联元素）、行内块元素、块元素"></a>行内元素（内联元素）、行内块元素、块元素</h2><p><span style="color:rgb(255, 0, 0);"><strong>行内元素（display:inline）</strong></span></p><p><strong>特点</strong>：在水平方向上排列，它的宽高随内容而定。不可以设置宽高，可以设置行高（line-height）。设置margin和padding的上下无效。<br><strong>常见的行内元素</strong>：<span class="label label-primary">a</span>、<span class="label label-primary">ins</span>、<span class="label label-primary">br</span>、<span class="label label-primary">em</span>、<span class="label label-primary">font</span>、<span class="label label-primary">img</span>、<span class="label label-primary">label</span>、<span class="label label-primary">small</span>、<span class="label label-primary">span</span>、<span class="label label-primary">del</span>、<span class="label label-primary">strong</span><br><strong>注意</strong>：<u><em><strong>虽然行内元素设置行高之后会有位置的变化，但是并没有改变盒子大小。有些行内元素可以设置宽高，是因为它们是置换元素(拥有内置宽高也可以设置宽高属性)。</strong></em></u></p><p><strong>水平居中</strong>：给父元素加<span class="label label-primary">text-align:center</span></p><p><strong>垂直居中</strong>：给父元素加<span class="label label-primary">line-height:xxx(height的值)</span></p><p><span style="color:rgb(255, 0, 0);"><strong>行内块元素（display:inline-block）</strong></span></p><p><strong>特点</strong>：拥有块级元素和行内的性质，既可以在一行排列(从左到右)，也可以设置宽高等属性，不自动换行。</p><p><strong>常见的行内块元素</strong>：<span class="label label-primary">input</span>、<span class="label label-primary">img</span>、<span class="label label-primary">video</span>、<span class="label label-primary">select</span>、<span class="label label-primary">source</span></p><p><strong>水平居中</strong>：</p><ol><li>给父元素加<span class="label label-primary">text-align:center</span></li><li>给自身添加margin/padding调整</li></ol><p><span style="color:rgb(255, 0, 0);"><strong>块元素（display:block）</strong></span></p><p><strong>特点</strong>：在垂直方向上排列，独占一行，自动换行。</p><p><strong>常见的块元素</strong>：<span class="label label-primary">div</span>、<span class="label label-primary">dl</span>、<span class="label label-primary">dd</span>、<span class="label label-primary">dt</span>、<span class="label label-primary">form</span>、<span class="label label-primary">h1~h6</span>、<span class="label label-primary">hr</span>、<span class="label label-primary">ol</span>、<span class="label label-primary">p</span>、<span class="label label-primary">header</span>、<span class="label label-primary">footer</span>、<span class="label label-primary">section</span>、<span class="label label-primary">nav</span></p><p><strong>水平居中</strong>：</p><ol><li>给自身加<span class="label label-primary">margin:0 auto</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:0</span>和<span class="label label-primary">right:0</span>和<span class="label label-primary">margin:auto</span></li><li>利用弹性布局实现<em><strong>（设置弹性布局之后，子元素的<span class="label label-primary">float</span>、<span class="label label-primary">clear</span>、<span class="label label-primary">vertical-align</span>属性失效）</strong></em>，给父元素添加<span class="label label-primary">display:flex</span>和<span class="label label-primary">justify-content:center</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:0</span>和<span class="label label-primary">transform: translate(-50%, 0)</span></li></ol><p><strong>垂直居中</strong>：</p><ol><li>利用弹性布局实现<em><strong>（设置弹性布局之后，子元素的<span class="label label-primary">float</span>、<span class="label label-primary">clear</span>、<span class="label label-primary">vertical-align</span>属性失效）</strong></em>，给父元素添加<span class="label label-primary">display:flex</span>和<span class="label label-primary">align-items:center</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:50%</span>和<span class="label label-primary">margin-top:-xxx(自身高度一半的相反数)</span>，因为top是根据盒子顶部进行定位的，所以要再向上移动自身高度的一半</li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">transform: translate(0, -50%)</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">bottom:0</span>和<span class="label label-primary">margin:auto</span></li></ol><p><strong>垂直水平居中</strong>：</p><ol><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:50%</span>和<span class="label label-primary">top:50%</span>和<span class="label label-primary">transform: translate(-50%, -50%)</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">bottom:0和<span class="label label-primary">left:0</span>和<span class="label label-primary">right:0</span></span>和<span class="label label-primary">margin:auto</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:relative</span>和<span class="label label-primary">top: calc(50% - 自身高度的一半)</span>和<span class="label label-primary">left: calc(50% - 自身宽度的一半)</span></li><li>设置父元素<span class="label label-primary">display:flex</span>和<span class="label label-primary">justify-content: center</span>和<span class="label label-primary">align-items: center</span></li><li>设置父元素<span class="label label-primary">display:flex</span>，自身设置<span class="label label-primary">margin:auto</span></li></ol><p><span style="color:rgb(255, 0, 0);"><strong>嵌套关系</strong></span></p><ol><li>块元素可以包含行内元素和行内块元素</li><li>行内元素只能包含行内元素</li><li>h1~h6、p、dt只能包含行内元素</li></ol><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><ol><li><em><strong>单行文本垂直居中</strong></em>，设置line-height=height即可。</li></ol><h2 id="隐藏元素的几种方法"><a href="#隐藏元素的几种方法" class="headerlink" title="隐藏元素的几种方法"></a>隐藏元素的几种方法</h2><ol><li><code>display: none</code>   不占位</li><li><code>visibility: hidden</code>  占位</li><li><code>opacity: 0</code>  透明度位0</li><li><code>transform: translateX(-10000px)</code></li><li><code>transform: scale(0)</code>    </li><li><code>transform: rotateY(90deg)</code></li><li><code>transform: skew(90deg)</code></li><li><code>width: 0</code> <code>height: 0</code></li><li><code>position:absolutely</code> <code>top:-4555px </code> <code>left:-4555px</code></li></ol><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>​        BFC 的意思是 <strong>Block Formatting Context</strong> ，即<strong>块级格式上下文</strong>。 然后，当元素满足了某些条件，我们认为该元素创建了 <strong>BFC</strong>。 创建了 BFC 的元素我们可以把他看做是一个独立的容器，容器内的元素不论如何布局都不会影响到外面。</p><h3 id="创建bfc的方式"><a href="#创建bfc的方式" class="headerlink" title="创建bfc的方式"></a>创建bfc的方式</h3><ul><li>浮动元素：元素的float不是none的元素</li><li>绝对定位的元素：position的值为absolute或fixed</li><li>行内块：<code>display:inline-block</code></li><li>具有<code>overflow</code>并且值不是<code>visible</code>的块元素</li><li>伸缩项目</li><li>多列容器<code>column-count</code>或<code>column-width</code>不为auto</li><li>根元素<code>display:flow-root</code></li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li><li>表格单元格（th、td）、表格行（tr）、表格标题（caption）、table、thead、tbody、tfoot</li></ul><h3 id="bfc解决的问题"><a href="#bfc解决的问题" class="headerlink" title="bfc解决的问题"></a>bfc解决的问题</h3><ul><li>解决浮动导致父元素高度塌陷</li><li>解决外边距重叠</li><li>阻止标准流元素被浮动元素覆盖</li></ul><h2 id="img父元素高出3px原因及解决方案"><a href="#img父元素高出3px原因及解决方案" class="headerlink" title="img父元素高出3px原因及解决方案"></a>img父元素高出3px原因及解决方案</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>​        当div/a中包含img时，父元素的高度比img图片的高度多出3px，img是一种类似text的标签元素，在结束的时候，会在末尾加上一个空白符（匿名文本），这个文本外有一个匿名行级盒子，它默认的vertical-align是baseline的，而且往往因为上文line-height的影响，使它有个line-height，从而使其有了高度，因为baseline对齐的原因，这个匿名盒子就会下沉，往下撑开一些距离，所以把父元素撑高了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>消除掉匿名盒子的高度，给a设置line-height:0或font-size:0</li><li>给两者vertical-align:top，让其top对齐，而不是baseline对齐</li><li>给img以display:block，让它和匿名行级盒子不在一个布局上下文中，也就不存在行级盒的对齐问题</li></ul><h2 id="overflow-hidden的作用"><a href="#overflow-hidden的作用" class="headerlink" title="overflow:hidden的作用"></a>overflow:hidden的作用</h2><ul><li>给一个元素中设置<code>overflow:hidden</code>，那么该元素的内容若超出了给定的宽度和高度属性，那么超出的部分将会被隐藏，不占位（一般情况下，在页面中，一般溢出后会显示省略号，比如，当一行文本超出固定宽度就隐藏超出的内容显示省略号，这时就需要以下属性配合工作：<code>overflow: hidden;</code> <code>white-space: nowrap;</code> <code>text-overflow: ellipsis;</code>）</li><li>给父元素设置<code>overflow:hidden</code>可以清除子元素的浮动，在IE比较低版本的浏览器中还需要加上<code>zoom:1;</code></li><li>父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷，这时给父级元素添加<code>overflow:hidden</code>即可解决</li></ul><h2 id="flex收缩极限"><a href="#flex收缩极限" class="headerlink" title="flex收缩极限"></a>flex收缩极限</h2><p><code>flex-shrink</code>并不能够无限缩小，而是有极限的，比如不会收缩到比里面的内容还小，具体算法不再探究</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul><li><p>通配选择器(*)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">* &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>元素选择器(E)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>ID选择器(#id)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-id">#box</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>CLASS选择器(.class)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.item</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>群组选择器(select1,selectN)</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span>,<span class="hljs-selector-tag">ol</span>,<span class="hljs-selector-class">.item</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>交集选择器</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.open</span> &#123;&#125;<br><span class="hljs-selector-class">.item</span><span class="hljs-selector-class">.active</span> &#123;&#125;<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.current</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul><li><p>后代选择器 <code>E F</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.news-list</span> <span class="hljs-selector-tag">li</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>子选择器 <code>E&gt;F</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.news-list</span>&gt;<span class="hljs-selector-tag">li</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>相邻兄弟选择器 <code>E+F</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.active</span>+<span class="hljs-selector-class">.item</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>通用兄弟选择器 <code>E~F</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.active</span>~<span class="hljs-selector-tag">li</span> &#123;&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li><code>E[attr]</code>                选择具有att属性的E元素。</li><li><code>E[attr=&quot;val&quot;]</code>     选择具有att属性且属性值等于val的E元素。</li><li><code>E[attr~=&quot;val&quot;]</code>   选择具有att属性且属性值为一用空格分隔的字词列表，其中一个等于val的E元素（包含只有一个值且该值等于val的情况。</li><li><code>E[attr^=&quot;val&quot;]</code>   选择具有att属性且属性值为以val开头的字符串的E元素。</li><li><code>E[attr$=&quot;val&quot;]</code>   选择具有att属性且属性值为以val结尾的字符串的E元素。</li><li><code>E[attr*=&quot;val&quot;]</code>   选择具有att属性且属性值为包含val的字符串的E元素。</li><li><code>E[attr|=&quot;val&quot;]</code>   选择具有att属性且属性值为以val开头并用连接符”-“分隔的字符串的E元素，如果属性值仅为val，也将被选择。</li></ul><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h4><ul><li><p><code>E:link</code></p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">设置超链接a在未被访问前的样式。</span><br></code></pre></div></td></tr></table></figure><p>注意，a:hover 必须位于 a:link 和 a:visited 之后，a:active 必须位于 a:hover 之后</p></li><li><p><code>E:visited</code></p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs brainfuck"><span class="hljs-comment">设置超链接a在其链接地址已被访问过时的样式。</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>E:hover</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">设置元素在其鼠标悬停时的样式。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:active</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式。<br>  <br></code></pre></div></td></tr></table></figure></li><li><p><code>E:focus</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">设置对象在成为输入焦点（该对象的onfocus事件发生）时的样式。<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="目标伪类选择器"><a href="#目标伪类选择器" class="headerlink" title="目标伪类选择器"></a>目标伪类选择器</h4><ul><li><p><code>E:target</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配相关<span class="hljs-built_in">URL</span>指向的<span class="hljs-built_in">E</span>元素。<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="语言伪类选择器"><a href="#语言伪类选择器" class="headerlink" title="语言伪类选择器"></a>语言伪类选择器</h4><ul><li><p><code>E:lang(fr)</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配使用特殊语言的<span class="hljs-built_in">E</span>元素<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="UI元素伪类选择器"><a href="#UI元素伪类选择器" class="headerlink" title="UI元素伪类选择器"></a>UI元素伪类选择器</h4><ul><li><p><code>E:checked</code></p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">匹配用户界面上处于选中状态的元素<span class="hljs-type">E</span>。(用于input <span class="hljs-keyword">type</span>为radio与checkbox时)<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:enabled</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">匹配用户界面上处于可用状态的表单元素<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:disabled</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">匹配用户界面上处于禁用状态的表单元素<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><ul><li><p><code>E:root</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">匹配E元素在文档的根元素。在<span class="hljs-selector-tag">HTML</span>中，根元素永远是<span class="hljs-selector-tag">HTML</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>E:first-child</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配父元素的第一个子元素<span class="hljs-built_in">E</span>。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:last-child</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配父元素的最后一个子元素<span class="hljs-built_in">E</span>。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:only-child</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配父元素仅有的一个子元素<span class="hljs-built_in">E</span>。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:nth-child(n)</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配父元素的第<span class="hljs-variable">n</span>个子元素<span class="hljs-built_in">E</span>，假设该子元素不是<span class="hljs-built_in">E</span>，则选择符无效。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:nth-last-child(n)</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配父元素的倒数第<span class="hljs-variable">n</span>个子元素<span class="hljs-built_in">E</span>，假设该子元素不是<span class="hljs-built_in">E</span>，则选择符无效。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:first-of-type</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配同类型中的第一个同级兄弟元素<span class="hljs-built_in">E</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>E:last-of-type</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配同类型中的最后一个同级兄弟元素<span class="hljs-built_in">E</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>E:only-of-type</code></p><figure class="highlight mathematica"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mathematica">匹配同类型中的唯一的一个同级兄弟元素<span class="hljs-built_in">E</span><br></code></pre></div></td></tr></table></figure></li><li><p><code>E:nth-of-type(n)</code></p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">匹配同类型中的第<span class="hljs-built_in">n</span>个同级兄弟元素E<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:nth-last-of-type(n)</code></p><figure class="highlight excel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs excel">匹配同类型中的倒数第<span class="hljs-built_in">n</span>个同级兄弟元素E<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:empty</code></p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">匹配没有任何子元素（包括<span class="hljs-built_in">text</span>节点）的元素E<br></code></pre></div></td></tr></table></figure></li></ul><h4 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h4><ul><li><p><code>E:not(s)</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">排除满足括号中选择器条件的元素。 <br></code></pre></div></td></tr></table></figure></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul><li><p><code>E:first-letter/E::first-letter</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">用于给元素中的第一个文字（字母或汉字）设置样式。  设置对象内的第一个字符的样式。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:first-line/E::first-line</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">用于给元素中的第一行文字设置样式。<br></code></pre></div></td></tr></table></figure></li><li><p><code>E:before/E::before</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">动态地给元素创建一个子元素位于最开始的位置，必须设置 <span class="hljs-attribute">content</span> 属性才生效。 <br></code></pre></div></td></tr></table></figure></li><li><p><code>E:after/E::after</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css">动态地给元素创建一个子元素位于最后的位置，必须设置 <span class="hljs-attribute">content</span> 属性才生效。  <br></code></pre></div></td></tr></table></figure></li><li><p><code>E::placeholder</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">用于给文本输入框或文本域设置 placeholder 文字的样式。 <br></code></pre></div></td></tr></table></figure></li><li><p><code>E::selection</code></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">用于设置文本被鼠标选中之后的样式。<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="选择器优先级"><a href="#选择器优先级" class="headerlink" title="选择器优先级"></a>选择器优先级</h2><p>! important &gt; 行内样式（1000）&gt; ID选择器（100）&gt; 类，属性选择器和伪类选择器（10）&gt; 元素选择器和伪元素选择器（1）&gt;通配符选择器（0）&gt; 继承</p><h2 id="animation-timing-function-steps"><a href="#animation-timing-function-steps" class="headerlink" title="animation-timing-function: steps()"></a>animation-timing-function: steps()</h2><p>一个持续3s一共2次的动画，分别应用 <code>steps(3, start)</code> 和 <code>steps(3, end)</code> 的阶跃函数曲线如下：</p><p><code>steps(3, start)</code></p><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220509/animation_start.5djfe9a9wpk0.webp" alt="animation_start"></p><p>​        <code>steps()</code>第一个参数将动画分割成三段。当指定跃点为<code>start</code>时，动画在每个计时周期的起点发生阶跃（即图中 <strong>空心圆 → 实心圆</strong> ）。 由于第一次阶跃发生在第一个计时周期的起点处（0s），所以我们看到的第一步动画（初态）就为 1/3 的状态，因此在视觉上动画的过程为 1/3 → 2/3 → 1 。</p><p><code>steps(3， end)</code></p><p><img src="https://cdn.jsdelivr.net/gh/arfbt/image-hosting@master/20220509/animation_end.4ya71b1iuts0.webp" alt="animation_end"></p><p>​        当指定跃点为<code>end</code>，动画则在每个计时周期的终点发生阶跃（即图中 <strong>空心圆 → 实心圆</strong> ）。 由于第一次阶跃发生在第一个计时周期结束时（1s），所以我们看到的初态为 0% 的状态；而在整个动画周期完成处（3s），虽然发生阶跃跳到了 100% 的状态，但同时动画结束，所以 100% 的状态不可视。因此在视觉上动画的过程为 0 → 1/3 → 2/3 。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/dengting/p/5758954.html">animation-timing-function: steps() 详解</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2022/03/23/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/03/23/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</strong></p><p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</strong></p><p><span class="label label-primary"><strong>示例 3：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [3,3], target = 6<br>输出：[0,1]</strong></p><p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;2 <= nums.length <= 10<sup>4</sup><br>❉&nbsp;&nbsp;&nbsp;-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup><br>❉&nbsp;&nbsp;&nbsp;-10<sup>9</sup> <= target <= 10<sup>9</sup><br><strong>❉&nbsp;&nbsp;&nbsp;只会存在一个有效答案</strong></p><p class="note note-warning"><strong>进阶：</strong>你可以想出一个时间复杂度小于 O(n<sup>2</sup>) 的算法吗？</p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">最简单也是最低级的解法，两层循环暴力求解，时间复杂度为O(n^2^)，老师看了想打人（😅）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;<br>                    <span class="hljs-keyword">return</span> &#123;i,j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言printf()函数输出类型详解</title>
    <link href="/2021/10/05/C%E8%AF%AD%E8%A8%80printf()%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/10/05/C%E8%AF%AD%E8%A8%80printf()%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>不常用的类型遇到直接查表，干净又卫生嗷兄弟们</p><h4 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h4><blockquote><p>以十进制形式输出带符号整数(正数不输出符号)</p></blockquote><h5 id="o-O"><a href="#o-O" class="headerlink" title="%o/O"></a>%o/O</h5><blockquote><p>以八进制形式输出无符号整数(不输出前缀0)</p></blockquote><h5 id="x-X"><a href="#x-X" class="headerlink" title="%x/X"></a>%x/X</h5><blockquote><p>以十六进制形式输出无符号整数(不输出前缀0x)</p></blockquote><h5 id="u"><a href="#u" class="headerlink" title="%u"></a>%u</h5><blockquote><p>以十进制形式输出无符号整数</p></blockquote><h5 id="9-1f"><a href="#9-1f" class="headerlink" title="%9.1f"></a>%9.1f</h5><blockquote><p>以小数形式输出单、双精度实数（总共保留9位数，小数点后保留一位数）</p></blockquote><h5 id="e-E"><a href="#e-E" class="headerlink" title="%e,E"></a>%e,E</h5><blockquote><p>以指数形式输出单、双精度实数</p></blockquote><h5 id="g-G"><a href="#g-G" class="headerlink" title="%g,G"></a>%g,G</h5><blockquote><p>以%f或%e中较短的输出宽度输出单、双精度实数</p></blockquote><h5 id="c"><a href="#c" class="headerlink" title="%c"></a>%c</h5><blockquote><p>输出单个字符</p></blockquote><h5 id="s"><a href="#s" class="headerlink" title="%s"></a>%s</h5><blockquote><p>输出字符串</p></blockquote><h5 id="p"><a href="#p" class="headerlink" title="%p"></a>%p</h5><blockquote><p>输出指针地址</p></blockquote><h5 id="lu"><a href="#lu" class="headerlink" title="%lu"></a>%lu</h5><blockquote><p>32位无符号整数</p></blockquote><h5 id="llu"><a href="#llu" class="headerlink" title="%llu"></a>%llu</h5><blockquote><p>64位无符号整数</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>printf()</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>printf()</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS使用C/C++万能头文件保姆级教程</title>
    <link href="/2021/10/05/macOS%E4%BD%BF%E7%94%A8C:C++%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <url>/2021/10/05/macOS%E4%BD%BF%E7%94%A8C:C++%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="macOS使用C-C-万能头文件保姆级教程"><a href="#macOS使用C-C-万能头文件保姆级教程" class="headerlink" title="macOS使用C/C++万能头文件保姆级教程"></a>macOS使用C/C++万能头文件保姆级教程</h2><p>Windows上面用万能头文件为我们省去了不少记头文件的麻烦，切换到macOS上来发现C/C++环境中没有自带这个头文件。不行，今天无论如何都要用到万能头文件。</p><h3 id="第一步：安装C-C-环境（本教程使用Xcode软件自带C-C-环境）"><a href="#第一步：安装C-C-环境（本教程使用Xcode软件自带C-C-环境）" class="headerlink" title="第一步：安装C/C++环境（本教程使用Xcode软件自带C/C++环境）"></a>第一步：安装C/C++环境（本教程使用Xcode软件自带C/C++环境）</h3><p>方法1：打开App Store，下载Xcode</p><p><img src="https://img-blog.csdnimg.cn/2021071522352944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="下载Xcode"></p><p>方法2：进入苹果开发者网站下载<a href="https://developer.apple.com/download/all/">Command Line Tool</a>（还是下稳定版好一些）</p><p><img src="https://img-blog.csdnimg.cn/20210715223639750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="下载Command Line Tool"></p><h3 id="第二步：打开“终端”，输入"><a href="#第二步：打开“终端”，输入" class="headerlink" title="第二步：打开“终端”，输入"></a>第二步：打开“终端”，输入</h3><p><code>echo | g++ -v -x c++ -E -</code></p><h3 id="找到如下显示内容"><a href="#找到如下显示内容" class="headerlink" title="找到如下显示内容"></a>找到如下显示内容</h3><p><code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include</code></p><p><img src="https://img-blog.csdnimg.cn/20210715223731916.png" alt="找到以下内容"></p><h3 id="第三步：在访达中按“⇧⌘G”来调出“前往文件夹”，输入"><a href="#第三步：在访达中按“⇧⌘G”来调出“前往文件夹”，输入" class="headerlink" title="第三步：在访达中按“⇧⌘Ｇ”来调出“前往文件夹”，输入"></a>第三步：在访达中按“⇧⌘Ｇ”来调出“前往文件夹”，输入</h3><p><code>Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1</code></p><p><img src="https://img-blog.csdnimg.cn/2021071522380527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="前往v1文件夹"></p><p>看到这么多熟悉的面孔，相信大家已经知道下一步该干嘛了</p><h3 id="第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc-h”"><a href="#第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc-h”" class="headerlink" title="第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc++.h”"></a>第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc++.h”</h3><p><img src="https://img-blog.csdnimg.cn/20210715223850550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="新建stdc++.h"></p><h3 id="第五步：修改文件内容，粘入以下代码"><a href="#第五步：修改文件内容，粘入以下代码" class="headerlink" title="第五步：修改文件内容，粘入以下代码"></a>第五步：修改文件内容，粘入以下代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// C++ includes used for precompiling -*- C++ -*-</span><br><br><span class="hljs-comment">// Copyright (C) 2003-2014 Free Software Foundation, Inc.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This file is part of the GNU ISO C++ Library.  This library is free</span><br><span class="hljs-comment">// software; you can redistribute it and/or modify it under the</span><br><span class="hljs-comment">// terms of the GNU General Public License as published by the</span><br><span class="hljs-comment">// Free Software Foundation; either version 3, or (at your option)</span><br><span class="hljs-comment">// any later version.</span><br><br><span class="hljs-comment">// This library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">// GNU General Public License for more details.</span><br><br><span class="hljs-comment">// Under Section 7 of GPL version 3, you are granted additional</span><br><span class="hljs-comment">// permissions described in the GCC Runtime Library Exception, version</span><br><span class="hljs-comment">// 3.1, as published by the Free Software Foundation.</span><br><br><span class="hljs-comment">// You should have received a copy of the GNU General Public License and</span><br><span class="hljs-comment">// a copy of the GCC Runtime Library Exception along with this program;</span><br><span class="hljs-comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span><br><span class="hljs-comment">// &lt;http://www.gnu.org/licenses/&gt;.</span><br><br><span class="hljs-comment">/** @file stdc++.h</span><br><span class="hljs-comment">*  This is an implementation file for a precompiled header.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 17.4.1.2 Headers</span><br><br><span class="hljs-comment">// C</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cfloat&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ciso646&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;clocale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;csetjmp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdarg&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ccomplex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cfenv&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cinttypes&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdbool&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctgmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cwchar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cwctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">// C++</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ios&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iosfwd&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;new&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;streambuf&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;valarray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ratio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;scoped_allocator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;system_error&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tuple&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;typeindex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;type_traits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h3 id="第六步：测试"><a href="#第六步：测试" class="headerlink" title="第六步：测试"></a>第六步：测试</h3><p><img src="https://img-blog.csdnimg.cn/20210715224100355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="测试"></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>1.<a href="https://yang-xijie.github.io/vscode_cpp_macos/10_%E6%9E%81%E9%80%9F%E7%89%88.html">如何快速在macOS上配置VSCode编程Cpp的环境</a></p><p>2.<a href="https://www.cnblogs.com/lipoicyclic/p/14623307.html">macOS下使用bits/stdc++.h万能头文件</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/04/hello-world/"/>
    <url>/2021/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hello World</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hello World</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>本博客基于作者兴趣爱好打造，请大家友好评论，交流学习！</p>]]></content>
    
  </entry>
  
  
  
</search>
