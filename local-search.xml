<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS常见问题以及技巧</title>
    <link href="/2022/05/04/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/05/04/JS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="JS输出问题"><a href="#JS输出问题" class="headerlink" title="JS输出问题"></a>JS输出问题</h2><p>如果在文档加载完成后（即HTML输出已完成），再使用document.write()方法来要求浏览器来解析你的内容，则浏览器就会重写整个document，导致最后的这个document.write()方法输出的内容会覆盖之前所有的内容，如使用<code>button</code>标签：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.write(&#x27;&lt;h1&gt;点击渲染&lt;/h1&gt;&#x27;)&quot;</span>&gt;</span>试试就逝世<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="String-和-toString"><a href="#String-和-toString" class="headerlink" title="String() 和 toString()"></a>String() 和 toString()</h2><h3 id="String"><a href="#String" class="headerlink" title="String()"></a>String()</h3><ul><li>String() 是 JavaScript 的全局函数</li><li>String()只支持转为普通字符串，不支持转为相应进制的字符串</li><li>String() 可以将 <code>null</code> <code>undefined</code> 转化为字符串</li><li>如果String() 的参数有toString() 方法，就调用该方法，如果是<code>null</code>则返回<code>null</code>，如果是<code>undefined</code>就返回<code>undefined</code></li></ul><h3 id="toString-特殊问题"><a href="#toString-特殊问题" class="headerlink" title="toString()特殊问题"></a>toString()特殊问题</h3><h4 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h4><p>​        JavaScript引擎在解释代码时，对于1.toString()认为第一个.是浮点符号；第二个为属性访问的语法，所以 <code>1..toString()</code>正常；而 <code>(1).toString()</code> 排除了小数点的影响所以也为正常</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>toString()<br><span class="hljs-comment">// Uncaught SyntaxError: Invalid or unexpected token</span><br>(<span class="hljs-number">1</span>).toString()<br><span class="hljs-comment">// &quot;1&quot;</span><br><span class="hljs-number">1.</span>.toString()<br><span class="hljs-comment">// &quot;1&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出"><a href="#纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出" class="headerlink" title="纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出"></a>纯小数的小数点后面有连续6个或6个以上的0时，小数将用科学计数法输出</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">0.000006</span>; <span class="hljs-comment">//小数点后面有5个“0”</span><br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;0.000006&quot;</span><br><br>num = <span class="hljs-number">0.0000006</span> ;<span class="hljs-comment">//小数点后面有6个“0”</span><br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;6e-7&quot;</span><br></code></pre></div></td></tr></table></figure><h4 id="浮点数整数部分的位数大于21时，输出时采用科学计数法"><a href="#浮点数整数部分的位数大于21时，输出时采用科学计数法" class="headerlink" title="浮点数整数部分的位数大于21时，输出时采用科学计数法"></a>浮点数整数部分的位数大于21时，输出时采用科学计数法</h4><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1234567890123456789012</span>;<br><span class="hljs-built_in">console</span>.log(num.toString());<br><span class="hljs-comment">//&quot;1.2345678901234568e+21&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><ul><li>toString() 是 Object 原型的一个方法</li><li>toString() 可以转换进制字符串，如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 将十进制转化为二进制</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>;<br>num.toString(num, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// &quot;10&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>toString() 不能将 <code>null</code> <code>undefined</code> 转化为字符串</li></ul><h2 id="特殊数值计算问题"><a href="#特殊数值计算问题" class="headerlink" title="特殊数值计算问题"></a>特殊数值计算问题</h2><h3 id="infinity"><a href="#infinity" class="headerlink" title="infinity"></a>infinity</h3><ul><li><p>计算超出范围会得到无穷大(infinity)或者无穷小(-infinity)</p></li><li><p>分母为0会构成无穷大Infinity 或负无穷大-Infinity</p></li><li><p>关于Infinity的运算，infinity加减乘除一个数字都是Infinity，Infinity和Infinity计算，加法乘法为Infinity，其他为NaN</p></li><li><p>Infinity和自身相等 其他比较正常</p></li></ul><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><ul><li>NaN特点：<strong>无论和谁比较都是fasle，无论和谁计算都是NaN（除了字符串加法）</strong></li></ul><h2 id="转bool值为false的6种情况"><a href="#转bool值为false的6种情况" class="headerlink" title="转bool值为false的6种情况"></a>转bool值为false的6种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、null</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">null</span>));<span class="hljs-comment">//false</span><br><br>       <span class="hljs-comment">// 2.undefined</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">undefined</span>));<span class="hljs-comment">//false</span><br><br>       <span class="hljs-comment">// 3.number非0为true  0为false NaN为false</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-number">0</span>));<span class="hljs-comment">//false</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">NaN</span>));<span class="hljs-comment">//false</span><br><br>       <span class="hljs-comment">// 4.string空为false  非空为true</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">// 5.boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">false</span>));<span class="hljs-comment">//false</span><br></code></pre></div></td></tr></table></figure><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><ul><li>Undefined派生自Null，两者都是表示空缺值，转换成布尔值都是false，<code>null == undefined</code></li><li>Undefined和Null属于两种不同的类型</li><li>从逻辑角度来看，null 值表示一个空对象指针，而这也正是使用 typeof 操作符检测null时会返回<code>object</code>的原因</li><li>Undefined隐含着意外的空值，而Null隐含着意料之中的空值。因此设置一个变量、参数为空的时候，建议使用null而不是undefined</li></ul><h2 id="JS判断数据类型的方法"><a href="#JS判断数据类型的方法" class="headerlink" title="JS判断数据类型的方法"></a>JS判断数据类型的方法</h2><ul><li>typeof可以识别出基本类型String，、Number、Boolean、Undefined、Symbol，但是<em><strong>不能识别null</strong></em>。不能识别引用数据类型，会把null、array、object统一归为object类型,但是可以识别出function，所以typeof可以用来识别基本类型</li><li>instanceof不能识别出基本的数据类型 String、Number、Boolean、Undefined、Null、Symbol，但是可以检测出引用类型，如array、object、function，同时对于是使用new声明的类型，它还可以检测出多层继承关系。js的继承都是采用原型链来继承的，比如Dog  instanceof Animal ，其实就是看objA的原型链上是否有A的原型，而A的原型上保留A的constructor属性，所以instanceof一般用来检测对象类型，以及继承关系</li><li>null、undefined没有construstor方法，因此constructor不能判断undefined和null</li><li>Object.prototype.toString.call( ) 可以判断所有js数据类型</li></ul><h2 id="Number-为0的6种情况"><a href="#Number-为0的6种情况" class="headerlink" title="Number( )为0的6种情况"></a>Number( )为0的6种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">// 1、number</span><br>     <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 0</span><br><br>       <span class="hljs-comment">// 2、string</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//0 空字符串--&gt;0</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;   &quot;</span>));<span class="hljs-comment">//0 都是空格的字符串--&gt;0</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;0&quot;</span>));<span class="hljs-comment">// 0</span><br><br>       <span class="hljs-comment">// 3、boolean</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">false</span>));<span class="hljs-comment">//0  false--&gt;0</span><br><br>       <span class="hljs-comment">// 4、null</span><br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>));<span class="hljs-comment">// 0   null---&gt;0</span><br></code></pre></div></td></tr></table></figure><h2 id="Number-为NaN的3种情况"><a href="#Number-为NaN的3种情况" class="headerlink" title="Number( )为NaN的3种情况"></a>Number( )为NaN的3种情况</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"> <span class="hljs-comment">// 1、number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">NaN</span>)); <span class="hljs-comment">// NaN</span><br><br> <span class="hljs-comment">// 2、string</span><br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-string">&quot;1a23&quot;</span>));<span class="hljs-comment">// 非纯数字的字符串--&gt;NaN</span><br><br> <span class="hljs-comment">// 3、undefined</span><br> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(<span class="hljs-literal">undefined</span>));<span class="hljs-comment">//NaN  undefined--&gt;NaN</span><br></code></pre></div></td></tr></table></figure><h2 id="不同类型之间进行比较"><a href="#不同类型之间进行比较" class="headerlink" title="不同类型之间进行比较"></a>不同类型之间进行比较</h2><ul><li>两个操作数都是数值，则进行数值比较</li><li>两个操作数都是字符串，则比较两个字符串对应ASCⅡ码</li><li>两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较</li><li>两个操作数有一个是对象，则先调用valueOf()方法或toString()方法，再用结果比较</li></ul><p><img src="https://gitee.com/arfbt/picgo/raw/master/img/202205052020327.png" alt="13"></p><h2 id="常用数组方法"><a href="#常用数组方法" class="headerlink" title="常用数组方法"></a>常用数组方法</h2><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-comment">//数组增删改查</span><br><br><span class="hljs-comment">//从末尾增</span><br><span class="hljs-keyword">var</span> result = arr.push(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的末尾增加一个或者多个</span><br><span class="hljs-comment">//参数：增加的元素</span><br><span class="hljs-comment">//返回值：返回加入元素后数组的新长度</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//从末尾去删</span><br><span class="hljs-keyword">var</span> result = arr.pop();<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的末尾删除一个</span><br><span class="hljs-comment">//参数：无</span><br><span class="hljs-comment">//返回值：返回删除的那一个元素</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//从头部增</span><br><span class="hljs-keyword">var</span> result = arr.unshift(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的头部增加一个或者多个</span><br><span class="hljs-comment">//参数：增加的元素</span><br><span class="hljs-comment">//返回值：返回加入元素后数组的新长度</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//从头部去删</span><br><span class="hljs-keyword">var</span> result = arr.shift();<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的头部删除一个</span><br><span class="hljs-comment">//参数：无</span><br><span class="hljs-comment">//返回值：返回删除的那一个元素</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><br><span class="hljs-comment">//增删改一体化</span><br><span class="hljs-comment">//这个方法根据参数的不同，有不同的功能</span><br><span class="hljs-comment">//这个方法我们大家先当作删除去理解</span><br><br><span class="hljs-comment">//保留</span><br><span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组0位开始保留原数组的任意个元素</span><br><span class="hljs-comment">//参数：一个   代表保留的元素个数</span><br><span class="hljs-comment">//返回值：返回原数组除去保留元素之后的数组</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//删除</span><br><span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的任意位置删除任意个元素</span><br><span class="hljs-comment">//参数：两个   第一个代表从哪开始，第二个代表删除几个</span><br><span class="hljs-comment">//返回值：返回删除的元素组成的新数组</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//增加</span><br><span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>,<span class="hljs-number">600</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：从数组的任意位置添加任意多个元素</span><br><span class="hljs-comment">//参数：多个   第一个代表从哪开始，第二个代表删除0个，后面的代表新增的元素</span><br><span class="hljs-comment">//返回值：返回删除的元素组成的新数组，最终是空数组</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//修改</span><br><span class="hljs-keyword">var</span> result = arr.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">2000</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：修改数组当中任意的元素</span><br><span class="hljs-comment">//参数：多个   第一个代表从哪开始，第二个代表删除几个，后面的代表新增的元素</span><br><span class="hljs-comment">//返回值：返回删除的元素组成的新数组</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//翻转数组</span><br><span class="hljs-keyword">var</span> result = arr.reverse();<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(result == arr);<br><span class="hljs-comment">//功能：翻转数组</span><br><span class="hljs-comment">//参数：无</span><br><span class="hljs-comment">//返回值：返回翻转后的原数组</span><br><span class="hljs-comment">//这个方法影响原数组</span><br><br><br><span class="hljs-comment">//把数组再转化为字符串  和字符串方法 split是一个逆运算</span><br><span class="hljs-keyword">var</span> result = arr.join(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-comment">//功能：以指定的字符串为连接符，讲数组元素连接成一个字符串</span><br><span class="hljs-comment">//参数：如果不传，默认以逗号为连接符，将元素连接成字符串</span><br><span class="hljs-comment">//如果传的是正常字符串，那么以这个字符串为连接符将元素连接成字符串</span><br><span class="hljs-comment">//     如果传的是空串，那么直接将字符串连接成字符串，中间没有任何连接</span><br><span class="hljs-comment">//返回值：返回连接好的字符串</span><br><span class="hljs-comment">//这个方法对原数组没有影响</span><br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><br><span class="hljs-comment">//concat</span><br><span class="hljs-keyword">var</span> result = arr.concat([<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>]);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(arr === result);<br><span class="hljs-comment">//功能：在数组的末尾拼接元素</span><br><span class="hljs-comment">//参数：可以不写，相当于复制一个数组</span><br><span class="hljs-comment">//     也可以写一个或者多个值，会把这些值拼接到数组末尾</span><br><span class="hljs-comment">//     也可以写数组，会先把数组拆开，把元素拼接到数组末尾</span><br><span class="hljs-comment">//返回值：返回拼接好的新数组</span><br><span class="hljs-comment">//这个方法对原数组没有影响</span><br><br><br><span class="hljs-comment">//slice</span><br><span class="hljs-keyword">var</span> result = arr.slice(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：在数组当中截取部分元素形成新数组</span><br><span class="hljs-comment">//参数：和字符串方法slice一致；起始位置和结束位置，不包含结束位置的元素</span><br><span class="hljs-comment">//  如果只传一个代表起始位置，一直到结束。两个位置都可以使用负数</span><br><span class="hljs-comment">//返回值：返回截取的元素形成的新数组</span><br><span class="hljs-comment">//这个方法对原数组没有影响</span><br><br>arr = [<span class="hljs-number">18</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">88</span>,<span class="hljs-number">66</span>,<span class="hljs-number">22</span>];<br><br><span class="hljs-keyword">var</span> result = arr.sort(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br><span class="hljs-keyword">return</span> b - a;<br>&#125;);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(result === arr);<br><span class="hljs-comment">//功能：对数组进行排序</span><br><span class="hljs-comment">//参数：如果不写，默认把每个元素转化为字符串进行排序（按照Unicode码）</span><br><span class="hljs-comment">//   如果要按照升序降序去排，需要传一个参数是函数</span><br><span class="hljs-comment">//     这个函数有两个形参</span><br><br><span class="hljs-comment">//返回值：排好序的原数组</span><br><span class="hljs-comment">//这个方法对原数组有影响</span><br><br><span class="hljs-comment">//valueOf 是Object的原型当中的</span><br><span class="hljs-comment">//返回数组实例对象。</span><br><span class="hljs-keyword">var</span> result = arr.valueOf()<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-built_in">console</span>.log(result === arr);<br><br><span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&#x27;111&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> o);<br><span class="hljs-keyword">var</span> s = o.valueOf();<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> s);<br><span class="hljs-comment">//功能：获取数组对象的基本值，数组实例对象。</span><br><span class="hljs-comment">//参数：无</span><br><span class="hljs-comment">//返回值：返回原数组，因为数组是非包装对象，所以它是没有基本值</span><br><br><span class="hljs-comment">//toString</span><br><span class="hljs-keyword">var</span> result = arr.toString()<br>     <span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(arr);<br><span class="hljs-comment">//功能：将数组对象转化为字符串</span><br><span class="hljs-comment">//参数：无</span><br><span class="hljs-comment">//返回值：把数组的中括号去掉，其余加引号形成字符串返回</span><br></code></pre></div></td></tr></table></figure><p>对原数组有影响的方法：<code>push()</code> <code>pop()</code> <code>unshift()</code> <code>shift()</code> <code>splice()</code> <code>reverse()</code> <code>sort()</code></p><p>对原数组没有影响的方法：<code>join()</code> <code>concat()</code> <code>slice()</code> <code>valueOf()</code> <code>toString()</code></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组串联</title>
    <link href="/2022/04/07/%E6%95%B0%E7%BB%84%E4%B8%B2%E8%81%94/"/>
    <url>/2022/04/07/%E6%95%B0%E7%BB%84%E4%B8%B2%E8%81%94/</url>
    
    <content type="html"><![CDATA[<h2 id="1929-数组串联"><a href="#1929-数组串联" class="headerlink" title="1929. 数组串联"></a><a href="https://leetcode-cn.com/problems/concatenation-of-array/">1929. 数组串联</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给你一个长度为 n 的整数数组 nums 。请你构建一个长度为 2n 的答案数组 ans ，数组下标 从 0 开始计数 ，对于所有 0 <= i < n 的 i ，满足下述所有要求：<br>❉&nbsp;&nbsp;&nbsp;ans[i] == nums[i]<br>❉&nbsp;&nbsp;&nbsp;ans[i + n] == nums[i]<br>具体而言，ans 由两个 nums 数组 <strong>串联</strong> 形成。<br>返回数组 ans 。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [1,2,1]<br>输出：[1,2,1,1,2,1]<br>解释：数组 ans 按下述方式形成：<br>- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]<br>- ans = [1,2,1,1,2,1]<p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [1,3,2,1]<br>输出：[1,3,2,1,1,3,2,1]<br>解释：数组 ans 按下述方式形成：<br>- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]<br>- ans = [1,3,2,1,1,3,2,1]<p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;n == nums.length<br>❉&nbsp;&nbsp;&nbsp;1 <= n <= 1000<br>❉&nbsp;&nbsp;&nbsp;1 <= num[i] <= 1000</p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">和昨天一样，多一次遍历而已，不再赘述</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">getConcatenation</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++ i)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = length; j &lt; length * <span class="hljs-number">2</span>; ++ j)&#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[j-length]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于排列构建数组</title>
    <link href="/2022/04/06/%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/"/>
    <url>/2022/04/06/%E5%9F%BA%E4%BA%8E%E6%8E%92%E5%88%97%E6%9E%84%E5%BB%BA%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1920-基于排列构建数组"><a href="#1920-基于排列构建数组" class="headerlink" title="1920. 基于排列构建数组"></a><a href="https://leetcode-cn.com/problems/build-array-from-permutation/">1920. 基于排列构建数组</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给你一个 从 0 开始的排列 nums（下标也从 0 开始）。请你构建一个 同样长度 的数组 ans ，其中，对于每个 i（0 <= i < nums.length），都满足 ans[i] = nums[nums[i]] 。返回构建好的数组 ans 。<br>从 0 开始的排列 nums 是一个由 0 到 nums.length - 1（0 和 nums.length - 1 也包含在内）的不同整数组成的数组。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [0,2,1,5,3,4]<br>输出：[0,1,2,4,5,3]<br>解释：数组 ans 构建如下：<br>ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]<br>    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]<br>    = [0,1,2,4,5,3]</strong></p><p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [5,0,1,2,3,4]<br>输出：[4,5,0,1,2,3]<br>解释：数组 ans 构建如下：<br>ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]<br>    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]<br>    = [4,5,0,1,2,3]</strong></p><p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;1 <= nums.length <= 1000<br>❉&nbsp;&nbsp;&nbsp;0 <= nums[i] <= nums.length<br>❉&nbsp;&nbsp;&nbsp;nums中的元素<strong>互不相同</strong></p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">最简单粗暴的方法，遍历初始数组，求得运算后的数组，返回这个新的数组，时间复杂度为O(n)，老师看了想打人（😅）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">buildArray</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-keyword">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; ++i)<br>        &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(nums[nums[i]]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML常见问题以及技巧</title>
    <link href="/2022/04/05/HTML+CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/"/>
    <url>/2022/04/05/HTML+CSS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="width属性的“继承”问题"><a href="#width属性的“继承”问题" class="headerlink" title="width属性的“继承”问题"></a>width属性的“继承”问题</h2><p>常见的拥有继承性的属性以<span class="label label-primary">text-</span>、<span class="label label-primary">font-</span>、<span class="label label-primary">line-</span>开头的属性较为常用。其中也有例外如<span class="label label-primary">a</span>标签的字体颜色是不继承的，它有它自己的默认颜色-<span style="color:rgb(82, 164, 225);">蓝色</span>，下划线等自带样式，<span class="label label-primary">h1~h6</span>的字体大小是不继承的，跟<span class="label label-primary">a</span>标签一样都是有自带默认值，除非单独为其设置样式才可以改变。</p><ol><li><strong>子元素是块级元素且无定位或浮动时，是不需要写width属性，就可以默认“继承”的。否则就要特殊声明一下width属性。</strong></li><li><strong>当使用width:100%的时候 也要注意其基准点到底是谁</strong><ul><li>对于使用position:relative的子元素或浮动的子元素,其基准点始终是基于其直接父元素而言的，跟其父元素是否有定位无关。</li><li>对于绝对定位position:absolute的子元素，其基准点是相对于离其最近的一层定位父元素而言。如果其所有父级元素均无定位，则是相对于<em><strong>初始包含块</strong></em>而言。</li><li>对于使用position:fixed的子元素，其基准点就是<em><strong>视口（Viewport）</strong></em>。跟父元素无关。</li></ul></li></ol><h2 id="为什么块状元素浮动后就不会独占一行了？"><a href="#为什么块状元素浮动后就不会独占一行了？" class="headerlink" title="为什么块状元素浮动后就不会独占一行了？"></a>为什么块状元素浮动后就不会独占一行了？</h2><p>因为浮动的包裹性，浮动后元素只会占据该占据的空间<strong>（包裹性指的是，浮动元素的宽度会收缩到与内容一致，由于包裹性的特点，浮动元素一般需要手动设置width）</strong>。</p><h2 id="float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？"><a href="#float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？" class="headerlink" title="float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？"></a>float和position：relative可以同时用吗？如果能，为什么能？该元素是否还在标准文档流中？</h2><p>float和relative没有任何冲突，但是float不能和absolute同时使用，float之后元素就不在标准文档流中了，relative对这个没有任何影响。</p><h2 id="CSS-min-height属性"><a href="#CSS-min-height属性" class="headerlink" title="CSS min-height属性"></a>CSS min-height属性</h2><p>该属性值会对元素的高度设置一个最低限制。因此，元素可以比指定值高，但不能比其矮，不允许指定负值，没有继承性。<strong>一般用在解决二级菜单内容超出规定区域的问题上</strong>。</p><h2 id="sticky-粘性布局特性"><a href="#sticky-粘性布局特性" class="headerlink" title="sticky-粘性布局特性"></a>sticky-粘性布局特性</h2><p>position:sticky有个非常重要的特性，那就是sticky元素效果完全受制于父级元素们。<br>这和position:fixed定位有着根本性的不同，fixed元素直抵页面根元素，其他父元素对其left/top定位无法限制。</p><p>sticky元素以下一些特性表现：</p><ol><li>父级元素不能有任何overflow:visible以外的overflow设置，否则没有粘滞效果，因为改变了滚动容器（即使没有出现滚动条），因此，如果你的position:sticky无效，看看是不是某一个祖先元素设置了overflow:hidden，移除即可。</li><li>父级元素也不能设置固定的height高度值，否则也没有粘滞效果。</li><li>同一个父容器中的sticky元素，如果定位值相等，则会重叠；如果属于不同父元素，则会鸠占鹊巢，挤开原来的元素，形成依次占位的效果。</li><li>sticky定位，不仅可以设置top，基于滚动容器上边缘定位，还可以设置bottom，也就是相对底部粘滞。如果是水平滚动，也可以设置left和right值。</li></ol><h2 id="包含块、初始包含块"><a href="#包含块、初始包含块" class="headerlink" title="包含块、初始包含块"></a>包含块、初始包含块</h2><p>根元素的包含块（也称为初始包含块）由用户代理建立，在HTML中，根元素就是html元素，不过有些浏览器会使用body作为根元素。在大多数浏览器中，<strong>初始包含块是一个视窗大小的矩形，不等于视窗</strong>。</p><p>对于一个非根元素，如果其position值是relative或static，包含块则由<strong>最近的块级框</strong>构成。</p><p>对于一个非根元素，如果其position值是fixed，包含块是<strong>视口</strong>。</p><p>对于一个非根元素，如果其position值是absolute，包含块设置为<strong>最近的position值不是static的祖先元素（可以是任何类型）</strong>。这个过程如下：</p><ul><li>如果这个祖先是块级元素，包含块则设置为该元素的内边距边界，也就是内容区域。</li><li>如果没有祖先，元素的包含块定义为初始包含块。</li></ul><p><strong>浮动元素的包含块为其最近的块级祖先元素</strong>。</p><p>应用：使用绝对定位来模拟固定定位（ie6下，fixed失效）</p><p>解决思路：系统的滚动条是在文档上，而不是在html,body上。body下的元素当position为absolute时，包含块为初始包含块，当拉动系统滚动条时，包含块随之移动。把系统滚动条禁止掉，给body加上滚动条，body成为元素的初始包含块。拉动滚动条，达到fixed的效果。</p><h2 id="置换元素（替换元素）"><a href="#置换元素（替换元素）" class="headerlink" title="置换元素（替换元素）"></a>置换元素（替换元素）</h2><p><strong>置换元素</strong>又叫<strong>替换元素</strong>，一个<strong>内容</strong>不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。它们所具有的特征为：在不使用css修饰时，元素的标签和属性也会影响元素的显示。</p><p>如在<span class="label label-primary">img</span>中，浏览器会根据src属性读取图片并显示，且图片大小会影响<span class="label label-primary">img</span>标签大小；<span class="label label-primary">input</span>标签的type属性会影响<span class="label label-primary">input</span>的显示是输入还是选择。</p><p>常见的置换元素有<span class="label label-primary">img</span>、<span class="label label-primary">input</span>、<span class="label label-primary">textarea</span>、<span class="label label-primary">select</span>、<span class="label label-primary">object</span>、<span class="label label-primary">iframe</span>、<span class="label label-primary">canvas</span>等。</p><p class="note note-danger">总结</p><ul><li>若<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 且元素有固有宽度，则 width 的使用值为该固有宽度（拥有默认宽高的 input 当宽度的值为auto时，则宽度使用值为其默认的固有宽度）。</li><li>若<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 且高度有 非auto 的计算值，并且元素有固有宽高比，则 width 的使用值为 高度使用值 * 固有宽高比（img 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置）。</li><li>当<span style="color:rgb(255, 0, 255);">宽度</span>的值为 auto 时，则宽度的使用值为 300px（iframe, canvas等标签）。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且元素有固有高度，则 height 的使用值为该固有高度（img标签内图片有固有高度）。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且宽度有非 auto 的值，并且元素有固有宽高比，则 height 值为：宽度使用值 / 固有宽高比。</li><li>若<span style="color:rgb(255, 255, 0);">高度</span>的值为 auto 且上述条件完全不符，则 height 值不能大于150px，且宽度不能大于长方形高度的2倍。</li></ul><h2 id="行内元素（内联元素）、行内块元素、块元素"><a href="#行内元素（内联元素）、行内块元素、块元素" class="headerlink" title="行内元素（内联元素）、行内块元素、块元素"></a>行内元素（内联元素）、行内块元素、块元素</h2><p><span style="color:rgb(255, 0, 0);"><strong>行内元素（display:inline）</strong></span></p><p><strong>特点</strong>：在水平方向上排列，它的宽高随内容而定。不可以设置宽高，可以设置行高（line-height）。设置margin和padding的上下无效。<br><strong>常见的行内元素</strong>：<span class="label label-primary">a</span>、<span class="label label-primary">ins</span>、<span class="label label-primary">br</span>、<span class="label label-primary">em</span>、<span class="label label-primary">font</span>、<span class="label label-primary">img</span>、<span class="label label-primary">label</span>、<span class="label label-primary">small</span>、<span class="label label-primary">span</span>、<span class="label label-primary">del</span>、<span class="label label-primary">strong</span><br><strong>注意</strong>：<u><em><strong>虽然行内元素设置行高之后会有位置的变化，但是并没有改变盒子大小。有些行内元素可以设置宽高，是因为它们是置换元素(拥有内置宽高也可以设置宽高属性)。</strong></em></u></p><p><strong>水平居中</strong>：给父元素加<span class="label label-primary">text-align:center</span></p><p><strong>垂直居中</strong>：给父元素加<span class="label label-primary">line-height:xxx(height的值)</span></p><p><span style="color:rgb(255, 0, 0);"><strong>行内块元素（display:inline-block）</strong></span></p><p><strong>特点</strong>：拥有块级元素和行内的性质，既可以在一行排列(从左到右)，也可以设置宽高等属性，不自动换行。</p><p><strong>常见的行内块元素</strong>：<span class="label label-primary">input</span>、<span class="label label-primary">img</span>、<span class="label label-primary">video</span>、<span class="label label-primary">select</span>、<span class="label label-primary">source</span></p><p><strong>水平居中</strong>：</p><ol><li>给父元素加<span class="label label-primary">text-align:center</span></li><li>给自身添加margin/padding调整</li></ol><p><span style="color:rgb(255, 0, 0);"><strong>块元素（display:block）</strong></span></p><p><strong>特点</strong>：在垂直方向上排列，独占一行，自动换行。</p><p><strong>常见的块元素</strong>：<span class="label label-primary">div</span>、<span class="label label-primary">dl</span>、<span class="label label-primary">dd</span>、<span class="label label-primary">dt</span>、<span class="label label-primary">form</span>、<span class="label label-primary">h1~h6</span>、<span class="label label-primary">hr</span>、<span class="label label-primary">ol</span>、<span class="label label-primary">p</span>、<span class="label label-primary">header</span>、<span class="label label-primary">footer</span>、<span class="label label-primary">section</span>、<span class="label label-primary">nav</span></p><p><strong>水平居中</strong>：</p><ol><li>给自身加<span class="label label-primary">margin:0 auto</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:0</span>和<span class="label label-primary">right:0</span>和<span class="label label-primary">margin:auto</span></li><li>利用弹性布局实现<em><strong>（设置弹性布局之后，子元素的<span class="label label-primary">float</span>、<span class="label label-primary">clear</span>、<span class="label label-primary">vertical-align</span>属性失效）</strong></em>，给父元素添加<span class="label label-primary">display:flex</span>和<span class="label label-primary">justify-content:center</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:0</span>和<span class="label label-primary">transform: translate(-50%, 0)</span></li></ol><p><strong>垂直居中</strong>：</p><ol><li>利用弹性布局实现<em><strong>（设置弹性布局之后，子元素的<span class="label label-primary">float</span>、<span class="label label-primary">clear</span>、<span class="label label-primary">vertical-align</span>属性失效）</strong></em>，给父元素添加<span class="label label-primary">display:flex</span>和<span class="label label-primary">align-items:center</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:50%</span>和<span class="label label-primary">margin-top:-xxx(自身高度一半的相反数)</span>，因为top是根据盒子顶部进行定位的，所以要再向上移动自身高度的一半</li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">transform: translate(0, -50%)</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">bottom:0</span>和<span class="label label-primary">margin:auto</span></li></ol><p><strong>垂直水平居中</strong>：</p><ol><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">left:50%</span>和<span class="label label-primary">top:50%</span>和<span class="label label-primary">transform: translate(-50%, -50%)</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:absolute</span>和<span class="label label-primary">top:0</span>和<span class="label label-primary">bottom:0和<span class="label label-primary">left:0</span>和<span class="label label-primary">right:0</span></span>和<span class="label label-primary">margin:auto</span></li><li>设置父元素相对定位，自身设置<span class="label label-primary">position:relative</span>和<span class="label label-primary">top: calc(50% - 自身高度的一半)</span>和<span class="label label-primary">left: calc(50% - 自身宽度的一半)</span></li><li>设置父元素<span class="label label-primary">display:flex</span>和<span class="label label-primary">justify-content: center</span>和<span class="label label-primary">align-items: center</span></li><li>设置父元素<span class="label label-primary">display:flex</span>，自身设置<span class="label label-primary">margin:auto</span></li></ol><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><ol><li><em><strong>单行文本垂直居中</strong></em>，设置line-height=height即可。</li></ol><h2 id="隐藏元素的几种方法"><a href="#隐藏元素的几种方法" class="headerlink" title="隐藏元素的几种方法"></a>隐藏元素的几种方法</h2><ol><li><span class="label label-primary">overflow:hidden</span></li><li><span class="label label-primary">display:none</span></li><li><span class="label label-primary">opacity:0</span></li><li><span class="label label-primary">position:absolutely</span><br><span class="label label-primary">top:-4555px</span><br><span class="label label-primary">left:-4555px</span></li><li><span class="label label-primary">visibility:hidden</span></li><li><span class="label label-primary">margin:0</span><br><span class="label label-primary">border:0</span><br><span class="label label-primary">padding:0</span><br><span class="label label-primary">height:0</span><br><span class="label label-primary">width:0</span><br><span class="label label-primary">overflow:hidden</span></li></ol><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><p>​        BFC 的意思是 <strong>Block Formatting Context</strong> ，即<strong>块级格式上下文</strong>。 然后，当元素满足了某些条件，我们认为该元素创建了 <strong>BFC</strong>。 创建了 BFC 的元素我们可以把他看做是一个独立的容器，容器内的元素不论如何布局都不会影响到外面。</p><h3 id="创建bfc的方式"><a href="#创建bfc的方式" class="headerlink" title="创建bfc的方式"></a>创建bfc的方式</h3><ul><li>浮动元素：元素的float不是none的元素</li><li>绝对定位的元素：position的值为absolute或fixed</li><li>行内块：<code>display:inline-block</code></li><li>具有<code>overflow</code>并且值不是<code>visible</code>的块元素</li><li>伸缩项目</li><li>多列容器<code>column-count</code>或<code>column-width</code>不为auto</li><li>根元素<code>display:flow-root</code></li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中</li><li>表格单元格（th、td）、表格行（tr）、表格标题（caption）、table、thead、tbody、tfoot</li></ul><h3 id="bfc解决的问题"><a href="#bfc解决的问题" class="headerlink" title="bfc解决的问题"></a>bfc解决的问题</h3><ul><li>解决浮动导致父元素高度塌陷</li><li>解决外边距重叠</li><li>阻止标准流元素被浮动元素覆盖</li></ul><h2 id="img父元素高出3px原因及解决方案"><a href="#img父元素高出3px原因及解决方案" class="headerlink" title="img父元素高出3px原因及解决方案"></a>img父元素高出3px原因及解决方案</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>​        当div/a中包含img时，父元素的高度比img图片的高度多出3px，img是一种类似text的标签元素，在结束的时候，会在末尾加上一个空白符（匿名文本），这个文本外有一个匿名行级盒子，它默认的vertical-align是baseline的，而且往往因为上文line-height的影响，使它有个line-height，从而使其有了高度，因为baseline对齐的原因，这个匿名盒子就会下沉，往下撑开一些距离，所以把父元素撑高了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>消除掉匿名盒子的高度，给a设置line-height:0或font-size:0</li><li>给两者vertical-align:top，让其top对齐，而不是baseline对齐</li><li>给img以display:block，让它和匿名行级盒子不在一个布局上下文中，也就不存在行级盒的对齐问题</li></ul><h2 id="overflow-hidden的作用"><a href="#overflow-hidden的作用" class="headerlink" title="overflow:hidden的作用"></a>overflow:hidden的作用</h2><ul><li>给一个元素中设置<code>overflow:hidden</code>，那么该元素的内容若超出了给定的宽度和高度属性，那么超出的部分将会被隐藏，不占位（一般情况下，在页面中，一般溢出后会显示省略号，比如，当一行文本超出固定宽度就隐藏超出的内容显示省略号，这时就需要以下属性配合工作：<code>overflow: hidden;</code> <code>white-space: nowrap;</code> <code>text-overflow: ellipsis;</code>）</li><li>给父元素设置<code>overflow:hidden</code>可以清除子元素的浮动，在IE比较低版本的浏览器中还需要加上<code>zoom:1;</code></li><li>父级元素内部有子元素，如果给子元素添加margin-top样式，那么父级元素也会跟着下来，造成外边距塌陷，这时给父级元素添加<code>overflow:hidden</code>即可解决</li></ul><h2 id="flex收缩极限"><a href="#flex收缩极限" class="headerlink" title="flex收缩极限"></a>flex收缩极限</h2><p><code>flex-shrink</code>并不能够无限缩小，而是有极限的，比如不会收缩到比里面的内容还小，具体算法不再探究</p>]]></content>
    
    
    <categories>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两数之和</title>
    <link href="/2022/03/23/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2022/03/23/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h2><p><em>难度：<span style="color:rgb(133, 220, 85);">简单</span></em></p><p><span class="label label-info" style="font-size:20px"><strong>题目</strong></span></p><p class="note note-info">给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。</p><p><span class="label label-primary"><strong>示例 1：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</strong></p><p><span class="label label-primary"><strong>示例 2：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [3,2,4], target = 6<br>输出：[1,2]</strong></p><p><span class="label label-primary"><strong>示例 3：</strong></span></p><p class="note note-secondary"><strong>输入：nums = [3,3], target = 6<br>输出：[0,1]</strong></p><p><span class="label label-warning"><strong>提示：</strong></span></p><p class="note note-light">❉&nbsp;&nbsp;&nbsp;2 <= nums.length <= 10<sup>4</sup><br>❉&nbsp;&nbsp;&nbsp;-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup><br>❉&nbsp;&nbsp;&nbsp;-10<sup>9</sup> <= target <= 10<sup>9</sup><br><strong>❉&nbsp;&nbsp;&nbsp;只会存在一个有效答案</strong></p><p class="note note-warning"><strong>进阶：</strong>你可以想出一个时间复杂度小于 O(n<sup>2</sup>) 的算法吗？</p><p><span class="label label-info" style="font-size:20px"><strong>思路</strong></span></p><p class="note note-info">最简单也是最低级的解法，两层循环暴力求解，时间复杂度为O(n^2^)，老师看了想打人（😅）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;<br>                    <span class="hljs-keyword">return</span> &#123;i,j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言printf()函数输出类型详解</title>
    <link href="/2021/10/05/C%E8%AF%AD%E8%A8%80printf()%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/10/05/C%E8%AF%AD%E8%A8%80printf()%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BA%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>不常用的类型遇到直接查表，干净又卫生嗷兄弟们</p><h4 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h4><blockquote><p>以十进制形式输出带符号整数(正数不输出符号)</p></blockquote><h5 id="o-O"><a href="#o-O" class="headerlink" title="%o/O"></a>%o/O</h5><blockquote><p>以八进制形式输出无符号整数(不输出前缀0)</p></blockquote><h5 id="x-X"><a href="#x-X" class="headerlink" title="%x/X"></a>%x/X</h5><blockquote><p>以十六进制形式输出无符号整数(不输出前缀0x)</p></blockquote><h5 id="u"><a href="#u" class="headerlink" title="%u"></a>%u</h5><blockquote><p>以十进制形式输出无符号整数</p></blockquote><h5 id="9-1f"><a href="#9-1f" class="headerlink" title="%9.1f"></a>%9.1f</h5><blockquote><p>以小数形式输出单、双精度实数（总共保留9位数，小数点后保留一位数）</p></blockquote><h5 id="e-E"><a href="#e-E" class="headerlink" title="%e,E"></a>%e,E</h5><blockquote><p>以指数形式输出单、双精度实数</p></blockquote><h5 id="g-G"><a href="#g-G" class="headerlink" title="%g,G"></a>%g,G</h5><blockquote><p>以%f或%e中较短的输出宽度输出单、双精度实数</p></blockquote><h5 id="c"><a href="#c" class="headerlink" title="%c"></a>%c</h5><blockquote><p>输出单个字符</p></blockquote><h5 id="s"><a href="#s" class="headerlink" title="%s"></a>%s</h5><blockquote><p>输出字符串</p></blockquote><h5 id="p"><a href="#p" class="headerlink" title="%p"></a>%p</h5><blockquote><p>输出指针地址</p></blockquote><h5 id="lu"><a href="#lu" class="headerlink" title="%lu"></a>%lu</h5><blockquote><p>32位无符号整数</p></blockquote><h5 id="llu"><a href="#llu" class="headerlink" title="%llu"></a>%llu</h5><blockquote><p>64位无符号整数</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>printf()</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>printf()</tag>
      
      <tag>C/C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>macOS使用C/C++万能头文件保姆级教程</title>
    <link href="/2021/10/05/macOS%E4%BD%BF%E7%94%A8C:C++%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <url>/2021/10/05/macOS%E4%BD%BF%E7%94%A8C:C++%E4%B8%87%E8%83%BD%E5%A4%B4%E6%96%87%E4%BB%B6%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="macOS使用C-C-万能头文件保姆级教程"><a href="#macOS使用C-C-万能头文件保姆级教程" class="headerlink" title="macOS使用C/C++万能头文件保姆级教程"></a>macOS使用C/C++万能头文件保姆级教程</h2><p>Windows上面用万能头文件为我们省去了不少记头文件的麻烦，切换到macOS上来发现C/C++环境中没有自带这个头文件。不行，今天无论如何都要用到万能头文件。</p><h3 id="第一步：安装C-C-环境（本教程使用Xcode软件自带C-C-环境）"><a href="#第一步：安装C-C-环境（本教程使用Xcode软件自带C-C-环境）" class="headerlink" title="第一步：安装C/C++环境（本教程使用Xcode软件自带C/C++环境）"></a>第一步：安装C/C++环境（本教程使用Xcode软件自带C/C++环境）</h3><p>方法1：打开App Store，下载Xcode</p><p><img src="https://img-blog.csdnimg.cn/2021071522352944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="下载Xcode"></p><p>方法2：进入苹果开发者网站下载<a href="https://developer.apple.com/download/all/">Command Line Tool</a>（还是下稳定版好一些）</p><p><img src="https://img-blog.csdnimg.cn/20210715223639750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="下载Command Line Tool"></p><h3 id="第二步：打开“终端”，输入"><a href="#第二步：打开“终端”，输入" class="headerlink" title="第二步：打开“终端”，输入"></a>第二步：打开“终端”，输入</h3><p><code>echo | g++ -v -x c++ -E -</code></p><h3 id="找到如下显示内容"><a href="#找到如下显示内容" class="headerlink" title="找到如下显示内容"></a>找到如下显示内容</h3><p><code>/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include</code></p><p><img src="https://img-blog.csdnimg.cn/20210715223731916.png" alt="找到以下内容"></p><h3 id="第三步：在访达中按“⇧⌘G”来调出“前往文件夹”，输入"><a href="#第三步：在访达中按“⇧⌘G”来调出“前往文件夹”，输入" class="headerlink" title="第三步：在访达中按“⇧⌘Ｇ”来调出“前往文件夹”，输入"></a>第三步：在访达中按“⇧⌘Ｇ”来调出“前往文件夹”，输入</h3><p><code>Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1</code></p><p><img src="https://img-blog.csdnimg.cn/2021071522380527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="前往v1文件夹"></p><p>看到这么多熟悉的面孔，相信大家已经知道下一步该干嘛了</p><h3 id="第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc-h”"><a href="#第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc-h”" class="headerlink" title="第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc++.h”"></a>第四步：新建文件夹，命名为“bits”，进入“bits”，创建TXT文件并修改名称为“stdc++.h”</h3><p><img src="https://img-blog.csdnimg.cn/20210715223850550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="新建stdc++.h"></p><h3 id="第五步：修改文件内容，粘入以下代码"><a href="#第五步：修改文件内容，粘入以下代码" class="headerlink" title="第五步：修改文件内容，粘入以下代码"></a>第五步：修改文件内容，粘入以下代码</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// C++ includes used for precompiling -*- C++ -*-</span><br><br><span class="hljs-comment">// Copyright (C) 2003-2014 Free Software Foundation, Inc.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// This file is part of the GNU ISO C++ Library.  This library is free</span><br><span class="hljs-comment">// software; you can redistribute it and/or modify it under the</span><br><span class="hljs-comment">// terms of the GNU General Public License as published by the</span><br><span class="hljs-comment">// Free Software Foundation; either version 3, or (at your option)</span><br><span class="hljs-comment">// any later version.</span><br><br><span class="hljs-comment">// This library is distributed in the hope that it will be useful,</span><br><span class="hljs-comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="hljs-comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="hljs-comment">// GNU General Public License for more details.</span><br><br><span class="hljs-comment">// Under Section 7 of GPL version 3, you are granted additional</span><br><span class="hljs-comment">// permissions described in the GCC Runtime Library Exception, version</span><br><span class="hljs-comment">// 3.1, as published by the Free Software Foundation.</span><br><br><span class="hljs-comment">// You should have received a copy of the GNU General Public License and</span><br><span class="hljs-comment">// a copy of the GCC Runtime Library Exception along with this program;</span><br><span class="hljs-comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span><br><span class="hljs-comment">// &lt;http://www.gnu.org/licenses/&gt;.</span><br><br><span class="hljs-comment">/** @file stdc++.h</span><br><span class="hljs-comment">*  This is an implementation file for a precompiled header.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 17.4.1.2 Headers</span><br><br><span class="hljs-comment">// C</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cerrno&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cfloat&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ciso646&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;clocale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;csetjmp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;csignal&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdarg&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstddef&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ccomplex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cfenv&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cinttypes&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdbool&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdint&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctgmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cwchar&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cwctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-comment">// C++</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;deque&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ios&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iosfwd&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iterator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;locale&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;new&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;numeric&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stack&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdexcept&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;streambuf&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;typeinfo&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;utility&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;valarray&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> __cplusplus &gt;= 201103L</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;atomic&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;chrono&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;forward_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;initializer_list&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;random&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ratio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;regex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;scoped_allocator&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;system_error&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;tuple&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;typeindex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;type_traits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h3 id="第六步：测试"><a href="#第六步：测试" class="headerlink" title="第六步：测试"></a>第六步：测试</h3><p><img src="https://img-blog.csdnimg.cn/20210715224100355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDA4Mjc1Mg==,size_16,color_FFFFFF,t_70" alt="测试"></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>1.<a href="https://yang-xijie.github.io/vscode_cpp_macos/10_%E6%9E%81%E9%80%9F%E7%89%88.html">如何快速在macOS上配置VSCode编程Cpp的环境</a></p><p>2.<a href="https://www.cnblogs.com/lipoicyclic/p/14623307.html">macOS下使用bits/stdc++.h万能头文件</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
      <category>C/C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C/C++</tag>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/04/hello-world/"/>
    <url>/2021/10/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hello World</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hello World</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>本博客基于作者兴趣爱好打造，请大家友好评论，交流学习！</p>]]></content>
    
  </entry>
  
  
  
</search>
